{
  "id": "ec3fd3fa78d9a3e1172ce16cfa9fc205",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.8.17",
  "solcLongVersion": "0.8.17+commit.8df45f5f",
  "input": {
    "language": "Solidity",
    "sources": {
      "@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {ContractOwnershipStorage} from \"./../libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC173 Contract Ownership Standard (proxiable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\nabstract contract ContractOwnershipBase is Context, IERC173 {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @inheritdoc IERC173\n    function owner() public view virtual override returns (address) {\n        return ContractOwnershipStorage.layout().owner();\n    }\n\n    /// @inheritdoc IERC173\n    function transferOwnership(address newOwner) public virtual override {\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\n    }\n}\n"
      },
      "@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ContractOwnershipStorage} from \"./libraries/ContractOwnershipStorage.sol\";\nimport {ContractOwnershipBase} from \"./base/ContractOwnershipBase.sol\";\nimport {InterfaceDetection} from \"./../introspection/InterfaceDetection.sol\";\n\n/// @title ERC173 Contract Ownership Standard (immutable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Initializes the storage with an initial contract owner.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner the initial contract owner.\n    constructor(address initialOwner) {\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\n    }\n}\n"
      },
      "@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC-173 Contract Ownership Standard\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\ninterface IERC173 {\n    /// @notice Emitted when the contract ownership changes.\n    /// @param previousOwner the previous contract owner.\n    /// @param newOwner the new contract owner.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(address newOwner) external;\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner() external view returns (address contractOwner);\n}\n"
      },
      "@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {ProxyInitialization} from \"./../../proxy/libraries/ProxyInitialization.sol\";\nimport {InterfaceDetectionStorage} from \"./../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ContractOwnershipStorage {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    struct Layout {\n        address contractOwner;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.phase\")) - 1);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function constructorInit(Layout storage s, address initialOwner) internal {\n        if (initialOwner != address(0)) {\n            s.contractOwner = initialOwner;\n            emit OwnershipTransferred(address(0), initialOwner);\n        }\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\n    }\n\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function proxyInit(Layout storage s, address initialOwner) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.constructorInit(initialOwner);\n    }\n\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts if `sender` is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\n        address previousOwner = s.contractOwner;\n        require(sender == previousOwner, \"Ownership: not the owner\");\n        if (previousOwner != newOwner) {\n            s.contractOwner = newOwner;\n            emit OwnershipTransferred(previousOwner, newOwner);\n        }\n    }\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner(Layout storage s) internal view returns (address contractOwner) {\n        return s.contractOwner;\n    }\n\n    /// @notice Ensures that an account is the contract owner.\n    /// @dev Reverts if `account` is not the contract owner.\n    /// @param account The account.\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\n        require(account == s.contractOwner, \"Ownership: not the owner\");\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"
      },
      "@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC165} from \"./interfaces/IERC165.sol\";\nimport {InterfaceDetectionStorage} from \"./libraries/InterfaceDetectionStorage.sol\";\n\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\nabstract contract InterfaceDetection is IERC165 {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\n    }\n}\n"
      },
      "@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC165 Interface Detection Standard.\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\ninterface IERC165 {\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId the interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\n}\n"
      },
      "@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC165} from \"./../interfaces/IERC165.sol\";\n\nlibrary InterfaceDetectionStorage {\n    struct Layout {\n        mapping(bytes4 => bool) supportedInterfaces;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.introspection.InterfaceDetection.storage\")) - 1);\n\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\n\n    /// @notice Sets or unsets an ERC165 interface.\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\n    /// @param interfaceId the interface identifier.\n    /// @param supported True to set the interface, false to unset it.\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \"InterfaceDetection: wrong value\");\n        s.supportedInterfaces[interfaceId] = supported;\n    }\n\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId The interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\n            return false;\n        }\n        if (interfaceId == type(IERC165).interfaceId) {\n            return true;\n        }\n        return s.supportedInterfaces[interfaceId];\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"
      },
      "@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title Universal Meta-Transactions Forwarder Registry.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\ninterface IForwarderRegistry {\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\n    /// @param sender The sender account.\n    /// @param forwarder The forwarder account.\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\n}\n"
      },
      "@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {StorageSlot} from \"@openzeppelin/contracts/utils/StorageSlot.sol\";\n\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\nlibrary ProxyInitialization {\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\n    /// @dev Reverts if `phase` has been reached already.\n    /// @param storageSlot the storage slot where `phase` is stored.\n    /// @param phase the initialization phase.\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\n        require(currentVersion.value < phase, \"Storage: phase reached\");\n        currentVersion.value = phase;\n    }\n}\n"
      },
      "@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC20} from \"@openzeppelin/contracts/interfaces/IERC20.sol\";\nimport {IERC721} from \"./../../token/ERC721/interfaces/IERC721.sol\";\nimport {ContractOwnershipStorage} from \"./../../access/libraries/ContractOwnershipStorage.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\n\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\ncontract TokenRecoveryBase is Context {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using SafeERC20 for IERC20;\n    using Address for address payable;\n\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\n    ///  so that the extraction is limited to only amounts sent accidentally.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Reverts if `accounts` and `amounts` do not have the same length.\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\n    /// @param accounts the list of accounts to transfer the tokens to.\n    /// @param amounts the list of token amounts to transfer.\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) external virtual {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        uint256 length = accounts.length;\n        require(length == amounts.length, \"Recovery: inconsistent arrays\");\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                accounts[i].sendValue(amounts[i]);\n            }\n        }\n    }\n\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\n    ///  so that the extraction is limited to only amounts sent accidentally.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Reverts if `accounts`, `tokens` and `amounts` do not have the same length.\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\n    /// @param accounts the list of accounts to transfer the tokens to.\n    /// @param tokens the list of ERC20 token addresses.\n    /// @param amounts the list of token amounts to transfer.\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) external virtual {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        uint256 length = accounts.length;\n        require(length == tokens.length && length == amounts.length, \"Recovery: inconsistent arrays\");\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                tokens[i].safeTransfer(accounts[i], amounts[i]);\n            }\n        }\n    }\n\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\n    ///  so that the extraction is limited to only tokens sent accidentally.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Reverts if `accounts`, `contracts` and `amounts` do not have the same length.\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\n    /// @param accounts the list of accounts to transfer the tokens to.\n    /// @param contracts the list of ERC721 contract addresses.\n    /// @param tokenIds the list of token ids to transfer.\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) external virtual {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        uint256 length = accounts.length;\n        require(length == contracts.length && length == tokenIds.length, \"Recovery: inconsistent arrays\");\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                contracts[i].transferFrom(address(this), accounts[i], tokenIds[i]);\n            }\n        }\n    }\n}\n"
      },
      "@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {TokenRecoveryBase} from \"./base/TokenRecoveryBase.sol\";\nimport {ContractOwnership} from \"./../access/ContractOwnership.sol\";\n\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract TokenRecovery is TokenRecoveryBase, ContractOwnership {\n\n}\n"
      },
      "@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\ninterface IERC721 {\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\n    /// @dev Note: There can only be one approved address per token at a given time.\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @dev Reverts if `to` is the token owner.\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\n    /// @dev Emits an {Approval} event.\n    /// @param to The address to approve, or the zero address to remove any existing approval.\n    /// @param tokenId The token identifier to give approval for.\n    function approve(address to, uint256 tokenId) external;\n\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\n    /// @dev Reverts if the sender is the same as `operator`.\n    /// @dev Emits an {ApprovalForAll} event.\n    /// @param operator The address to approve for all tokens.\n    /// @param approved True to set an approval for all tokens, false to unset it.\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\n    /// @param tokenId The identifier of the token to transfer.\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /// @notice Safely transfers the ownership of a token to a recipient.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer.\n    /// @param tokenId The identifier of the token to transfer.\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /// @notice Safely transfers the ownership of a token to a recipient.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer.\n    /// @param tokenId The identifier of the token to transfer.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /// @notice Gets the balance of an address.\n    /// @dev Reverts if `owner` is the zero address.\n    /// @param owner The address to query the balance of.\n    /// @return balance The amount owned by the owner.\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /// @notice Gets the owner of a token.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @param tokenId The token identifier to query the owner of.\n    /// @return tokenOwner The owner of the token identifier.\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\n\n    /// @notice Gets the approved address for a token.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @param tokenId The token identifier to query the approval of.\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\n    function getApproved(uint256 tokenId) external view returns (address approved);\n\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\n    /// @param owner The address which gives the approval for all tokens.\n    /// @param operator The address which receives the approval for all tokens.\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\n}\n"
      },
      "@openzeppelin/contracts/interfaces/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
      },
      "@openzeppelin/contracts/utils/Address.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
      },
      "@openzeppelin/contracts/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
      },
      "contracts/GasStation.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0 <0.9.0;\n// [\"0x9551CaF0Ef97CA91a3FAc1fB8c7D83041cFf8EC5\",\"0x31d2CbD0fee68a2Ec6454f064f7c16bA1e1B7BBa\",\"0x964A2Bc59E73a2C793c3FEAC51Bba1Ea6A1B3C99\"]\n// [\"0x78731D3Ca6b7E34aC0F824c42a7cC18A495cabaB\",\"0xdD870fA1b7C4700F2BD7f44238821C26f7392148\", \"0x583031D1113aD414F02576BD6afaBfb302140225\", \"0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2\",\"0x4B20993Bc481177ec7E8f571ceCaE8A9e22C02db\"]\n\n\nimport {TokenRecovery} from \"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\";\nimport {ContractOwnership} from \"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\";\n\n\ncontract OpenCampusGasStation  is TokenRecovery {\n    \n    //address private owner;\n    address payable[] public pumps;\n    mapping(address => address payable) isPump;\n    uint total_value;\n    \n    \n    // event for EVM logging\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\n    event GasPumpsSet(address payable[] indexed oldGasPumps, address payable[] indexed newGasPumps);\n    \n    \n    // modifier to check if the caller is owner\n    \n    modifier isOwner() {\n        require(msg.sender == owner(), \"Caller is not owner\");\n        _;\n    }\n\n    // modifier to check if there are gas pumps\n    modifier hasGasPumps() {\n        require(pumps.length > 0, \"No gas pumps\");\n        _;\n    }\n    \n    constructor(address payable[] memory gasPumps) ContractOwnership(msg.sender) payable {\n        //owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\n        //emit OwnerSet(address(0), owner);\n        setGasPumps(gasPumps);\n\n        total_value = msg.value;  // msg.value is the ethers of the transaction\n    }\n    /*\n    function setOwner(address newOwner) public isOwner {\n        emit OwnerSet(owner, newOwner);\n        owner = newOwner; \n    }\n    \n    function getOwner() external view returns (address) {\n        return owner;\n    }\n    */\n\n    \n    function setGasPumps(address payable[] memory newGasPumps) public isOwner {\n        emit GasPumpsSet(pumps, newGasPumps);\n        pumps = newGasPumps; \n        for (uint i=0; i < pumps.length; i++) {\n            isPump[pumps[i]] = pumps[i];\n        }\n    }\n    \n\n    function getGasPumps() external view returns (address payable[] memory) {\n        return pumps;\n    }\n\n\n    function charge() payable public hasGasPumps {\n        total_value += msg.value;\n        uint256 pricePerPump = msg.value / pumps.length;\n        require(pricePerPump > 10000);\n        for (uint i=0; i < pumps.length; i++) {\n            total_value -= pricePerPump;\n            \n            withdraw(pumps[i], pricePerPump);\n        }\n    }\n\n    function charge(address payable[] memory addrs) payable public hasGasPumps {\n        total_value += msg.value;\n        uint256 pricePerPump = total_value / addrs.length;\n        \n        require(pricePerPump > 100000000000000000, \"Not enough funds for all wallets to be filled\");\n\n        for (uint i=0; i < addrs.length; i++) {\n            total_value -= pricePerPump;\n            withdraw(addrs[i], pricePerPump);\n        }\n    }\n    \n    function withdraw(address payable receiverAddr, uint receiverAmnt) private {\n        require(isPump[receiverAddr] == receiverAddr, \"Address not part of the Gas Station \");\n        receiverAddr.transfer(receiverAmnt);\n    }\n    \n}"
      },
      "contracts/OpenCampusGasStationMock.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {OpenCampusGasStation} from \"./GasStation.sol\";\n\ncontract OpenCampusGasStationMock is OpenCampusGasStation {\n    constructor(\n        address payable[] memory gasPumps\n    ) OpenCampusGasStation(gasPumps) {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"
      }
    },
    "settings": {
      "optimizer": { "enabled": true, "runs": 99999 },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata",
            "devdoc",
            "userdoc",
            "storageLayout",
            "evm.gasEstimates"
          ],
          "": ["ast"]
        }
      },
      "metadata": { "useLiteralContent": true }
    }
  },
  "output": {
    "sources": {
      "@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol": {
        "ast": {
          "absolutePath": "@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol",
          "exportedSymbols": {
            "ContractOwnership": [32],
            "ContractOwnershipBase": [82],
            "ContractOwnershipStorage": [307],
            "InterfaceDetection": [338]
          },
          "id": 33,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            { "id": 1, "literals": ["solidity", "^", "0.8", ".8"], "nodeType": "PragmaDirective", "src": "32:23:0" },
            {
              "absolutePath": "@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol",
              "file": "./libraries/ContractOwnershipStorage.sol",
              "id": 3,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 33,
              "sourceUnit": 308,
              "src": "57:82:0",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 2,
                    "name": "ContractOwnershipStorage",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 307,
                    "src": "65:24:0",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "absolutePath": "@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol",
              "file": "./base/ContractOwnershipBase.sol",
              "id": 5,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 33,
              "sourceUnit": 83,
              "src": "140:71:0",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 4,
                    "name": "ContractOwnershipBase",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 82,
                    "src": "148:21:0",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "absolutePath": "@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol",
              "file": "./../introspection/InterfaceDetection.sol",
              "id": 7,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 33,
              "sourceUnit": 339,
              "src": "212:77:0",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 6,
                    "name": "InterfaceDetection",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 338,
                    "src": "220:18:0",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "abstract": true,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 9,
                    "name": "ContractOwnershipBase",
                    "nameLocations": ["548:21:0"],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 82,
                    "src": "548:21:0"
                  },
                  "id": 10,
                  "nodeType": "InheritanceSpecifier",
                  "src": "548:21:0"
                },
                {
                  "baseName": {
                    "id": 11,
                    "name": "InterfaceDetection",
                    "nameLocations": ["571:18:0"],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 338,
                    "src": "571:18:0"
                  },
                  "id": 12,
                  "nodeType": "InheritanceSpecifier",
                  "src": "571:18:0"
                }
              ],
              "canonicalName": "ContractOwnership",
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 8,
                "nodeType": "StructuredDocumentation",
                "src": "291:218:0",
                "text": "@title ERC173 Contract Ownership Standard (immutable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."
              },
              "fullyImplemented": true,
              "id": 32,
              "linearizedBaseContracts": [32, 338, 350, 82, 105, 1569],
              "name": "ContractOwnership",
              "nameLocation": "527:17:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "global": false,
                  "id": 16,
                  "libraryName": {
                    "id": 13,
                    "name": "ContractOwnershipStorage",
                    "nameLocations": ["602:24:0"],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 307,
                    "src": "602:24:0"
                  },
                  "nodeType": "UsingForDirective",
                  "src": "596:67:0",
                  "typeName": {
                    "id": 15,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 14,
                      "name": "ContractOwnershipStorage.Layout",
                      "nameLocations": ["631:24:0", "656:6:0"],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 124,
                      "src": "631:31:0"
                    },
                    "referencedDeclaration": 124,
                    "src": "631:31:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Layout_$124_storage_ptr",
                      "typeString": "struct ContractOwnershipStorage.Layout"
                    }
                  }
                },
                {
                  "body": {
                    "id": 30,
                    "nodeType": "Block",
                    "src": "997:80:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 27,
                              "name": "initialOwner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 19,
                              "src": "1057:12:0",
                              "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [{ "typeIdentifier": "t_address", "typeString": "address" }],
                            "expression": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "expression": {
                                  "id": 22,
                                  "name": "ContractOwnershipStorage",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 307,
                                  "src": "1007:24:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_ContractOwnershipStorage_$307_$",
                                    "typeString": "type(library ContractOwnershipStorage)"
                                  }
                                },
                                "id": 24,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "1032:6:0",
                                "memberName": "layout",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 306,
                                "src": "1007:31:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_Layout_$124_storage_ptr_$",
                                  "typeString": "function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"
                                }
                              },
                              "id": 25,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1007:33:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Layout_$124_storage_ptr",
                                "typeString": "struct ContractOwnershipStorage.Layout storage pointer"
                              }
                            },
                            "id": 26,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1041:15:0",
                            "memberName": "constructorInit",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 200,
                            "src": "1007:49:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Layout_$124_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_Layout_$124_storage_ptr_$",
                              "typeString": "function (struct ContractOwnershipStorage.Layout storage pointer,address)"
                            }
                          },
                          "id": 28,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1007:63:0",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                        },
                        "id": 29,
                        "nodeType": "ExpressionStatement",
                        "src": "1007:63:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 17,
                    "nodeType": "StructuredDocumentation",
                    "src": "669:289:0",
                    "text": "@notice Initializes the storage with an initial contract owner.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner the initial contract owner."
                  },
                  "id": 31,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 20,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 19,
                        "mutability": "mutable",
                        "name": "initialOwner",
                        "nameLocation": "983:12:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 31,
                        "src": "975:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 18,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "975:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "974:22:0"
                  },
                  "returnParameters": { "id": 21, "nodeType": "ParameterList", "parameters": [], "src": "997:0:0" },
                  "scope": 32,
                  "src": "963:114:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 33,
              "src": "509:570:0",
              "usedErrors": []
            }
          ],
          "src": "32:1048:0"
        },
        "id": 0
      },
      "@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol": {
        "ast": {
          "absolutePath": "@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol",
          "exportedSymbols": {
            "Context": [1569],
            "ContractOwnershipBase": [82],
            "ContractOwnershipStorage": [307],
            "IERC173": [105]
          },
          "id": 83,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            { "id": 34, "literals": ["solidity", "^", "0.8", ".8"], "nodeType": "PragmaDirective", "src": "32:23:1" },
            {
              "absolutePath": "@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol",
              "file": "./../interfaces/IERC173.sol",
              "id": 36,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 83,
              "sourceUnit": 106,
              "src": "57:52:1",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 35,
                    "name": "IERC173",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 105,
                    "src": "65:7:1",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "absolutePath": "@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol",
              "file": "./../libraries/ContractOwnershipStorage.sol",
              "id": 38,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 83,
              "sourceUnit": 308,
              "src": "110:85:1",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 37,
                    "name": "ContractOwnershipStorage",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 307,
                    "src": "118:24:1",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "absolutePath": "@openzeppelin/contracts/utils/Context.sol",
              "file": "@openzeppelin/contracts/utils/Context.sol",
              "id": 40,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 83,
              "sourceUnit": 1570,
              "src": "196:66:1",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 39,
                    "name": "Context",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1569,
                    "src": "204:7:1",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "abstract": true,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 42,
                    "name": "Context",
                    "nameLocations": ["585:7:1"],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 1569,
                    "src": "585:7:1"
                  },
                  "id": 43,
                  "nodeType": "InheritanceSpecifier",
                  "src": "585:7:1"
                },
                {
                  "baseName": {
                    "id": 44,
                    "name": "IERC173",
                    "nameLocations": ["594:7:1"],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 105,
                    "src": "594:7:1"
                  },
                  "id": 45,
                  "nodeType": "InheritanceSpecifier",
                  "src": "594:7:1"
                }
              ],
              "canonicalName": "ContractOwnershipBase",
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 41,
                "nodeType": "StructuredDocumentation",
                "src": "264:278:1",
                "text": "@title ERC173 Contract Ownership Standard (proxiable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC165 (Interface Detection Standard)."
              },
              "fullyImplemented": true,
              "id": 82,
              "linearizedBaseContracts": [82, 105, 1569],
              "name": "ContractOwnershipBase",
              "nameLocation": "560:21:1",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "global": false,
                  "id": 49,
                  "libraryName": {
                    "id": 46,
                    "name": "ContractOwnershipStorage",
                    "nameLocations": ["614:24:1"],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 307,
                    "src": "614:24:1"
                  },
                  "nodeType": "UsingForDirective",
                  "src": "608:67:1",
                  "typeName": {
                    "id": 48,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 47,
                      "name": "ContractOwnershipStorage.Layout",
                      "nameLocations": ["643:24:1", "668:6:1"],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 124,
                      "src": "643:31:1"
                    },
                    "referencedDeclaration": 124,
                    "src": "643:31:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Layout_$124_storage_ptr",
                      "typeString": "struct ContractOwnershipStorage.Layout"
                    }
                  }
                },
                {
                  "baseFunctions": [104],
                  "body": {
                    "id": 62,
                    "nodeType": "Block",
                    "src": "773:65:1",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "expression": {
                                  "id": 56,
                                  "name": "ContractOwnershipStorage",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 307,
                                  "src": "790:24:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_ContractOwnershipStorage_$307_$",
                                    "typeString": "type(library ContractOwnershipStorage)"
                                  }
                                },
                                "id": 57,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "815:6:1",
                                "memberName": "layout",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 306,
                                "src": "790:31:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_Layout_$124_storage_ptr_$",
                                  "typeString": "function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"
                                }
                              },
                              "id": 58,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "790:33:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Layout_$124_storage_ptr",
                                "typeString": "struct ContractOwnershipStorage.Layout storage pointer"
                              }
                            },
                            "id": 59,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "824:5:1",
                            "memberName": "owner",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 276,
                            "src": "790:39:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_Layout_$124_storage_ptr_$returns$_t_address_$bound_to$_t_struct$_Layout_$124_storage_ptr_$",
                              "typeString": "function (struct ContractOwnershipStorage.Layout storage pointer) view returns (address)"
                            }
                          },
                          "id": 60,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "790:41:1",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "functionReturnParameters": 55,
                        "id": 61,
                        "nodeType": "Return",
                        "src": "783:48:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 50,
                    "nodeType": "StructuredDocumentation",
                    "src": "681:23:1",
                    "text": "@inheritdoc IERC173"
                  },
                  "functionSelector": "8da5cb5b",
                  "id": 63,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "owner",
                  "nameLocation": "718:5:1",
                  "nodeType": "FunctionDefinition",
                  "overrides": { "id": 52, "nodeType": "OverrideSpecifier", "overrides": [], "src": "746:8:1" },
                  "parameters": { "id": 51, "nodeType": "ParameterList", "parameters": [], "src": "723:2:1" },
                  "returnParameters": {
                    "id": 55,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 54,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 63,
                        "src": "764:7:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 53,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "764:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "763:9:1"
                  },
                  "scope": 82,
                  "src": "709:129:1",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "public"
                },
                {
                  "baseFunctions": [98],
                  "body": {
                    "id": 80,
                    "nodeType": "Block",
                    "src": "941:92:1",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 75,
                                "name": "_msgSender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1559,
                                "src": "1003:10:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                  "typeString": "function () view returns (address)"
                                }
                              },
                              "id": 76,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1003:12:1",
                              "tryCall": false,
                              "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                            },
                            {
                              "id": 77,
                              "name": "newOwner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 66,
                              "src": "1017:8:1",
                              "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              { "typeIdentifier": "t_address", "typeString": "address" },
                              { "typeIdentifier": "t_address", "typeString": "address" }
                            ],
                            "expression": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "expression": {
                                  "id": 70,
                                  "name": "ContractOwnershipStorage",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 307,
                                  "src": "951:24:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_ContractOwnershipStorage_$307_$",
                                    "typeString": "type(library ContractOwnershipStorage)"
                                  }
                                },
                                "id": 72,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "976:6:1",
                                "memberName": "layout",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 306,
                                "src": "951:31:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_Layout_$124_storage_ptr_$",
                                  "typeString": "function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"
                                }
                              },
                              "id": 73,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "951:33:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Layout_$124_storage_ptr",
                                "typeString": "struct ContractOwnershipStorage.Layout storage pointer"
                              }
                            },
                            "id": 74,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "985:17:1",
                            "memberName": "transferOwnership",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 263,
                            "src": "951:51:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Layout_$124_storage_ptr_$_t_address_$_t_address_$returns$__$bound_to$_t_struct$_Layout_$124_storage_ptr_$",
                              "typeString": "function (struct ContractOwnershipStorage.Layout storage pointer,address,address)"
                            }
                          },
                          "id": 78,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "951:75:1",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                        },
                        "id": 79,
                        "nodeType": "ExpressionStatement",
                        "src": "951:75:1"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 64,
                    "nodeType": "StructuredDocumentation",
                    "src": "844:23:1",
                    "text": "@inheritdoc IERC173"
                  },
                  "functionSelector": "f2fde38b",
                  "id": 81,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transferOwnership",
                  "nameLocation": "881:17:1",
                  "nodeType": "FunctionDefinition",
                  "overrides": { "id": 68, "nodeType": "OverrideSpecifier", "overrides": [], "src": "932:8:1" },
                  "parameters": {
                    "id": 67,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 66,
                        "mutability": "mutable",
                        "name": "newOwner",
                        "nameLocation": "907:8:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 81,
                        "src": "899:16:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 65,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "899:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "898:18:1"
                  },
                  "returnParameters": { "id": 69, "nodeType": "ParameterList", "parameters": [], "src": "941:0:1" },
                  "scope": 82,
                  "src": "872:161:1",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "public"
                }
              ],
              "scope": 83,
              "src": "542:493:1",
              "usedErrors": []
            }
          ],
          "src": "32:1004:1"
        },
        "id": 1
      },
      "@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol": {
        "ast": {
          "absolutePath": "@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol",
          "exportedSymbols": { "IERC173": [105] },
          "id": 106,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            { "id": 84, "literals": ["solidity", "^", "0.8", ".8"], "nodeType": "PragmaDirective", "src": "32:23:2" },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "IERC173",
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 85,
                "nodeType": "StructuredDocumentation",
                "src": "57:170:2",
                "text": "@title ERC-173 Contract Ownership Standard\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0"
              },
              "fullyImplemented": false,
              "id": 105,
              "linearizedBaseContracts": [105],
              "name": "IERC173",
              "nameLocation": "237:7:2",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 86,
                    "nodeType": "StructuredDocumentation",
                    "src": "251:162:2",
                    "text": "@notice Emitted when the contract ownership changes.\n @param previousOwner the previous contract owner.\n @param newOwner the new contract owner."
                  },
                  "eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
                  "id": 92,
                  "name": "OwnershipTransferred",
                  "nameLocation": "424:20:2",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 91,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 88,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "previousOwner",
                        "nameLocation": "461:13:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 92,
                        "src": "445:29:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 87,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "445:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 90,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "newOwner",
                        "nameLocation": "492:8:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 92,
                        "src": "476:24:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 89,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "476:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "444:57:2"
                  },
                  "src": "418:84:2"
                },
                {
                  "documentation": {
                    "id": 93,
                    "nodeType": "StructuredDocumentation",
                    "src": "508:342:2",
                    "text": "@notice Sets the address of the new contract owner.\n @dev Reverts if the sender is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."
                  },
                  "functionSelector": "f2fde38b",
                  "id": 98,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transferOwnership",
                  "nameLocation": "864:17:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 96,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 95,
                        "mutability": "mutable",
                        "name": "newOwner",
                        "nameLocation": "890:8:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 98,
                        "src": "882:16:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 94,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "882:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "881:18:2"
                  },
                  "returnParameters": { "id": 97, "nodeType": "ParameterList", "parameters": [], "src": "908:0:2" },
                  "scope": 105,
                  "src": "855:54:2",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 99,
                    "nodeType": "StructuredDocumentation",
                    "src": "915:116:2",
                    "text": "@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."
                  },
                  "functionSelector": "8da5cb5b",
                  "id": 104,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "owner",
                  "nameLocation": "1045:5:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": { "id": 100, "nodeType": "ParameterList", "parameters": [], "src": "1050:2:2" },
                  "returnParameters": {
                    "id": 103,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 102,
                        "mutability": "mutable",
                        "name": "contractOwner",
                        "nameLocation": "1084:13:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 104,
                        "src": "1076:21:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 101,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1076:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1075:23:2"
                  },
                  "scope": 105,
                  "src": "1036:63:2",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 106,
              "src": "227:874:2",
              "usedErrors": []
            }
          ],
          "src": "32:1070:2"
        },
        "id": 2
      },
      "@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol": {
        "ast": {
          "absolutePath": "@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol",
          "exportedSymbols": {
            "ContractOwnershipStorage": [307],
            "IERC173": [105],
            "InterfaceDetectionStorage": [449],
            "ProxyInitialization": [502]
          },
          "id": 308,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            { "id": 107, "literals": ["solidity", "^", "0.8", ".8"], "nodeType": "PragmaDirective", "src": "32:23:3" },
            {
              "absolutePath": "@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol",
              "file": "./../interfaces/IERC173.sol",
              "id": 109,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 308,
              "sourceUnit": 106,
              "src": "57:52:3",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 108,
                    "name": "IERC173",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 105,
                    "src": "65:7:3",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "absolutePath": "@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol",
              "file": "./../../proxy/libraries/ProxyInitialization.sol",
              "id": 111,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 308,
              "sourceUnit": 503,
              "src": "110:84:3",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 110,
                    "name": "ProxyInitialization",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 502,
                    "src": "118:19:3",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "absolutePath": "@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol",
              "file": "./../../introspection/libraries/InterfaceDetectionStorage.sol",
              "id": 113,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 308,
              "sourceUnit": 450,
              "src": "195:104:3",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 112,
                    "name": "InterfaceDetectionStorage",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 449,
                    "src": "203:25:3",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "ContractOwnershipStorage",
              "contractDependencies": [],
              "contractKind": "library",
              "fullyImplemented": true,
              "id": 307,
              "linearizedBaseContracts": [307],
              "name": "ContractOwnershipStorage",
              "nameLocation": "309:24:3",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "global": false,
                  "id": 117,
                  "libraryName": {
                    "id": 114,
                    "name": "ContractOwnershipStorage",
                    "nameLocations": ["346:24:3"],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 307,
                    "src": "346:24:3"
                  },
                  "nodeType": "UsingForDirective",
                  "src": "340:67:3",
                  "typeName": {
                    "id": 116,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 115,
                      "name": "ContractOwnershipStorage.Layout",
                      "nameLocations": ["375:24:3", "400:6:3"],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 124,
                      "src": "375:31:3"
                    },
                    "referencedDeclaration": 124,
                    "src": "375:31:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Layout_$124_storage_ptr",
                      "typeString": "struct ContractOwnershipStorage.Layout"
                    }
                  }
                },
                {
                  "global": false,
                  "id": 121,
                  "libraryName": {
                    "id": 118,
                    "name": "InterfaceDetectionStorage",
                    "nameLocations": ["418:25:3"],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 449,
                    "src": "418:25:3"
                  },
                  "nodeType": "UsingForDirective",
                  "src": "412:69:3",
                  "typeName": {
                    "id": 120,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 119,
                      "name": "InterfaceDetectionStorage.Layout",
                      "nameLocations": ["448:25:3", "474:6:3"],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 359,
                      "src": "448:32:3"
                    },
                    "referencedDeclaration": 359,
                    "src": "448:32:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Layout_$359_storage_ptr",
                      "typeString": "struct InterfaceDetectionStorage.Layout"
                    }
                  }
                },
                {
                  "canonicalName": "ContractOwnershipStorage.Layout",
                  "id": 124,
                  "members": [
                    {
                      "constant": false,
                      "id": 123,
                      "mutability": "mutable",
                      "name": "contractOwner",
                      "nameLocation": "519:13:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 124,
                      "src": "511:21:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                      "typeName": {
                        "id": 122,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "511:7:3",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "Layout",
                  "nameLocation": "494:6:3",
                  "nodeType": "StructDefinition",
                  "scope": 307,
                  "src": "487:52:3",
                  "visibility": "public"
                },
                {
                  "constant": true,
                  "id": 137,
                  "mutability": "constant",
                  "name": "LAYOUT_STORAGE_SLOT",
                  "nameLocation": "571:19:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 307,
                  "src": "545:128:3",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_bytes32", "typeString": "bytes32" },
                  "typeName": {
                    "id": 125,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "545:7:3",
                    "typeDescriptions": { "typeIdentifier": "t_bytes32", "typeString": "bytes32" }
                  },
                  "value": {
                    "arguments": [
                      {
                        "commonType": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                        "id": 135,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e73746f72616765",
                                  "id": 131,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "619:47:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd",
                                    "typeString": "literal_string \"animoca.core.access.ContractOwnership.storage\""
                                  },
                                  "value": "animoca.core.access.ContractOwnership.storage"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd",
                                    "typeString": "literal_string \"animoca.core.access.ContractOwnership.storage\""
                                  }
                                ],
                                "id": 130,
                                "name": "keccak256",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -8,
                                "src": "609:9:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                  "typeString": "function (bytes memory) pure returns (bytes32)"
                                }
                              },
                              "id": 132,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "609:58:3",
                              "tryCall": false,
                              "typeDescriptions": { "typeIdentifier": "t_bytes32", "typeString": "bytes32" }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [{ "typeIdentifier": "t_bytes32", "typeString": "bytes32" }],
                            "id": 129,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "601:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_uint256_$",
                              "typeString": "type(uint256)"
                            },
                            "typeName": {
                              "id": 128,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "601:7:3",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 133,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "601:67:3",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "-",
                        "rightExpression": {
                          "hexValue": "31",
                          "id": 134,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "671:1:3",
                          "typeDescriptions": { "typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1" },
                          "value": "1"
                        },
                        "src": "601:71:3",
                        "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [{ "typeIdentifier": "t_uint256", "typeString": "uint256" }],
                      "id": 127,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "593:7:3",
                      "typeDescriptions": { "typeIdentifier": "t_type$_t_bytes32_$", "typeString": "type(bytes32)" },
                      "typeName": {
                        "id": 126,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "593:7:3",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 136,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "593:80:3",
                    "tryCall": false,
                    "typeDescriptions": { "typeIdentifier": "t_bytes32", "typeString": "bytes32" }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": true,
                  "id": 150,
                  "mutability": "constant",
                  "name": "PROXY_INIT_PHASE_SLOT",
                  "nameLocation": "705:21:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 307,
                  "src": "679:128:3",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_bytes32", "typeString": "bytes32" },
                  "typeName": {
                    "id": 138,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "679:7:3",
                    "typeDescriptions": { "typeIdentifier": "t_bytes32", "typeString": "bytes32" }
                  },
                  "value": {
                    "arguments": [
                      {
                        "commonType": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                        "id": 148,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e7068617365",
                                  "id": 144,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "755:45:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84",
                                    "typeString": "literal_string \"animoca.core.access.ContractOwnership.phase\""
                                  },
                                  "value": "animoca.core.access.ContractOwnership.phase"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84",
                                    "typeString": "literal_string \"animoca.core.access.ContractOwnership.phase\""
                                  }
                                ],
                                "id": 143,
                                "name": "keccak256",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -8,
                                "src": "745:9:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                  "typeString": "function (bytes memory) pure returns (bytes32)"
                                }
                              },
                              "id": 145,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "745:56:3",
                              "tryCall": false,
                              "typeDescriptions": { "typeIdentifier": "t_bytes32", "typeString": "bytes32" }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [{ "typeIdentifier": "t_bytes32", "typeString": "bytes32" }],
                            "id": 142,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "737:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_uint256_$",
                              "typeString": "type(uint256)"
                            },
                            "typeName": {
                              "id": 141,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "737:7:3",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 146,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "737:65:3",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "-",
                        "rightExpression": {
                          "hexValue": "31",
                          "id": 147,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "805:1:3",
                          "typeDescriptions": { "typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1" },
                          "value": "1"
                        },
                        "src": "737:69:3",
                        "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [{ "typeIdentifier": "t_uint256", "typeString": "uint256" }],
                      "id": 140,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "729:7:3",
                      "typeDescriptions": { "typeIdentifier": "t_type$_t_bytes32_$", "typeString": "type(bytes32)" },
                      "typeName": {
                        "id": 139,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "729:7:3",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 149,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "729:78:3",
                    "tryCall": false,
                    "typeDescriptions": { "typeIdentifier": "t_bytes32", "typeString": "bytes32" }
                  },
                  "visibility": "internal"
                },
                {
                  "anonymous": false,
                  "eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
                  "id": 156,
                  "name": "OwnershipTransferred",
                  "nameLocation": "820:20:3",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 155,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 152,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "previousOwner",
                        "nameLocation": "857:13:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 156,
                        "src": "841:29:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 151,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "841:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 154,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "newOwner",
                        "nameLocation": "888:8:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 156,
                        "src": "872:24:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 153,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "872:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "840:57:3"
                  },
                  "src": "814:84:3"
                },
                {
                  "body": {
                    "id": 199,
                    "nodeType": "Block",
                    "src": "1406:267:3",
                    "statements": [
                      {
                        "condition": {
                          "commonType": { "typeIdentifier": "t_address", "typeString": "address" },
                          "id": 170,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 165,
                            "name": "initialOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 162,
                            "src": "1420:12:3",
                            "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 168,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1444:1:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [{ "typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0" }],
                              "id": 167,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "1436:7:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 166,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "1436:7:3",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 169,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1436:10:3",
                            "tryCall": false,
                            "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                          },
                          "src": "1420:26:3",
                          "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                        },
                        "id": 186,
                        "nodeType": "IfStatement",
                        "src": "1416:152:3",
                        "trueBody": {
                          "id": 185,
                          "nodeType": "Block",
                          "src": "1448:120:3",
                          "statements": [
                            {
                              "expression": {
                                "id": 175,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "expression": {
                                    "id": 171,
                                    "name": "s",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 160,
                                    "src": "1462:1:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Layout_$124_storage_ptr",
                                      "typeString": "struct ContractOwnershipStorage.Layout storage pointer"
                                    }
                                  },
                                  "id": 173,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "memberLocation": "1464:13:3",
                                  "memberName": "contractOwner",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 123,
                                  "src": "1462:15:3",
                                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "id": 174,
                                  "name": "initialOwner",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 162,
                                  "src": "1480:12:3",
                                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                                },
                                "src": "1462:30:3",
                                "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                              },
                              "id": 176,
                              "nodeType": "ExpressionStatement",
                              "src": "1462:30:3"
                            },
                            {
                              "eventCall": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "hexValue": "30",
                                        "id": 180,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "1540:1:3",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        { "typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0" }
                                      ],
                                      "id": 179,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "1532:7:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 178,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "1532:7:3",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 181,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "1532:10:3",
                                    "tryCall": false,
                                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                                  },
                                  {
                                    "id": 182,
                                    "name": "initialOwner",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 162,
                                    "src": "1544:12:3",
                                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    { "typeIdentifier": "t_address", "typeString": "address" },
                                    { "typeIdentifier": "t_address", "typeString": "address" }
                                  ],
                                  "id": 177,
                                  "name": "OwnershipTransferred",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 156,
                                  "src": "1511:20:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                                    "typeString": "function (address,address)"
                                  }
                                },
                                "id": 183,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1511:46:3",
                                "tryCall": false,
                                "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                              },
                              "id": 184,
                              "nodeType": "EmitStatement",
                              "src": "1506:51:3"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 193,
                                    "name": "IERC173",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 105,
                                    "src": "1639:7:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_contract$_IERC173_$105_$",
                                      "typeString": "type(contract IERC173)"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_type$_t_contract$_IERC173_$105_$",
                                      "typeString": "type(contract IERC173)"
                                    }
                                  ],
                                  "id": 192,
                                  "name": "type",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -27,
                                  "src": "1634:4:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                                    "typeString": "function () pure"
                                  }
                                },
                                "id": 194,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1634:13:3",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_meta_type_t_contract$_IERC173_$105",
                                  "typeString": "type(contract IERC173)"
                                }
                              },
                              "id": 195,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberLocation": "1648:11:3",
                              "memberName": "interfaceId",
                              "nodeType": "MemberAccess",
                              "src": "1634:25:3",
                              "typeDescriptions": { "typeIdentifier": "t_bytes4", "typeString": "bytes4" }
                            },
                            {
                              "hexValue": "74727565",
                              "id": 196,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "bool",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1661:4:3",
                              "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" },
                              "value": "true"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              { "typeIdentifier": "t_bytes4", "typeString": "bytes4" },
                              { "typeIdentifier": "t_bool", "typeString": "bool" }
                            ],
                            "expression": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "expression": {
                                  "id": 187,
                                  "name": "InterfaceDetectionStorage",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 449,
                                  "src": "1577:25:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_InterfaceDetectionStorage_$449_$",
                                    "typeString": "type(library InterfaceDetectionStorage)"
                                  }
                                },
                                "id": 189,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "1603:6:3",
                                "memberName": "layout",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 448,
                                "src": "1577:32:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_Layout_$359_storage_ptr_$",
                                  "typeString": "function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"
                                }
                              },
                              "id": 190,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1577:34:3",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Layout_$359_storage_ptr",
                                "typeString": "struct InterfaceDetectionStorage.Layout storage pointer"
                              }
                            },
                            "id": 191,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1612:21:3",
                            "memberName": "setSupportedInterface",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 402,
                            "src": "1577:56:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Layout_$359_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$bound_to$_t_struct$_Layout_$359_storage_ptr_$",
                              "typeString": "function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"
                            }
                          },
                          "id": 197,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1577:89:3",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                        },
                        "id": 198,
                        "nodeType": "ExpressionStatement",
                        "src": "1577:89:3"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 157,
                    "nodeType": "StructuredDocumentation",
                    "src": "904:423:3",
                    "text": "@notice Initializes the storage with an initial contract owner (immutable version).\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."
                  },
                  "id": 200,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "constructorInit",
                  "nameLocation": "1341:15:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 163,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 160,
                        "mutability": "mutable",
                        "name": "s",
                        "nameLocation": "1372:1:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 200,
                        "src": "1357:16:3",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Layout_$124_storage_ptr",
                          "typeString": "struct ContractOwnershipStorage.Layout"
                        },
                        "typeName": {
                          "id": 159,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 158,
                            "name": "Layout",
                            "nameLocations": ["1357:6:3"],
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 124,
                            "src": "1357:6:3"
                          },
                          "referencedDeclaration": 124,
                          "src": "1357:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Layout_$124_storage_ptr",
                            "typeString": "struct ContractOwnershipStorage.Layout"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 162,
                        "mutability": "mutable",
                        "name": "initialOwner",
                        "nameLocation": "1383:12:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 200,
                        "src": "1375:20:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 161,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1375:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1356:40:3"
                  },
                  "returnParameters": { "id": 164, "nodeType": "ParameterList", "parameters": [], "src": "1406:0:3" },
                  "scope": 307,
                  "src": "1332:341:3",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 222,
                    "nodeType": "Block",
                    "src": "2297:112:3",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 212,
                              "name": "PROXY_INIT_PHASE_SLOT",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 150,
                              "src": "2336:21:3",
                              "typeDescriptions": { "typeIdentifier": "t_bytes32", "typeString": "bytes32" }
                            },
                            {
                              "hexValue": "31",
                              "id": 213,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2359:1:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              },
                              "value": "1"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              { "typeIdentifier": "t_bytes32", "typeString": "bytes32" },
                              { "typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1" }
                            ],
                            "expression": {
                              "id": 209,
                              "name": "ProxyInitialization",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 502,
                              "src": "2307:19:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ProxyInitialization_$502_$",
                                "typeString": "type(library ProxyInitialization)"
                              }
                            },
                            "id": 211,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2327:8:3",
                            "memberName": "setPhase",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 501,
                            "src": "2307:28:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$__$",
                              "typeString": "function (bytes32,uint256)"
                            }
                          },
                          "id": 214,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2307:54:3",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                        },
                        "id": 215,
                        "nodeType": "ExpressionStatement",
                        "src": "2307:54:3"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 219,
                              "name": "initialOwner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 206,
                              "src": "2389:12:3",
                              "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [{ "typeIdentifier": "t_address", "typeString": "address" }],
                            "expression": {
                              "id": 216,
                              "name": "s",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 204,
                              "src": "2371:1:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Layout_$124_storage_ptr",
                                "typeString": "struct ContractOwnershipStorage.Layout storage pointer"
                              }
                            },
                            "id": 218,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2373:15:3",
                            "memberName": "constructorInit",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 200,
                            "src": "2371:17:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Layout_$124_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_Layout_$124_storage_ptr_$",
                              "typeString": "function (struct ContractOwnershipStorage.Layout storage pointer,address)"
                            }
                          },
                          "id": 220,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2371:31:3",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                        },
                        "id": 221,
                        "nodeType": "ExpressionStatement",
                        "src": "2371:31:3"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 201,
                    "nodeType": "StructuredDocumentation",
                    "src": "1679:545:3",
                    "text": "@notice Initializes the storage with an initial contract owner (proxied version).\n @notice Sets the proxy initialization phase to `1`.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the init function of a proxied contract.\n @dev Reverts if the proxy initialization phase is set to `1` or above.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."
                  },
                  "id": 223,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "proxyInit",
                  "nameLocation": "2238:9:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 207,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 204,
                        "mutability": "mutable",
                        "name": "s",
                        "nameLocation": "2263:1:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 223,
                        "src": "2248:16:3",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Layout_$124_storage_ptr",
                          "typeString": "struct ContractOwnershipStorage.Layout"
                        },
                        "typeName": {
                          "id": 203,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 202,
                            "name": "Layout",
                            "nameLocations": ["2248:6:3"],
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 124,
                            "src": "2248:6:3"
                          },
                          "referencedDeclaration": 124,
                          "src": "2248:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Layout_$124_storage_ptr",
                            "typeString": "struct ContractOwnershipStorage.Layout"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 206,
                        "mutability": "mutable",
                        "name": "initialOwner",
                        "nameLocation": "2274:12:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 223,
                        "src": "2266:20:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 205,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2266:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2247:40:3"
                  },
                  "returnParameters": { "id": 208, "nodeType": "ParameterList", "parameters": [], "src": "2297:0:3" },
                  "scope": 307,
                  "src": "2229:180:3",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 262,
                    "nodeType": "Block",
                    "src": "2848:281:3",
                    "statements": [
                      {
                        "assignments": [235],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 235,
                            "mutability": "mutable",
                            "name": "previousOwner",
                            "nameLocation": "2866:13:3",
                            "nodeType": "VariableDeclaration",
                            "scope": 262,
                            "src": "2858:21:3",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                            "typeName": {
                              "id": 234,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "2858:7:3",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 238,
                        "initialValue": {
                          "expression": {
                            "id": 236,
                            "name": "s",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 227,
                            "src": "2882:1:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Layout_$124_storage_ptr",
                              "typeString": "struct ContractOwnershipStorage.Layout storage pointer"
                            }
                          },
                          "id": 237,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "2884:13:3",
                          "memberName": "contractOwner",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 123,
                          "src": "2882:15:3",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2858:39:3"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": { "typeIdentifier": "t_address", "typeString": "address" },
                              "id": 242,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 240,
                                "name": "sender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 229,
                                "src": "2915:6:3",
                                "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "id": 241,
                                "name": "previousOwner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 235,
                                "src": "2925:13:3",
                                "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                              },
                              "src": "2915:23:3",
                              "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                            },
                            {
                              "hexValue": "4f776e6572736869703a206e6f7420746865206f776e6572",
                              "id": 243,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2940:26:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66",
                                "typeString": "literal_string \"Ownership: not the owner\""
                              },
                              "value": "Ownership: not the owner"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              { "typeIdentifier": "t_bool", "typeString": "bool" },
                              {
                                "typeIdentifier": "t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66",
                                "typeString": "literal_string \"Ownership: not the owner\""
                              }
                            ],
                            "id": 239,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [-18, -18],
                            "referencedDeclaration": -18,
                            "src": "2907:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 244,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2907:60:3",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                        },
                        "id": 245,
                        "nodeType": "ExpressionStatement",
                        "src": "2907:60:3"
                      },
                      {
                        "condition": {
                          "commonType": { "typeIdentifier": "t_address", "typeString": "address" },
                          "id": 248,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 246,
                            "name": "previousOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 235,
                            "src": "2981:13:3",
                            "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "id": 247,
                            "name": "newOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 231,
                            "src": "2998:8:3",
                            "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                          },
                          "src": "2981:25:3",
                          "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                        },
                        "id": 261,
                        "nodeType": "IfStatement",
                        "src": "2977:146:3",
                        "trueBody": {
                          "id": 260,
                          "nodeType": "Block",
                          "src": "3008:115:3",
                          "statements": [
                            {
                              "expression": {
                                "id": 253,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "expression": {
                                    "id": 249,
                                    "name": "s",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 227,
                                    "src": "3022:1:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Layout_$124_storage_ptr",
                                      "typeString": "struct ContractOwnershipStorage.Layout storage pointer"
                                    }
                                  },
                                  "id": 251,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "memberLocation": "3024:13:3",
                                  "memberName": "contractOwner",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 123,
                                  "src": "3022:15:3",
                                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "id": 252,
                                  "name": "newOwner",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 231,
                                  "src": "3040:8:3",
                                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                                },
                                "src": "3022:26:3",
                                "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                              },
                              "id": 254,
                              "nodeType": "ExpressionStatement",
                              "src": "3022:26:3"
                            },
                            {
                              "eventCall": {
                                "arguments": [
                                  {
                                    "id": 256,
                                    "name": "previousOwner",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 235,
                                    "src": "3088:13:3",
                                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                                  },
                                  {
                                    "id": 257,
                                    "name": "newOwner",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 231,
                                    "src": "3103:8:3",
                                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    { "typeIdentifier": "t_address", "typeString": "address" },
                                    { "typeIdentifier": "t_address", "typeString": "address" }
                                  ],
                                  "id": 255,
                                  "name": "OwnershipTransferred",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 156,
                                  "src": "3067:20:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                                    "typeString": "function (address,address)"
                                  }
                                },
                                "id": 258,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "3067:45:3",
                                "tryCall": false,
                                "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                              },
                              "id": 259,
                              "nodeType": "EmitStatement",
                              "src": "3062:50:3"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": {
                    "id": 224,
                    "nodeType": "StructuredDocumentation",
                    "src": "2415:340:3",
                    "text": "@notice Sets the address of the new contract owner.\n @dev Reverts if `sender` is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."
                  },
                  "id": 263,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transferOwnership",
                  "nameLocation": "2769:17:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 232,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 227,
                        "mutability": "mutable",
                        "name": "s",
                        "nameLocation": "2802:1:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 263,
                        "src": "2787:16:3",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Layout_$124_storage_ptr",
                          "typeString": "struct ContractOwnershipStorage.Layout"
                        },
                        "typeName": {
                          "id": 226,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 225,
                            "name": "Layout",
                            "nameLocations": ["2787:6:3"],
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 124,
                            "src": "2787:6:3"
                          },
                          "referencedDeclaration": 124,
                          "src": "2787:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Layout_$124_storage_ptr",
                            "typeString": "struct ContractOwnershipStorage.Layout"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 229,
                        "mutability": "mutable",
                        "name": "sender",
                        "nameLocation": "2813:6:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 263,
                        "src": "2805:14:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 228,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2805:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 231,
                        "mutability": "mutable",
                        "name": "newOwner",
                        "nameLocation": "2829:8:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 263,
                        "src": "2821:16:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 230,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2821:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2786:52:3"
                  },
                  "returnParameters": { "id": 233, "nodeType": "ParameterList", "parameters": [], "src": "2848:0:3" },
                  "scope": 307,
                  "src": "2760:369:3",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 275,
                    "nodeType": "Block",
                    "src": "3335:39:3",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "id": 272,
                            "name": "s",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 267,
                            "src": "3352:1:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Layout_$124_storage_ptr",
                              "typeString": "struct ContractOwnershipStorage.Layout storage pointer"
                            }
                          },
                          "id": 273,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "3354:13:3",
                          "memberName": "contractOwner",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 123,
                          "src": "3352:15:3",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "functionReturnParameters": 271,
                        "id": 274,
                        "nodeType": "Return",
                        "src": "3345:22:3"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 264,
                    "nodeType": "StructuredDocumentation",
                    "src": "3135:116:3",
                    "text": "@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."
                  },
                  "id": 276,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "owner",
                  "nameLocation": "3265:5:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 268,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 267,
                        "mutability": "mutable",
                        "name": "s",
                        "nameLocation": "3286:1:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 276,
                        "src": "3271:16:3",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Layout_$124_storage_ptr",
                          "typeString": "struct ContractOwnershipStorage.Layout"
                        },
                        "typeName": {
                          "id": 266,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 265,
                            "name": "Layout",
                            "nameLocations": ["3271:6:3"],
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 124,
                            "src": "3271:6:3"
                          },
                          "referencedDeclaration": 124,
                          "src": "3271:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Layout_$124_storage_ptr",
                            "typeString": "struct ContractOwnershipStorage.Layout"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3270:18:3"
                  },
                  "returnParameters": {
                    "id": 271,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 270,
                        "mutability": "mutable",
                        "name": "contractOwner",
                        "nameLocation": "3320:13:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 276,
                        "src": "3312:21:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 269,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3312:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3311:23:3"
                  },
                  "scope": 307,
                  "src": "3256:118:3",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 293,
                    "nodeType": "Block",
                    "src": "3621:80:3",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": { "typeIdentifier": "t_address", "typeString": "address" },
                              "id": 289,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 286,
                                "name": "account",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 282,
                                "src": "3639:7:3",
                                "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "expression": {
                                  "id": 287,
                                  "name": "s",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 280,
                                  "src": "3650:1:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Layout_$124_storage_ptr",
                                    "typeString": "struct ContractOwnershipStorage.Layout storage pointer"
                                  }
                                },
                                "id": 288,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "3652:13:3",
                                "memberName": "contractOwner",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 123,
                                "src": "3650:15:3",
                                "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                              },
                              "src": "3639:26:3",
                              "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                            },
                            {
                              "hexValue": "4f776e6572736869703a206e6f7420746865206f776e6572",
                              "id": 290,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3667:26:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66",
                                "typeString": "literal_string \"Ownership: not the owner\""
                              },
                              "value": "Ownership: not the owner"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              { "typeIdentifier": "t_bool", "typeString": "bool" },
                              {
                                "typeIdentifier": "t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66",
                                "typeString": "literal_string \"Ownership: not the owner\""
                              }
                            ],
                            "id": 285,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [-18, -18],
                            "referencedDeclaration": -18,
                            "src": "3631:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 291,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3631:63:3",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                        },
                        "id": 292,
                        "nodeType": "ExpressionStatement",
                        "src": "3631:63:3"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 277,
                    "nodeType": "StructuredDocumentation",
                    "src": "3380:155:3",
                    "text": "@notice Ensures that an account is the contract owner.\n @dev Reverts if `account` is not the contract owner.\n @param account The account."
                  },
                  "id": 294,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "enforceIsContractOwner",
                  "nameLocation": "3549:22:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 283,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 280,
                        "mutability": "mutable",
                        "name": "s",
                        "nameLocation": "3587:1:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 294,
                        "src": "3572:16:3",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Layout_$124_storage_ptr",
                          "typeString": "struct ContractOwnershipStorage.Layout"
                        },
                        "typeName": {
                          "id": 279,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 278,
                            "name": "Layout",
                            "nameLocations": ["3572:6:3"],
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 124,
                            "src": "3572:6:3"
                          },
                          "referencedDeclaration": 124,
                          "src": "3572:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Layout_$124_storage_ptr",
                            "typeString": "struct ContractOwnershipStorage.Layout"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 282,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "3598:7:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 294,
                        "src": "3590:15:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 281,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3590:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3571:35:3"
                  },
                  "returnParameters": { "id": 284, "nodeType": "ParameterList", "parameters": [], "src": "3621:0:3" },
                  "scope": 307,
                  "src": "3540:161:3",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 305,
                    "nodeType": "Block",
                    "src": "3766:115:3",
                    "statements": [
                      {
                        "assignments": [301],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 301,
                            "mutability": "mutable",
                            "name": "position",
                            "nameLocation": "3784:8:3",
                            "nodeType": "VariableDeclaration",
                            "scope": 305,
                            "src": "3776:16:3",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": { "typeIdentifier": "t_bytes32", "typeString": "bytes32" },
                            "typeName": {
                              "id": 300,
                              "name": "bytes32",
                              "nodeType": "ElementaryTypeName",
                              "src": "3776:7:3",
                              "typeDescriptions": { "typeIdentifier": "t_bytes32", "typeString": "bytes32" }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 303,
                        "initialValue": {
                          "id": 302,
                          "name": "LAYOUT_STORAGE_SLOT",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 137,
                          "src": "3795:19:3",
                          "typeDescriptions": { "typeIdentifier": "t_bytes32", "typeString": "bytes32" }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3776:38:3"
                      },
                      {
                        "AST": {
                          "nodeType": "YulBlock",
                          "src": "3833:42:3",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "3847:18:3",
                              "value": { "name": "position", "nodeType": "YulIdentifier", "src": "3857:8:3" },
                              "variableNames": [{ "name": "s.slot", "nodeType": "YulIdentifier", "src": "3847:6:3" }]
                            }
                          ]
                        },
                        "evmVersion": "london",
                        "externalReferences": [
                          { "declaration": 301, "isOffset": false, "isSlot": false, "src": "3857:8:3", "valueSize": 1 },
                          {
                            "declaration": 298,
                            "isOffset": false,
                            "isSlot": true,
                            "src": "3847:6:3",
                            "suffix": "slot",
                            "valueSize": 1
                          }
                        ],
                        "id": 304,
                        "nodeType": "InlineAssembly",
                        "src": "3824:51:3"
                      }
                    ]
                  },
                  "id": 306,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "layout",
                  "nameLocation": "3716:6:3",
                  "nodeType": "FunctionDefinition",
                  "parameters": { "id": 295, "nodeType": "ParameterList", "parameters": [], "src": "3722:2:3" },
                  "returnParameters": {
                    "id": 299,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 298,
                        "mutability": "mutable",
                        "name": "s",
                        "nameLocation": "3763:1:3",
                        "nodeType": "VariableDeclaration",
                        "scope": 306,
                        "src": "3748:16:3",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Layout_$124_storage_ptr",
                          "typeString": "struct ContractOwnershipStorage.Layout"
                        },
                        "typeName": {
                          "id": 297,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 296,
                            "name": "Layout",
                            "nameLocations": ["3748:6:3"],
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 124,
                            "src": "3748:6:3"
                          },
                          "referencedDeclaration": 124,
                          "src": "3748:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Layout_$124_storage_ptr",
                            "typeString": "struct ContractOwnershipStorage.Layout"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3747:18:3"
                  },
                  "scope": 307,
                  "src": "3707:174:3",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 308,
              "src": "301:3582:3",
              "usedErrors": []
            }
          ],
          "src": "32:3852:3"
        },
        "id": 3
      },
      "@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol": {
        "ast": {
          "absolutePath": "@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol",
          "exportedSymbols": { "IERC165": [350], "InterfaceDetection": [338], "InterfaceDetectionStorage": [449] },
          "id": 339,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            { "id": 309, "literals": ["solidity", "^", "0.8", ".8"], "nodeType": "PragmaDirective", "src": "32:23:4" },
            {
              "absolutePath": "@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol",
              "file": "./interfaces/IERC165.sol",
              "id": 311,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 339,
              "sourceUnit": 351,
              "src": "57:49:4",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 310,
                    "name": "IERC165",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 350,
                    "src": "65:7:4",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "absolutePath": "@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol",
              "file": "./libraries/InterfaceDetectionStorage.sol",
              "id": 313,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 339,
              "sourceUnit": 450,
              "src": "107:84:4",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 312,
                    "name": "InterfaceDetectionStorage",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 449,
                    "src": "115:25:4",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "abstract": true,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 315,
                    "name": "IERC165",
                    "nameLocations": ["424:7:4"],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 350,
                    "src": "424:7:4"
                  },
                  "id": 316,
                  "nodeType": "InheritanceSpecifier",
                  "src": "424:7:4"
                }
              ],
              "canonicalName": "InterfaceDetection",
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 314,
                "nodeType": "StructuredDocumentation",
                "src": "193:191:4",
                "text": "@title ERC165 Interface Detection Standard (immutable or proxiable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation."
              },
              "fullyImplemented": true,
              "id": 338,
              "linearizedBaseContracts": [338, 350],
              "name": "InterfaceDetection",
              "nameLocation": "402:18:4",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "global": false,
                  "id": 320,
                  "libraryName": {
                    "id": 317,
                    "name": "InterfaceDetectionStorage",
                    "nameLocations": ["444:25:4"],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 449,
                    "src": "444:25:4"
                  },
                  "nodeType": "UsingForDirective",
                  "src": "438:69:4",
                  "typeName": {
                    "id": 319,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 318,
                      "name": "InterfaceDetectionStorage.Layout",
                      "nameLocations": ["474:25:4", "500:6:4"],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 359,
                      "src": "474:32:4"
                    },
                    "referencedDeclaration": 359,
                    "src": "474:32:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Layout_$359_storage_ptr",
                      "typeString": "struct InterfaceDetectionStorage.Layout"
                    }
                  }
                },
                {
                  "baseFunctions": [349],
                  "body": {
                    "id": 336,
                    "nodeType": "Block",
                    "src": "626:89:4",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 333,
                              "name": "interfaceId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 323,
                              "src": "696:11:4",
                              "typeDescriptions": { "typeIdentifier": "t_bytes4", "typeString": "bytes4" }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [{ "typeIdentifier": "t_bytes4", "typeString": "bytes4" }],
                            "expression": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "expression": {
                                  "id": 329,
                                  "name": "InterfaceDetectionStorage",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 449,
                                  "src": "643:25:4",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_InterfaceDetectionStorage_$449_$",
                                    "typeString": "type(library InterfaceDetectionStorage)"
                                  }
                                },
                                "id": 330,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "669:6:4",
                                "memberName": "layout",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 448,
                                "src": "643:32:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_Layout_$359_storage_ptr_$",
                                  "typeString": "function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"
                                }
                              },
                              "id": 331,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "643:34:4",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Layout_$359_storage_ptr",
                                "typeString": "struct InterfaceDetectionStorage.Layout storage pointer"
                              }
                            },
                            "id": 332,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "678:17:4",
                            "memberName": "supportsInterface",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 436,
                            "src": "643:52:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_Layout_$359_storage_ptr_$_t_bytes4_$returns$_t_bool_$bound_to$_t_struct$_Layout_$359_storage_ptr_$",
                              "typeString": "function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4) view returns (bool)"
                            }
                          },
                          "id": 334,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "643:65:4",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                        },
                        "functionReturnParameters": 328,
                        "id": 335,
                        "nodeType": "Return",
                        "src": "636:72:4"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 321,
                    "nodeType": "StructuredDocumentation",
                    "src": "513:23:4",
                    "text": "@inheritdoc IERC165"
                  },
                  "functionSelector": "01ffc9a7",
                  "id": 337,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "supportsInterface",
                  "nameLocation": "550:17:4",
                  "nodeType": "FunctionDefinition",
                  "overrides": { "id": 325, "nodeType": "OverrideSpecifier", "overrides": [], "src": "602:8:4" },
                  "parameters": {
                    "id": 324,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 323,
                        "mutability": "mutable",
                        "name": "interfaceId",
                        "nameLocation": "575:11:4",
                        "nodeType": "VariableDeclaration",
                        "scope": 337,
                        "src": "568:18:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_bytes4", "typeString": "bytes4" },
                        "typeName": {
                          "id": 322,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "568:6:4",
                          "typeDescriptions": { "typeIdentifier": "t_bytes4", "typeString": "bytes4" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "567:20:4"
                  },
                  "returnParameters": {
                    "id": 328,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 327,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 337,
                        "src": "620:4:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" },
                        "typeName": {
                          "id": 326,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "620:4:4",
                          "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "619:6:4"
                  },
                  "scope": 338,
                  "src": "541:174:4",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 339,
              "src": "384:333:4",
              "usedErrors": []
            }
          ],
          "src": "32:686:4"
        },
        "id": 4
      },
      "@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol": {
        "ast": {
          "absolutePath": "@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol",
          "exportedSymbols": { "IERC165": [350] },
          "id": 351,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            { "id": 340, "literals": ["solidity", "^", "0.8", ".8"], "nodeType": "PragmaDirective", "src": "32:23:5" },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "IERC165",
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 341,
                "nodeType": "StructuredDocumentation",
                "src": "57:173:5",
                "text": "@title ERC165 Interface Detection Standard.\n @dev See https://eips.ethereum.org/EIPS/eip-165.\n @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7."
              },
              "fullyImplemented": false,
              "id": 350,
              "linearizedBaseContracts": [350],
              "name": "IERC165",
              "nameLocation": "240:7:5",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "documentation": {
                    "id": 342,
                    "nodeType": "StructuredDocumentation",
                    "src": "254:340:5",
                    "text": "@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId the interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."
                  },
                  "functionSelector": "01ffc9a7",
                  "id": 349,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "supportsInterface",
                  "nameLocation": "608:17:5",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 345,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 344,
                        "mutability": "mutable",
                        "name": "interfaceId",
                        "nameLocation": "633:11:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 349,
                        "src": "626:18:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_bytes4", "typeString": "bytes4" },
                        "typeName": {
                          "id": 343,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "626:6:5",
                          "typeDescriptions": { "typeIdentifier": "t_bytes4", "typeString": "bytes4" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "625:20:5"
                  },
                  "returnParameters": {
                    "id": 348,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 347,
                        "mutability": "mutable",
                        "name": "supported",
                        "nameLocation": "674:9:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 349,
                        "src": "669:14:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" },
                        "typeName": {
                          "id": 346,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "669:4:5",
                          "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "668:16:5"
                  },
                  "scope": 350,
                  "src": "599:86:5",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 351,
              "src": "230:457:5",
              "usedErrors": []
            }
          ],
          "src": "32:656:5"
        },
        "id": 5
      },
      "@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol": {
        "ast": {
          "absolutePath": "@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol",
          "exportedSymbols": { "IERC165": [350], "InterfaceDetectionStorage": [449] },
          "id": 450,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            { "id": 352, "literals": ["solidity", "^", "0.8", ".8"], "nodeType": "PragmaDirective", "src": "32:23:6" },
            {
              "absolutePath": "@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol",
              "file": "./../interfaces/IERC165.sol",
              "id": 354,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 450,
              "sourceUnit": 351,
              "src": "57:52:6",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 353,
                    "name": "IERC165",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 350,
                    "src": "65:7:6",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "InterfaceDetectionStorage",
              "contractDependencies": [],
              "contractKind": "library",
              "fullyImplemented": true,
              "id": 449,
              "linearizedBaseContracts": [449],
              "name": "InterfaceDetectionStorage",
              "nameLocation": "119:25:6",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "canonicalName": "InterfaceDetectionStorage.Layout",
                  "id": 359,
                  "members": [
                    {
                      "constant": false,
                      "id": 358,
                      "mutability": "mutable",
                      "name": "supportedInterfaces",
                      "nameLocation": "199:19:6",
                      "nodeType": "VariableDeclaration",
                      "scope": 359,
                      "src": "175:43:6",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes4_$_t_bool_$",
                        "typeString": "mapping(bytes4 => bool)"
                      },
                      "typeName": {
                        "id": 357,
                        "keyType": {
                          "id": 355,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "183:6:6",
                          "typeDescriptions": { "typeIdentifier": "t_bytes4", "typeString": "bytes4" }
                        },
                        "nodeType": "Mapping",
                        "src": "175:23:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes4_$_t_bool_$",
                          "typeString": "mapping(bytes4 => bool)"
                        },
                        "valueType": {
                          "id": 356,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "193:4:6",
                          "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "Layout",
                  "nameLocation": "158:6:6",
                  "nodeType": "StructDefinition",
                  "scope": 449,
                  "src": "151:74:6",
                  "visibility": "public"
                },
                {
                  "constant": true,
                  "id": 372,
                  "mutability": "constant",
                  "name": "LAYOUT_STORAGE_SLOT",
                  "nameLocation": "257:19:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 449,
                  "src": "231:136:6",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_bytes32", "typeString": "bytes32" },
                  "typeName": {
                    "id": 360,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "231:7:6",
                    "typeDescriptions": { "typeIdentifier": "t_bytes32", "typeString": "bytes32" }
                  },
                  "value": {
                    "arguments": [
                      {
                        "commonType": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                        "id": 370,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "616e696d6f63612e636f72652e696e74726f7370656374696f6e2e496e74657266616365446574656374696f6e2e73746f72616765",
                                  "id": 366,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "305:55:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e",
                                    "typeString": "literal_string \"animoca.core.introspection.InterfaceDetection.storage\""
                                  },
                                  "value": "animoca.core.introspection.InterfaceDetection.storage"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e",
                                    "typeString": "literal_string \"animoca.core.introspection.InterfaceDetection.storage\""
                                  }
                                ],
                                "id": 365,
                                "name": "keccak256",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -8,
                                "src": "295:9:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                  "typeString": "function (bytes memory) pure returns (bytes32)"
                                }
                              },
                              "id": 367,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "295:66:6",
                              "tryCall": false,
                              "typeDescriptions": { "typeIdentifier": "t_bytes32", "typeString": "bytes32" }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [{ "typeIdentifier": "t_bytes32", "typeString": "bytes32" }],
                            "id": 364,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "287:7:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_uint256_$",
                              "typeString": "type(uint256)"
                            },
                            "typeName": {
                              "id": 363,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "287:7:6",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 368,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "287:75:6",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "-",
                        "rightExpression": {
                          "hexValue": "31",
                          "id": 369,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "365:1:6",
                          "typeDescriptions": { "typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1" },
                          "value": "1"
                        },
                        "src": "287:79:6",
                        "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [{ "typeIdentifier": "t_uint256", "typeString": "uint256" }],
                      "id": 362,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "279:7:6",
                      "typeDescriptions": { "typeIdentifier": "t_type$_t_bytes32_$", "typeString": "type(bytes32)" },
                      "typeName": {
                        "id": 361,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "279:7:6",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 371,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "279:88:6",
                    "tryCall": false,
                    "typeDescriptions": { "typeIdentifier": "t_bytes32", "typeString": "bytes32" }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": true,
                  "id": 375,
                  "mutability": "constant",
                  "name": "ILLEGAL_INTERFACE_ID",
                  "nameLocation": "399:20:6",
                  "nodeType": "VariableDeclaration",
                  "scope": 449,
                  "src": "374:58:6",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_bytes4", "typeString": "bytes4" },
                  "typeName": {
                    "id": 373,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "374:6:6",
                    "typeDescriptions": { "typeIdentifier": "t_bytes4", "typeString": "bytes4" }
                  },
                  "value": {
                    "hexValue": "30786666666666666666",
                    "id": 374,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "422:10:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_4294967295_by_1",
                      "typeString": "int_const 4294967295"
                    },
                    "value": "0xffffffff"
                  },
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 401,
                    "nodeType": "Block",
                    "src": "764:152:6",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": { "typeIdentifier": "t_bytes4", "typeString": "bytes4" },
                              "id": 389,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 387,
                                "name": "interfaceId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 381,
                                "src": "782:11:6",
                                "typeDescriptions": { "typeIdentifier": "t_bytes4", "typeString": "bytes4" }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "id": 388,
                                "name": "ILLEGAL_INTERFACE_ID",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 375,
                                "src": "797:20:6",
                                "typeDescriptions": { "typeIdentifier": "t_bytes4", "typeString": "bytes4" }
                              },
                              "src": "782:35:6",
                              "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                            },
                            {
                              "hexValue": "496e74657266616365446574656374696f6e3a2077726f6e672076616c7565",
                              "id": 390,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "819:33:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300",
                                "typeString": "literal_string \"InterfaceDetection: wrong value\""
                              },
                              "value": "InterfaceDetection: wrong value"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              { "typeIdentifier": "t_bool", "typeString": "bool" },
                              {
                                "typeIdentifier": "t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300",
                                "typeString": "literal_string \"InterfaceDetection: wrong value\""
                              }
                            ],
                            "id": 386,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [-18, -18],
                            "referencedDeclaration": -18,
                            "src": "774:7:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 391,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "774:79:6",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                        },
                        "id": 392,
                        "nodeType": "ExpressionStatement",
                        "src": "774:79:6"
                      },
                      {
                        "expression": {
                          "id": 399,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "expression": {
                                "id": 393,
                                "name": "s",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 379,
                                "src": "863:1:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Layout_$359_storage_ptr",
                                  "typeString": "struct InterfaceDetectionStorage.Layout storage pointer"
                                }
                              },
                              "id": 396,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "865:19:6",
                              "memberName": "supportedInterfaces",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 358,
                              "src": "863:21:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes4_$_t_bool_$",
                                "typeString": "mapping(bytes4 => bool)"
                              }
                            },
                            "id": 397,
                            "indexExpression": {
                              "id": 395,
                              "name": "interfaceId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 381,
                              "src": "885:11:6",
                              "typeDescriptions": { "typeIdentifier": "t_bytes4", "typeString": "bytes4" }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "863:34:6",
                            "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 398,
                            "name": "supported",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 383,
                            "src": "900:9:6",
                            "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                          },
                          "src": "863:46:6",
                          "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                        },
                        "id": 400,
                        "nodeType": "ExpressionStatement",
                        "src": "863:46:6"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 376,
                    "nodeType": "StructuredDocumentation",
                    "src": "439:226:6",
                    "text": "@notice Sets or unsets an ERC165 interface.\n @dev Reverts if `interfaceId` is `0xffffffff`.\n @param interfaceId the interface identifier.\n @param supported True to set the interface, false to unset it."
                  },
                  "id": 402,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "setSupportedInterface",
                  "nameLocation": "679:21:6",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 384,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 379,
                        "mutability": "mutable",
                        "name": "s",
                        "nameLocation": "716:1:6",
                        "nodeType": "VariableDeclaration",
                        "scope": 402,
                        "src": "701:16:6",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Layout_$359_storage_ptr",
                          "typeString": "struct InterfaceDetectionStorage.Layout"
                        },
                        "typeName": {
                          "id": 378,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 377,
                            "name": "Layout",
                            "nameLocations": ["701:6:6"],
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 359,
                            "src": "701:6:6"
                          },
                          "referencedDeclaration": 359,
                          "src": "701:6:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Layout_$359_storage_ptr",
                            "typeString": "struct InterfaceDetectionStorage.Layout"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 381,
                        "mutability": "mutable",
                        "name": "interfaceId",
                        "nameLocation": "726:11:6",
                        "nodeType": "VariableDeclaration",
                        "scope": 402,
                        "src": "719:18:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_bytes4", "typeString": "bytes4" },
                        "typeName": {
                          "id": 380,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "719:6:6",
                          "typeDescriptions": { "typeIdentifier": "t_bytes4", "typeString": "bytes4" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 383,
                        "mutability": "mutable",
                        "name": "supported",
                        "nameLocation": "744:9:6",
                        "nodeType": "VariableDeclaration",
                        "scope": 402,
                        "src": "739:14:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" },
                        "typeName": {
                          "id": 382,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "739:4:6",
                          "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "700:54:6"
                  },
                  "returnParameters": { "id": 385, "nodeType": "ParameterList", "parameters": [], "src": "764:0:6" },
                  "scope": 449,
                  "src": "670:246:6",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 435,
                    "nodeType": "Block",
                    "src": "1371:236:6",
                    "statements": [
                      {
                        "condition": {
                          "commonType": { "typeIdentifier": "t_bytes4", "typeString": "bytes4" },
                          "id": 415,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 413,
                            "name": "interfaceId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 408,
                            "src": "1385:11:6",
                            "typeDescriptions": { "typeIdentifier": "t_bytes4", "typeString": "bytes4" }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "id": 414,
                            "name": "ILLEGAL_INTERFACE_ID",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 375,
                            "src": "1400:20:6",
                            "typeDescriptions": { "typeIdentifier": "t_bytes4", "typeString": "bytes4" }
                          },
                          "src": "1385:35:6",
                          "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                        },
                        "id": 419,
                        "nodeType": "IfStatement",
                        "src": "1381:78:6",
                        "trueBody": {
                          "id": 418,
                          "nodeType": "Block",
                          "src": "1422:37:6",
                          "statements": [
                            {
                              "expression": {
                                "hexValue": "66616c7365",
                                "id": 416,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "bool",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1443:5:6",
                                "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" },
                                "value": "false"
                              },
                              "functionReturnParameters": 412,
                              "id": 417,
                              "nodeType": "Return",
                              "src": "1436:12:6"
                            }
                          ]
                        }
                      },
                      {
                        "condition": {
                          "commonType": { "typeIdentifier": "t_bytes4", "typeString": "bytes4" },
                          "id": 425,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 420,
                            "name": "interfaceId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 408,
                            "src": "1472:11:6",
                            "typeDescriptions": { "typeIdentifier": "t_bytes4", "typeString": "bytes4" }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "expression": {
                              "arguments": [
                                {
                                  "id": 422,
                                  "name": "IERC165",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 350,
                                  "src": "1492:7:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_IERC165_$350_$",
                                    "typeString": "type(contract IERC165)"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_type$_t_contract$_IERC165_$350_$",
                                    "typeString": "type(contract IERC165)"
                                  }
                                ],
                                "id": 421,
                                "name": "type",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -27,
                                "src": "1487:4:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                                  "typeString": "function () pure"
                                }
                              },
                              "id": 423,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1487:13:6",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_meta_type_t_contract$_IERC165_$350",
                                "typeString": "type(contract IERC165)"
                              }
                            },
                            "id": 424,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberLocation": "1501:11:6",
                            "memberName": "interfaceId",
                            "nodeType": "MemberAccess",
                            "src": "1487:25:6",
                            "typeDescriptions": { "typeIdentifier": "t_bytes4", "typeString": "bytes4" }
                          },
                          "src": "1472:40:6",
                          "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                        },
                        "id": 429,
                        "nodeType": "IfStatement",
                        "src": "1468:82:6",
                        "trueBody": {
                          "id": 428,
                          "nodeType": "Block",
                          "src": "1514:36:6",
                          "statements": [
                            {
                              "expression": {
                                "hexValue": "74727565",
                                "id": 426,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "bool",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1535:4:6",
                                "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" },
                                "value": "true"
                              },
                              "functionReturnParameters": 412,
                              "id": 427,
                              "nodeType": "Return",
                              "src": "1528:11:6"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "baseExpression": {
                            "expression": {
                              "id": 430,
                              "name": "s",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 406,
                              "src": "1566:1:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Layout_$359_storage_ptr",
                                "typeString": "struct InterfaceDetectionStorage.Layout storage pointer"
                              }
                            },
                            "id": 431,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1568:19:6",
                            "memberName": "supportedInterfaces",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 358,
                            "src": "1566:21:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_bytes4_$_t_bool_$",
                              "typeString": "mapping(bytes4 => bool)"
                            }
                          },
                          "id": 433,
                          "indexExpression": {
                            "id": 432,
                            "name": "interfaceId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 408,
                            "src": "1588:11:6",
                            "typeDescriptions": { "typeIdentifier": "t_bytes4", "typeString": "bytes4" }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "1566:34:6",
                          "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                        },
                        "functionReturnParameters": 412,
                        "id": 434,
                        "nodeType": "Return",
                        "src": "1559:41:6"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 403,
                    "nodeType": "StructuredDocumentation",
                    "src": "922:340:6",
                    "text": "@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId The interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."
                  },
                  "id": 436,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "supportsInterface",
                  "nameLocation": "1276:17:6",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 409,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 406,
                        "mutability": "mutable",
                        "name": "s",
                        "nameLocation": "1309:1:6",
                        "nodeType": "VariableDeclaration",
                        "scope": 436,
                        "src": "1294:16:6",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Layout_$359_storage_ptr",
                          "typeString": "struct InterfaceDetectionStorage.Layout"
                        },
                        "typeName": {
                          "id": 405,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 404,
                            "name": "Layout",
                            "nameLocations": ["1294:6:6"],
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 359,
                            "src": "1294:6:6"
                          },
                          "referencedDeclaration": 359,
                          "src": "1294:6:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Layout_$359_storage_ptr",
                            "typeString": "struct InterfaceDetectionStorage.Layout"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 408,
                        "mutability": "mutable",
                        "name": "interfaceId",
                        "nameLocation": "1319:11:6",
                        "nodeType": "VariableDeclaration",
                        "scope": 436,
                        "src": "1312:18:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_bytes4", "typeString": "bytes4" },
                        "typeName": {
                          "id": 407,
                          "name": "bytes4",
                          "nodeType": "ElementaryTypeName",
                          "src": "1312:6:6",
                          "typeDescriptions": { "typeIdentifier": "t_bytes4", "typeString": "bytes4" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1293:38:6"
                  },
                  "returnParameters": {
                    "id": 412,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 411,
                        "mutability": "mutable",
                        "name": "supported",
                        "nameLocation": "1360:9:6",
                        "nodeType": "VariableDeclaration",
                        "scope": 436,
                        "src": "1355:14:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" },
                        "typeName": {
                          "id": 410,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "1355:4:6",
                          "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1354:16:6"
                  },
                  "scope": 449,
                  "src": "1267:340:6",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 447,
                    "nodeType": "Block",
                    "src": "1672:115:6",
                    "statements": [
                      {
                        "assignments": [443],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 443,
                            "mutability": "mutable",
                            "name": "position",
                            "nameLocation": "1690:8:6",
                            "nodeType": "VariableDeclaration",
                            "scope": 447,
                            "src": "1682:16:6",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": { "typeIdentifier": "t_bytes32", "typeString": "bytes32" },
                            "typeName": {
                              "id": 442,
                              "name": "bytes32",
                              "nodeType": "ElementaryTypeName",
                              "src": "1682:7:6",
                              "typeDescriptions": { "typeIdentifier": "t_bytes32", "typeString": "bytes32" }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 445,
                        "initialValue": {
                          "id": 444,
                          "name": "LAYOUT_STORAGE_SLOT",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 372,
                          "src": "1701:19:6",
                          "typeDescriptions": { "typeIdentifier": "t_bytes32", "typeString": "bytes32" }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1682:38:6"
                      },
                      {
                        "AST": {
                          "nodeType": "YulBlock",
                          "src": "1739:42:6",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "1753:18:6",
                              "value": { "name": "position", "nodeType": "YulIdentifier", "src": "1763:8:6" },
                              "variableNames": [{ "name": "s.slot", "nodeType": "YulIdentifier", "src": "1753:6:6" }]
                            }
                          ]
                        },
                        "evmVersion": "london",
                        "externalReferences": [
                          { "declaration": 443, "isOffset": false, "isSlot": false, "src": "1763:8:6", "valueSize": 1 },
                          {
                            "declaration": 440,
                            "isOffset": false,
                            "isSlot": true,
                            "src": "1753:6:6",
                            "suffix": "slot",
                            "valueSize": 1
                          }
                        ],
                        "id": 446,
                        "nodeType": "InlineAssembly",
                        "src": "1730:51:6"
                      }
                    ]
                  },
                  "id": 448,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "layout",
                  "nameLocation": "1622:6:6",
                  "nodeType": "FunctionDefinition",
                  "parameters": { "id": 437, "nodeType": "ParameterList", "parameters": [], "src": "1628:2:6" },
                  "returnParameters": {
                    "id": 441,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 440,
                        "mutability": "mutable",
                        "name": "s",
                        "nameLocation": "1669:1:6",
                        "nodeType": "VariableDeclaration",
                        "scope": 448,
                        "src": "1654:16:6",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Layout_$359_storage_ptr",
                          "typeString": "struct InterfaceDetectionStorage.Layout"
                        },
                        "typeName": {
                          "id": 439,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 438,
                            "name": "Layout",
                            "nameLocations": ["1654:6:6"],
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 359,
                            "src": "1654:6:6"
                          },
                          "referencedDeclaration": 359,
                          "src": "1654:6:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Layout_$359_storage_ptr",
                            "typeString": "struct InterfaceDetectionStorage.Layout"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1653:18:6"
                  },
                  "scope": 449,
                  "src": "1613:174:6",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 450,
              "src": "111:1678:6",
              "usedErrors": []
            }
          ],
          "src": "32:1758:6"
        },
        "id": 6
      },
      "@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol": {
        "ast": {
          "absolutePath": "@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol",
          "exportedSymbols": { "IForwarderRegistry": [463] },
          "id": 464,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            { "id": 451, "literals": ["solidity", "^", "0.8", ".8"], "nodeType": "PragmaDirective", "src": "32:23:7" },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "IForwarderRegistry",
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 452,
                "nodeType": "StructuredDocumentation",
                "src": "57:143:7",
                "text": "@title Universal Meta-Transactions Forwarder Registry.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"
              },
              "fullyImplemented": false,
              "id": 463,
              "linearizedBaseContracts": [463],
              "name": "IForwarderRegistry",
              "nameLocation": "210:18:7",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "documentation": {
                    "id": 453,
                    "nodeType": "StructuredDocumentation",
                    "src": "235:314:7",
                    "text": "@notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\n @param sender The sender account.\n @param forwarder The forwarder account.\n @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise."
                  },
                  "functionSelector": "8929a8ca",
                  "id": 462,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "isApprovedForwarder",
                  "nameLocation": "563:19:7",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 458,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 455,
                        "mutability": "mutable",
                        "name": "sender",
                        "nameLocation": "591:6:7",
                        "nodeType": "VariableDeclaration",
                        "scope": 462,
                        "src": "583:14:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 454,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "583:7:7",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 457,
                        "mutability": "mutable",
                        "name": "forwarder",
                        "nameLocation": "607:9:7",
                        "nodeType": "VariableDeclaration",
                        "scope": 462,
                        "src": "599:17:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 456,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "599:7:7",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "582:35:7"
                  },
                  "returnParameters": {
                    "id": 461,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 460,
                        "mutability": "mutable",
                        "name": "isApproved",
                        "nameLocation": "646:10:7",
                        "nodeType": "VariableDeclaration",
                        "scope": 462,
                        "src": "641:15:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" },
                        "typeName": {
                          "id": 459,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "641:4:7",
                          "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "640:17:7"
                  },
                  "scope": 463,
                  "src": "554:104:7",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 464,
              "src": "200:460:7",
              "usedErrors": []
            }
          ],
          "src": "32:629:7"
        },
        "id": 7
      },
      "@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol": {
        "ast": {
          "absolutePath": "@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol",
          "exportedSymbols": { "ProxyInitialization": [502], "StorageSlot": [1629] },
          "id": 503,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            { "id": 465, "literals": ["solidity", "^", "0.8", ".8"], "nodeType": "PragmaDirective", "src": "32:23:8" },
            {
              "absolutePath": "@openzeppelin/contracts/utils/StorageSlot.sol",
              "file": "@openzeppelin/contracts/utils/StorageSlot.sol",
              "id": 467,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 503,
              "sourceUnit": 1630,
              "src": "57:74:8",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 466,
                    "name": "StorageSlot",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1629,
                    "src": "65:11:8",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "ProxyInitialization",
              "contractDependencies": [],
              "contractKind": "library",
              "documentation": {
                "id": 468,
                "nodeType": "StructuredDocumentation",
                "src": "133:92:8",
                "text": "@notice Multiple calls protection for storage-modifying proxy initialization functions."
              },
              "fullyImplemented": true,
              "id": 502,
              "linearizedBaseContracts": [502],
              "name": "ProxyInitialization",
              "nameLocation": "233:19:8",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": {
                    "id": 500,
                    "nodeType": "Block",
                    "src": "600:216:8",
                    "statements": [
                      {
                        "assignments": [480],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 480,
                            "mutability": "mutable",
                            "name": "currentVersion",
                            "nameLocation": "642:14:8",
                            "nodeType": "VariableDeclaration",
                            "scope": 500,
                            "src": "610:46:8",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Uint256Slot_$1584_storage_ptr",
                              "typeString": "struct StorageSlot.Uint256Slot"
                            },
                            "typeName": {
                              "id": 479,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 478,
                                "name": "StorageSlot.Uint256Slot",
                                "nameLocations": ["610:11:8", "622:11:8"],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 1584,
                                "src": "610:23:8"
                              },
                              "referencedDeclaration": 1584,
                              "src": "610:23:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Uint256Slot_$1584_storage_ptr",
                                "typeString": "struct StorageSlot.Uint256Slot"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 485,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 483,
                              "name": "storageSlot",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 471,
                              "src": "686:11:8",
                              "typeDescriptions": { "typeIdentifier": "t_bytes32", "typeString": "bytes32" }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [{ "typeIdentifier": "t_bytes32", "typeString": "bytes32" }],
                            "expression": {
                              "id": 481,
                              "name": "StorageSlot",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1629,
                              "src": "659:11:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_StorageSlot_$1629_$",
                                "typeString": "type(library StorageSlot)"
                              }
                            },
                            "id": 482,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "671:14:8",
                            "memberName": "getUint256Slot",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1628,
                            "src": "659:26:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_struct$_Uint256Slot_$1584_storage_ptr_$",
                              "typeString": "function (bytes32) pure returns (struct StorageSlot.Uint256Slot storage pointer)"
                            }
                          },
                          "id": 484,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "659:39:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Uint256Slot_$1584_storage_ptr",
                            "typeString": "struct StorageSlot.Uint256Slot storage pointer"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "610:88:8"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                              "id": 490,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 487,
                                  "name": "currentVersion",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 480,
                                  "src": "716:14:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Uint256Slot_$1584_storage_ptr",
                                    "typeString": "struct StorageSlot.Uint256Slot storage pointer"
                                  }
                                },
                                "id": 488,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "731:5:8",
                                "memberName": "value",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1583,
                                "src": "716:20:8",
                                "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<",
                              "rightExpression": {
                                "id": 489,
                                "name": "phase",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 473,
                                "src": "739:5:8",
                                "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                              },
                              "src": "716:28:8",
                              "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                            },
                            {
                              "hexValue": "53746f726167653a2070686173652072656163686564",
                              "id": 491,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "746:24:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_ef8a00474db48c1563590c05781d34a97d92c92640007c22c7decc1b54f3c741",
                                "typeString": "literal_string \"Storage: phase reached\""
                              },
                              "value": "Storage: phase reached"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              { "typeIdentifier": "t_bool", "typeString": "bool" },
                              {
                                "typeIdentifier": "t_stringliteral_ef8a00474db48c1563590c05781d34a97d92c92640007c22c7decc1b54f3c741",
                                "typeString": "literal_string \"Storage: phase reached\""
                              }
                            ],
                            "id": 486,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [-18, -18],
                            "referencedDeclaration": -18,
                            "src": "708:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 492,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "708:63:8",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                        },
                        "id": 493,
                        "nodeType": "ExpressionStatement",
                        "src": "708:63:8"
                      },
                      {
                        "expression": {
                          "id": 498,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 494,
                              "name": "currentVersion",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 480,
                              "src": "781:14:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Uint256Slot_$1584_storage_ptr",
                                "typeString": "struct StorageSlot.Uint256Slot storage pointer"
                              }
                            },
                            "id": 496,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "796:5:8",
                            "memberName": "value",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1583,
                            "src": "781:20:8",
                            "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 497,
                            "name": "phase",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 473,
                            "src": "804:5:8",
                            "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                          },
                          "src": "781:28:8",
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "id": 499,
                        "nodeType": "ExpressionStatement",
                        "src": "781:28:8"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 469,
                    "nodeType": "StructuredDocumentation",
                    "src": "259:273:8",
                    "text": "@notice Sets the initialization phase during a storage-modifying proxy initialization function.\n @dev Reverts if `phase` has been reached already.\n @param storageSlot the storage slot where `phase` is stored.\n @param phase the initialization phase."
                  },
                  "id": 501,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "setPhase",
                  "nameLocation": "546:8:8",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 474,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 471,
                        "mutability": "mutable",
                        "name": "storageSlot",
                        "nameLocation": "563:11:8",
                        "nodeType": "VariableDeclaration",
                        "scope": 501,
                        "src": "555:19:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_bytes32", "typeString": "bytes32" },
                        "typeName": {
                          "id": 470,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "555:7:8",
                          "typeDescriptions": { "typeIdentifier": "t_bytes32", "typeString": "bytes32" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 473,
                        "mutability": "mutable",
                        "name": "phase",
                        "nameLocation": "584:5:8",
                        "nodeType": "VariableDeclaration",
                        "scope": 501,
                        "src": "576:13:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                        "typeName": {
                          "id": 472,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "576:7:8",
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "554:36:8"
                  },
                  "returnParameters": { "id": 475, "nodeType": "ParameterList", "parameters": [], "src": "600:0:8" },
                  "scope": 502,
                  "src": "537:279:8",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 503,
              "src": "225:593:8",
              "usedErrors": []
            }
          ],
          "src": "32:787:8"
        },
        "id": 8
      },
      "@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol": {
        "ast": {
          "absolutePath": "@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol",
          "exportedSymbols": { "ContractOwnership": [32], "TokenRecovery": [514], "TokenRecoveryBase": [733] },
          "id": 515,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            { "id": 504, "literals": ["solidity", "^", "0.8", ".8"], "nodeType": "PragmaDirective", "src": "32:23:9" },
            {
              "absolutePath": "@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol",
              "file": "./base/TokenRecoveryBase.sol",
              "id": 506,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 515,
              "sourceUnit": 734,
              "src": "57:63:9",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 505,
                    "name": "TokenRecoveryBase",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 733,
                    "src": "65:17:9",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "absolutePath": "@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol",
              "file": "./../access/ContractOwnership.sol",
              "id": 508,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 515,
              "sourceUnit": 33,
              "src": "121:68:9",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 507,
                    "name": "ContractOwnership",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 32,
                    "src": "129:17:9",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "abstract": true,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 510,
                    "name": "TokenRecoveryBase",
                    "nameLocations": ["439:17:9"],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 733,
                    "src": "439:17:9"
                  },
                  "id": 511,
                  "nodeType": "InheritanceSpecifier",
                  "src": "439:17:9"
                },
                {
                  "baseName": {
                    "id": 512,
                    "name": "ContractOwnership",
                    "nameLocations": ["458:17:9"],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 32,
                    "src": "458:17:9"
                  },
                  "id": 513,
                  "nodeType": "InheritanceSpecifier",
                  "src": "458:17:9"
                }
              ],
              "canonicalName": "TokenRecovery",
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 509,
                "nodeType": "StructuredDocumentation",
                "src": "191:213:9",
                "text": "@title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."
              },
              "fullyImplemented": false,
              "id": 514,
              "linearizedBaseContracts": [514, 32, 338, 350, 82, 105, 733, 1569],
              "name": "TokenRecovery",
              "nameLocation": "422:13:9",
              "nodeType": "ContractDefinition",
              "nodes": [],
              "scope": 515,
              "src": "404:76:9",
              "usedErrors": []
            }
          ],
          "src": "32:449:9"
        },
        "id": 9
      },
      "@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol": {
        "ast": {
          "absolutePath": "@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol",
          "exportedSymbols": {
            "Address": [1547],
            "Context": [1569],
            "ContractOwnershipStorage": [307],
            "IERC20": [900],
            "IERC721": [819],
            "SafeERC20": [1217],
            "TokenRecoveryBase": [733]
          },
          "id": 734,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            { "id": 516, "literals": ["solidity", "^", "0.8", ".8"], "nodeType": "PragmaDirective", "src": "32:23:10" },
            {
              "absolutePath": "@openzeppelin/contracts/interfaces/IERC20.sol",
              "file": "@openzeppelin/contracts/interfaces/IERC20.sol",
              "id": 518,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 734,
              "sourceUnit": 823,
              "src": "57:69:10",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 517,
                    "name": "IERC20",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 900,
                    "src": "65:6:10",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "absolutePath": "@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol",
              "file": "./../../token/ERC721/interfaces/IERC721.sol",
              "id": 520,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 734,
              "sourceUnit": 820,
              "src": "127:68:10",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 519,
                    "name": "IERC721",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 819,
                    "src": "135:7:10",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "absolutePath": "@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol",
              "file": "./../../access/libraries/ContractOwnershipStorage.sol",
              "id": 522,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 734,
              "sourceUnit": 308,
              "src": "196:95:10",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 521,
                    "name": "ContractOwnershipStorage",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 307,
                    "src": "204:24:10",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
              "file": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
              "id": 524,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 734,
              "sourceUnit": 1218,
              "src": "292:82:10",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 523,
                    "name": "SafeERC20",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1217,
                    "src": "300:9:10",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "absolutePath": "@openzeppelin/contracts/utils/Context.sol",
              "file": "@openzeppelin/contracts/utils/Context.sol",
              "id": 526,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 734,
              "sourceUnit": 1570,
              "src": "375:66:10",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 525,
                    "name": "Context",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1569,
                    "src": "383:7:10",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "absolutePath": "@openzeppelin/contracts/utils/Address.sol",
              "file": "@openzeppelin/contracts/utils/Address.sol",
              "id": 528,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 734,
              "sourceUnit": 1548,
              "src": "442:66:10",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 527,
                    "name": "Address",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1547,
                    "src": "450:7:10",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 530,
                    "name": "Context",
                    "nameLocations": ["812:7:10"],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 1569,
                    "src": "812:7:10"
                  },
                  "id": 531,
                  "nodeType": "InheritanceSpecifier",
                  "src": "812:7:10"
                }
              ],
              "canonicalName": "TokenRecoveryBase",
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 529,
                "nodeType": "StructuredDocumentation",
                "src": "510:272:10",
                "text": "@title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC173 (Contract Ownership standard)."
              },
              "fullyImplemented": true,
              "id": 733,
              "linearizedBaseContracts": [733, 1569],
              "name": "TokenRecoveryBase",
              "nameLocation": "791:17:10",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "global": false,
                  "id": 535,
                  "libraryName": {
                    "id": 532,
                    "name": "ContractOwnershipStorage",
                    "nameLocations": ["832:24:10"],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 307,
                    "src": "832:24:10"
                  },
                  "nodeType": "UsingForDirective",
                  "src": "826:67:10",
                  "typeName": {
                    "id": 534,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 533,
                      "name": "ContractOwnershipStorage.Layout",
                      "nameLocations": ["861:24:10", "886:6:10"],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 124,
                      "src": "861:31:10"
                    },
                    "referencedDeclaration": 124,
                    "src": "861:31:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Layout_$124_storage_ptr",
                      "typeString": "struct ContractOwnershipStorage.Layout"
                    }
                  }
                },
                {
                  "global": false,
                  "id": 539,
                  "libraryName": {
                    "id": 536,
                    "name": "SafeERC20",
                    "nameLocations": ["904:9:10"],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 1217,
                    "src": "904:9:10"
                  },
                  "nodeType": "UsingForDirective",
                  "src": "898:27:10",
                  "typeName": {
                    "id": 538,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 537,
                      "name": "IERC20",
                      "nameLocations": ["918:6:10"],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 900,
                      "src": "918:6:10"
                    },
                    "referencedDeclaration": 900,
                    "src": "918:6:10",
                    "typeDescriptions": { "typeIdentifier": "t_contract$_IERC20_$900", "typeString": "contract IERC20" }
                  }
                },
                {
                  "global": false,
                  "id": 542,
                  "libraryName": {
                    "id": 540,
                    "name": "Address",
                    "nameLocations": ["936:7:10"],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 1547,
                    "src": "936:7:10"
                  },
                  "nodeType": "UsingForDirective",
                  "src": "930:34:10",
                  "typeName": {
                    "id": 541,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "948:15:10",
                    "stateMutability": "payable",
                    "typeDescriptions": { "typeIdentifier": "t_address_payable", "typeString": "address payable" }
                  }
                },
                {
                  "body": {
                    "id": 595,
                    "nodeType": "Block",
                    "src": "1914:348:10",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 557,
                                "name": "_msgSender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1559,
                                "src": "1981:10:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                  "typeString": "function () view returns (address)"
                                }
                              },
                              "id": 558,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1981:12:10",
                              "tryCall": false,
                              "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [{ "typeIdentifier": "t_address", "typeString": "address" }],
                            "expression": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "expression": {
                                  "id": 552,
                                  "name": "ContractOwnershipStorage",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 307,
                                  "src": "1924:24:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_ContractOwnershipStorage_$307_$",
                                    "typeString": "type(library ContractOwnershipStorage)"
                                  }
                                },
                                "id": 554,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "1949:6:10",
                                "memberName": "layout",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 306,
                                "src": "1924:31:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_Layout_$124_storage_ptr_$",
                                  "typeString": "function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"
                                }
                              },
                              "id": 555,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1924:33:10",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Layout_$124_storage_ptr",
                                "typeString": "struct ContractOwnershipStorage.Layout storage pointer"
                              }
                            },
                            "id": 556,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1958:22:10",
                            "memberName": "enforceIsContractOwner",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 294,
                            "src": "1924:56:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_Layout_$124_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_Layout_$124_storage_ptr_$",
                              "typeString": "function (struct ContractOwnershipStorage.Layout storage pointer,address) view"
                            }
                          },
                          "id": 559,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1924:70:10",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                        },
                        "id": 560,
                        "nodeType": "ExpressionStatement",
                        "src": "1924:70:10"
                      },
                      {
                        "assignments": [562],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 562,
                            "mutability": "mutable",
                            "name": "length",
                            "nameLocation": "2012:6:10",
                            "nodeType": "VariableDeclaration",
                            "scope": 595,
                            "src": "2004:14:10",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                            "typeName": {
                              "id": 561,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "2004:7:10",
                              "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 565,
                        "initialValue": {
                          "expression": {
                            "id": 563,
                            "name": "accounts",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 546,
                            "src": "2021:8:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_payable_$dyn_calldata_ptr",
                              "typeString": "address payable[] calldata"
                            }
                          },
                          "id": 564,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "2030:6:10",
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "2021:15:10",
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2004:32:10"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                              "id": 570,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 567,
                                "name": "length",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 562,
                                "src": "2054:6:10",
                                "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "expression": {
                                  "id": 568,
                                  "name": "amounts",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 549,
                                  "src": "2064:7:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                                    "typeString": "uint256[] calldata"
                                  }
                                },
                                "id": 569,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "2072:6:10",
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "src": "2064:14:10",
                                "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                              },
                              "src": "2054:24:10",
                              "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                            },
                            {
                              "hexValue": "5265636f766572793a20696e636f6e73697374656e7420617272617973",
                              "id": 571,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2080:31:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_12227dcd596297e685bdc66ab01e81b5228df9a6bdd1fe7960df703f31587551",
                                "typeString": "literal_string \"Recovery: inconsistent arrays\""
                              },
                              "value": "Recovery: inconsistent arrays"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              { "typeIdentifier": "t_bool", "typeString": "bool" },
                              {
                                "typeIdentifier": "t_stringliteral_12227dcd596297e685bdc66ab01e81b5228df9a6bdd1fe7960df703f31587551",
                                "typeString": "literal_string \"Recovery: inconsistent arrays\""
                              }
                            ],
                            "id": 566,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [-18, -18],
                            "referencedDeclaration": -18,
                            "src": "2046:7:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 572,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2046:66:10",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                        },
                        "id": 573,
                        "nodeType": "ExpressionStatement",
                        "src": "2046:66:10"
                      },
                      {
                        "id": 594,
                        "nodeType": "UncheckedBlock",
                        "src": "2122:134:10",
                        "statements": [
                          {
                            "body": {
                              "id": 592,
                              "nodeType": "Block",
                              "src": "2180:66:10",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "baseExpression": {
                                          "id": 587,
                                          "name": "amounts",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 549,
                                          "src": "2220:7:10",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                                            "typeString": "uint256[] calldata"
                                          }
                                        },
                                        "id": 589,
                                        "indexExpression": {
                                          "id": 588,
                                          "name": "i",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 575,
                                          "src": "2228:1:10",
                                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                        },
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "2220:10:10",
                                        "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [{ "typeIdentifier": "t_uint256", "typeString": "uint256" }],
                                      "expression": {
                                        "baseExpression": {
                                          "id": 583,
                                          "name": "accounts",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 546,
                                          "src": "2198:8:10",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_array$_t_address_payable_$dyn_calldata_ptr",
                                            "typeString": "address payable[] calldata"
                                          }
                                        },
                                        "id": 585,
                                        "indexExpression": {
                                          "id": 584,
                                          "name": "i",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 575,
                                          "src": "2207:1:10",
                                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                        },
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "2198:11:10",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address_payable",
                                          "typeString": "address payable"
                                        }
                                      },
                                      "id": 586,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberLocation": "2210:9:10",
                                      "memberName": "sendValue",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 1269,
                                      "src": "2198:21:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_payable_$_t_uint256_$returns$__$bound_to$_t_address_payable_$",
                                        "typeString": "function (address payable,uint256)"
                                      }
                                    },
                                    "id": 590,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "2198:33:10",
                                    "tryCall": false,
                                    "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                                  },
                                  "id": 591,
                                  "nodeType": "ExpressionStatement",
                                  "src": "2198:33:10"
                                }
                              ]
                            },
                            "condition": {
                              "commonType": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                              "id": 579,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 577,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 575,
                                "src": "2162:1:10",
                                "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "id": 578,
                                "name": "length",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 562,
                                "src": "2167:6:10",
                                "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                              },
                              "src": "2162:11:10",
                              "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                            },
                            "id": 593,
                            "initializationExpression": {
                              "assignments": [575],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 575,
                                  "mutability": "mutable",
                                  "name": "i",
                                  "nameLocation": "2159:1:10",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 593,
                                  "src": "2151:9:10",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                                  "typeName": {
                                    "id": 574,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "2151:7:10",
                                    "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 576,
                              "nodeType": "VariableDeclarationStatement",
                              "src": "2151:9:10"
                            },
                            "loopExpression": {
                              "expression": {
                                "id": 581,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "UnaryOperation",
                                "operator": "++",
                                "prefix": true,
                                "src": "2175:3:10",
                                "subExpression": {
                                  "id": 580,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 575,
                                  "src": "2177:1:10",
                                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                },
                                "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                              },
                              "id": 582,
                              "nodeType": "ExpressionStatement",
                              "src": "2175:3:10"
                            },
                            "nodeType": "ForStatement",
                            "src": "2146:100:10"
                          }
                        ]
                      }
                    ]
                  },
                  "documentation": {
                    "id": 543,
                    "nodeType": "StructuredDocumentation",
                    "src": "970:837:10",
                    "text": "@notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\n @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\n  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\n @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\n  so that the extraction is limited to only amounts sent accidentally.\n @dev Reverts if the sender is not the contract owner.\n @dev Reverts if `accounts` and `amounts` do not have the same length.\n @dev Reverts if one of the ETH transfers fails for any reason.\n @param accounts the list of accounts to transfer the tokens to.\n @param amounts the list of token amounts to transfer."
                  },
                  "functionSelector": "f7ba94bd",
                  "id": 596,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "recoverETH",
                  "nameLocation": "1821:10:10",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 550,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 546,
                        "mutability": "mutable",
                        "name": "accounts",
                        "nameLocation": "1859:8:10",
                        "nodeType": "VariableDeclaration",
                        "scope": 596,
                        "src": "1832:35:10",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_payable_$dyn_calldata_ptr",
                          "typeString": "address payable[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 544,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "1832:15:10",
                            "stateMutability": "payable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "id": 545,
                          "nodeType": "ArrayTypeName",
                          "src": "1832:17:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_payable_$dyn_storage_ptr",
                            "typeString": "address payable[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 549,
                        "mutability": "mutable",
                        "name": "amounts",
                        "nameLocation": "1888:7:10",
                        "nodeType": "VariableDeclaration",
                        "scope": 596,
                        "src": "1869:26:10",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                          "typeString": "uint256[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 547,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "1869:7:10",
                            "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                          },
                          "id": 548,
                          "nodeType": "ArrayTypeName",
                          "src": "1869:9:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                            "typeString": "uint256[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1831:65:10"
                  },
                  "returnParameters": { "id": 551, "nodeType": "ParameterList", "parameters": [], "src": "1914:0:10" },
                  "scope": 733,
                  "src": "1812:450:10",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 661,
                    "nodeType": "Block",
                    "src": "3098:389:10",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 615,
                                "name": "_msgSender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1559,
                                "src": "3165:10:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                  "typeString": "function () view returns (address)"
                                }
                              },
                              "id": 616,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3165:12:10",
                              "tryCall": false,
                              "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [{ "typeIdentifier": "t_address", "typeString": "address" }],
                            "expression": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "expression": {
                                  "id": 610,
                                  "name": "ContractOwnershipStorage",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 307,
                                  "src": "3108:24:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_ContractOwnershipStorage_$307_$",
                                    "typeString": "type(library ContractOwnershipStorage)"
                                  }
                                },
                                "id": 612,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "3133:6:10",
                                "memberName": "layout",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 306,
                                "src": "3108:31:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_Layout_$124_storage_ptr_$",
                                  "typeString": "function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"
                                }
                              },
                              "id": 613,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3108:33:10",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Layout_$124_storage_ptr",
                                "typeString": "struct ContractOwnershipStorage.Layout storage pointer"
                              }
                            },
                            "id": 614,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "3142:22:10",
                            "memberName": "enforceIsContractOwner",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 294,
                            "src": "3108:56:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_Layout_$124_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_Layout_$124_storage_ptr_$",
                              "typeString": "function (struct ContractOwnershipStorage.Layout storage pointer,address) view"
                            }
                          },
                          "id": 617,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3108:70:10",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                        },
                        "id": 618,
                        "nodeType": "ExpressionStatement",
                        "src": "3108:70:10"
                      },
                      {
                        "assignments": [620],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 620,
                            "mutability": "mutable",
                            "name": "length",
                            "nameLocation": "3196:6:10",
                            "nodeType": "VariableDeclaration",
                            "scope": 661,
                            "src": "3188:14:10",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                            "typeName": {
                              "id": 619,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "3188:7:10",
                              "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 623,
                        "initialValue": {
                          "expression": {
                            "id": 621,
                            "name": "accounts",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 600,
                            "src": "3205:8:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                              "typeString": "address[] calldata"
                            }
                          },
                          "id": 622,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "3214:6:10",
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "3205:15:10",
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3188:32:10"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": { "typeIdentifier": "t_bool", "typeString": "bool" },
                              "id": 633,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                                "id": 628,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 625,
                                  "name": "length",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 620,
                                  "src": "3238:6:10",
                                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "expression": {
                                    "id": 626,
                                    "name": "tokens",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 604,
                                    "src": "3248:6:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_contract$_IERC20_$900_$dyn_calldata_ptr",
                                      "typeString": "contract IERC20[] calldata"
                                    }
                                  },
                                  "id": 627,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "3255:6:10",
                                  "memberName": "length",
                                  "nodeType": "MemberAccess",
                                  "src": "3248:13:10",
                                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                },
                                "src": "3238:23:10",
                                "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "&&",
                              "rightExpression": {
                                "commonType": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                                "id": 632,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 629,
                                  "name": "length",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 620,
                                  "src": "3265:6:10",
                                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "expression": {
                                    "id": 630,
                                    "name": "amounts",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 607,
                                    "src": "3275:7:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                                      "typeString": "uint256[] calldata"
                                    }
                                  },
                                  "id": 631,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "3283:6:10",
                                  "memberName": "length",
                                  "nodeType": "MemberAccess",
                                  "src": "3275:14:10",
                                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                },
                                "src": "3265:24:10",
                                "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                              },
                              "src": "3238:51:10",
                              "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                            },
                            {
                              "hexValue": "5265636f766572793a20696e636f6e73697374656e7420617272617973",
                              "id": 634,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3291:31:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_12227dcd596297e685bdc66ab01e81b5228df9a6bdd1fe7960df703f31587551",
                                "typeString": "literal_string \"Recovery: inconsistent arrays\""
                              },
                              "value": "Recovery: inconsistent arrays"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              { "typeIdentifier": "t_bool", "typeString": "bool" },
                              {
                                "typeIdentifier": "t_stringliteral_12227dcd596297e685bdc66ab01e81b5228df9a6bdd1fe7960df703f31587551",
                                "typeString": "literal_string \"Recovery: inconsistent arrays\""
                              }
                            ],
                            "id": 624,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [-18, -18],
                            "referencedDeclaration": -18,
                            "src": "3230:7:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 635,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3230:93:10",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                        },
                        "id": 636,
                        "nodeType": "ExpressionStatement",
                        "src": "3230:93:10"
                      },
                      {
                        "id": 660,
                        "nodeType": "UncheckedBlock",
                        "src": "3333:148:10",
                        "statements": [
                          {
                            "body": {
                              "id": 658,
                              "nodeType": "Block",
                              "src": "3391:80:10",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "baseExpression": {
                                          "id": 650,
                                          "name": "accounts",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 600,
                                          "src": "3432:8:10",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                                            "typeString": "address[] calldata"
                                          }
                                        },
                                        "id": 652,
                                        "indexExpression": {
                                          "id": 651,
                                          "name": "i",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 638,
                                          "src": "3441:1:10",
                                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                        },
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "3432:11:10",
                                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                                      },
                                      {
                                        "baseExpression": {
                                          "id": 653,
                                          "name": "amounts",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 607,
                                          "src": "3445:7:10",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                                            "typeString": "uint256[] calldata"
                                          }
                                        },
                                        "id": 655,
                                        "indexExpression": {
                                          "id": 654,
                                          "name": "i",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 638,
                                          "src": "3453:1:10",
                                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                        },
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "3445:10:10",
                                        "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        { "typeIdentifier": "t_address", "typeString": "address" },
                                        { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                      ],
                                      "expression": {
                                        "baseExpression": {
                                          "id": 646,
                                          "name": "tokens",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 604,
                                          "src": "3409:6:10",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_array$_t_contract$_IERC20_$900_$dyn_calldata_ptr",
                                            "typeString": "contract IERC20[] calldata"
                                          }
                                        },
                                        "id": 648,
                                        "indexExpression": {
                                          "id": 647,
                                          "name": "i",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 638,
                                          "src": "3416:1:10",
                                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                        },
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "3409:9:10",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_contract$_IERC20_$900",
                                          "typeString": "contract IERC20"
                                        }
                                      },
                                      "id": 649,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberLocation": "3419:12:10",
                                      "memberName": "safeTransfer",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 968,
                                      "src": "3409:22:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$900_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$900_$",
                                        "typeString": "function (contract IERC20,address,uint256)"
                                      }
                                    },
                                    "id": 656,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "3409:47:10",
                                    "tryCall": false,
                                    "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                                  },
                                  "id": 657,
                                  "nodeType": "ExpressionStatement",
                                  "src": "3409:47:10"
                                }
                              ]
                            },
                            "condition": {
                              "commonType": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                              "id": 642,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 640,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 638,
                                "src": "3373:1:10",
                                "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "id": 641,
                                "name": "length",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 620,
                                "src": "3378:6:10",
                                "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                              },
                              "src": "3373:11:10",
                              "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                            },
                            "id": 659,
                            "initializationExpression": {
                              "assignments": [638],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 638,
                                  "mutability": "mutable",
                                  "name": "i",
                                  "nameLocation": "3370:1:10",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 659,
                                  "src": "3362:9:10",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                                  "typeName": {
                                    "id": 637,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "3362:7:10",
                                    "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 639,
                              "nodeType": "VariableDeclarationStatement",
                              "src": "3362:9:10"
                            },
                            "loopExpression": {
                              "expression": {
                                "id": 644,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "UnaryOperation",
                                "operator": "++",
                                "prefix": true,
                                "src": "3386:3:10",
                                "subExpression": {
                                  "id": 643,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 638,
                                  "src": "3388:1:10",
                                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                },
                                "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                              },
                              "id": 645,
                              "nodeType": "ExpressionStatement",
                              "src": "3386:3:10"
                            },
                            "nodeType": "ForStatement",
                            "src": "3357:114:10"
                          }
                        ]
                      }
                    ]
                  },
                  "documentation": {
                    "id": 597,
                    "nodeType": "StructuredDocumentation",
                    "src": "2268:702:10",
                    "text": "@notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\n @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\n  so that the extraction is limited to only amounts sent accidentally.\n @dev Reverts if the sender is not the contract owner.\n @dev Reverts if `accounts`, `tokens` and `amounts` do not have the same length.\n @dev Reverts if one of the ERC20 transfers fails for any reason.\n @param accounts the list of accounts to transfer the tokens to.\n @param tokens the list of ERC20 token addresses.\n @param amounts the list of token amounts to transfer."
                  },
                  "functionSelector": "73c8a958",
                  "id": 662,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "recoverERC20s",
                  "nameLocation": "2984:13:10",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 608,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 600,
                        "mutability": "mutable",
                        "name": "accounts",
                        "nameLocation": "3017:8:10",
                        "nodeType": "VariableDeclaration",
                        "scope": 662,
                        "src": "2998:27:10",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                          "typeString": "address[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 598,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "2998:7:10",
                            "stateMutability": "nonpayable",
                            "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                          },
                          "id": 599,
                          "nodeType": "ArrayTypeName",
                          "src": "2998:9:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                            "typeString": "address[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 604,
                        "mutability": "mutable",
                        "name": "tokens",
                        "nameLocation": "3045:6:10",
                        "nodeType": "VariableDeclaration",
                        "scope": 662,
                        "src": "3027:24:10",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_contract$_IERC20_$900_$dyn_calldata_ptr",
                          "typeString": "contract IERC20[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 602,
                            "nodeType": "UserDefinedTypeName",
                            "pathNode": {
                              "id": 601,
                              "name": "IERC20",
                              "nameLocations": ["3027:6:10"],
                              "nodeType": "IdentifierPath",
                              "referencedDeclaration": 900,
                              "src": "3027:6:10"
                            },
                            "referencedDeclaration": 900,
                            "src": "3027:6:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$900",
                              "typeString": "contract IERC20"
                            }
                          },
                          "id": 603,
                          "nodeType": "ArrayTypeName",
                          "src": "3027:8:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_contract$_IERC20_$900_$dyn_storage_ptr",
                            "typeString": "contract IERC20[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 607,
                        "mutability": "mutable",
                        "name": "amounts",
                        "nameLocation": "3072:7:10",
                        "nodeType": "VariableDeclaration",
                        "scope": 662,
                        "src": "3053:26:10",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                          "typeString": "uint256[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 605,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "3053:7:10",
                            "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                          },
                          "id": 606,
                          "nodeType": "ArrayTypeName",
                          "src": "3053:9:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                            "typeString": "uint256[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2997:83:10"
                  },
                  "returnParameters": { "id": 609, "nodeType": "ParameterList", "parameters": [], "src": "3098:0:10" },
                  "scope": 733,
                  "src": "2975:512:10",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 731,
                    "nodeType": "Block",
                    "src": "4338:412:10",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 681,
                                "name": "_msgSender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1559,
                                "src": "4405:10:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                  "typeString": "function () view returns (address)"
                                }
                              },
                              "id": 682,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4405:12:10",
                              "tryCall": false,
                              "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [{ "typeIdentifier": "t_address", "typeString": "address" }],
                            "expression": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "expression": {
                                  "id": 676,
                                  "name": "ContractOwnershipStorage",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 307,
                                  "src": "4348:24:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_ContractOwnershipStorage_$307_$",
                                    "typeString": "type(library ContractOwnershipStorage)"
                                  }
                                },
                                "id": 678,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "4373:6:10",
                                "memberName": "layout",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 306,
                                "src": "4348:31:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_Layout_$124_storage_ptr_$",
                                  "typeString": "function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"
                                }
                              },
                              "id": 679,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4348:33:10",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Layout_$124_storage_ptr",
                                "typeString": "struct ContractOwnershipStorage.Layout storage pointer"
                              }
                            },
                            "id": 680,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "4382:22:10",
                            "memberName": "enforceIsContractOwner",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 294,
                            "src": "4348:56:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_Layout_$124_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_Layout_$124_storage_ptr_$",
                              "typeString": "function (struct ContractOwnershipStorage.Layout storage pointer,address) view"
                            }
                          },
                          "id": 683,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4348:70:10",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                        },
                        "id": 684,
                        "nodeType": "ExpressionStatement",
                        "src": "4348:70:10"
                      },
                      {
                        "assignments": [686],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 686,
                            "mutability": "mutable",
                            "name": "length",
                            "nameLocation": "4436:6:10",
                            "nodeType": "VariableDeclaration",
                            "scope": 731,
                            "src": "4428:14:10",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                            "typeName": {
                              "id": 685,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "4428:7:10",
                              "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 689,
                        "initialValue": {
                          "expression": {
                            "id": 687,
                            "name": "accounts",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 666,
                            "src": "4445:8:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                              "typeString": "address[] calldata"
                            }
                          },
                          "id": 688,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "4454:6:10",
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "4445:15:10",
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4428:32:10"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": { "typeIdentifier": "t_bool", "typeString": "bool" },
                              "id": 699,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                                "id": 694,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 691,
                                  "name": "length",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 686,
                                  "src": "4478:6:10",
                                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "expression": {
                                    "id": 692,
                                    "name": "contracts",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 670,
                                    "src": "4488:9:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_contract$_IERC721_$819_$dyn_calldata_ptr",
                                      "typeString": "contract IERC721[] calldata"
                                    }
                                  },
                                  "id": 693,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "4498:6:10",
                                  "memberName": "length",
                                  "nodeType": "MemberAccess",
                                  "src": "4488:16:10",
                                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                },
                                "src": "4478:26:10",
                                "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "&&",
                              "rightExpression": {
                                "commonType": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                                "id": 698,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 695,
                                  "name": "length",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 686,
                                  "src": "4508:6:10",
                                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "expression": {
                                    "id": 696,
                                    "name": "tokenIds",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 673,
                                    "src": "4518:8:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                                      "typeString": "uint256[] calldata"
                                    }
                                  },
                                  "id": 697,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "4527:6:10",
                                  "memberName": "length",
                                  "nodeType": "MemberAccess",
                                  "src": "4518:15:10",
                                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                },
                                "src": "4508:25:10",
                                "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                              },
                              "src": "4478:55:10",
                              "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                            },
                            {
                              "hexValue": "5265636f766572793a20696e636f6e73697374656e7420617272617973",
                              "id": 700,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4535:31:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_12227dcd596297e685bdc66ab01e81b5228df9a6bdd1fe7960df703f31587551",
                                "typeString": "literal_string \"Recovery: inconsistent arrays\""
                              },
                              "value": "Recovery: inconsistent arrays"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              { "typeIdentifier": "t_bool", "typeString": "bool" },
                              {
                                "typeIdentifier": "t_stringliteral_12227dcd596297e685bdc66ab01e81b5228df9a6bdd1fe7960df703f31587551",
                                "typeString": "literal_string \"Recovery: inconsistent arrays\""
                              }
                            ],
                            "id": 690,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [-18, -18],
                            "referencedDeclaration": -18,
                            "src": "4470:7:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 701,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4470:97:10",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                        },
                        "id": 702,
                        "nodeType": "ExpressionStatement",
                        "src": "4470:97:10"
                      },
                      {
                        "id": 730,
                        "nodeType": "UncheckedBlock",
                        "src": "4577:167:10",
                        "statements": [
                          {
                            "body": {
                              "id": 728,
                              "nodeType": "Block",
                              "src": "4635:99:10",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "id": 718,
                                            "name": "this",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": -28,
                                            "src": "4687:4:10",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_contract$_TokenRecoveryBase_$733",
                                              "typeString": "contract TokenRecoveryBase"
                                            }
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_contract$_TokenRecoveryBase_$733",
                                              "typeString": "contract TokenRecoveryBase"
                                            }
                                          ],
                                          "id": 717,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "lValueRequested": false,
                                          "nodeType": "ElementaryTypeNameExpression",
                                          "src": "4679:7:10",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_address_$",
                                            "typeString": "type(address)"
                                          },
                                          "typeName": {
                                            "id": 716,
                                            "name": "address",
                                            "nodeType": "ElementaryTypeName",
                                            "src": "4679:7:10",
                                            "typeDescriptions": {}
                                          }
                                        },
                                        "id": 719,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "typeConversion",
                                        "lValueRequested": false,
                                        "nameLocations": [],
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "4679:13:10",
                                        "tryCall": false,
                                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                                      },
                                      {
                                        "baseExpression": {
                                          "id": 720,
                                          "name": "accounts",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 666,
                                          "src": "4694:8:10",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                                            "typeString": "address[] calldata"
                                          }
                                        },
                                        "id": 722,
                                        "indexExpression": {
                                          "id": 721,
                                          "name": "i",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 704,
                                          "src": "4703:1:10",
                                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                        },
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "4694:11:10",
                                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                                      },
                                      {
                                        "baseExpression": {
                                          "id": 723,
                                          "name": "tokenIds",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 673,
                                          "src": "4707:8:10",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                                            "typeString": "uint256[] calldata"
                                          }
                                        },
                                        "id": 725,
                                        "indexExpression": {
                                          "id": 724,
                                          "name": "i",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 704,
                                          "src": "4716:1:10",
                                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                        },
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "4707:11:10",
                                        "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        { "typeIdentifier": "t_address", "typeString": "address" },
                                        { "typeIdentifier": "t_address", "typeString": "address" },
                                        { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                      ],
                                      "expression": {
                                        "baseExpression": {
                                          "id": 712,
                                          "name": "contracts",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 670,
                                          "src": "4653:9:10",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_array$_t_contract$_IERC721_$819_$dyn_calldata_ptr",
                                            "typeString": "contract IERC721[] calldata"
                                          }
                                        },
                                        "id": 714,
                                        "indexExpression": {
                                          "id": 713,
                                          "name": "i",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 704,
                                          "src": "4663:1:10",
                                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                        },
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "4653:12:10",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_contract$_IERC721_$819",
                                          "typeString": "contract IERC721"
                                        }
                                      },
                                      "id": 715,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberLocation": "4666:12:10",
                                      "memberName": "transferFrom",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 762,
                                      "src": "4653:25:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                                        "typeString": "function (address,address,uint256) external"
                                      }
                                    },
                                    "id": 726,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "4653:66:10",
                                    "tryCall": false,
                                    "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                                  },
                                  "id": 727,
                                  "nodeType": "ExpressionStatement",
                                  "src": "4653:66:10"
                                }
                              ]
                            },
                            "condition": {
                              "commonType": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                              "id": 708,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 706,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 704,
                                "src": "4617:1:10",
                                "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "id": 707,
                                "name": "length",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 686,
                                "src": "4622:6:10",
                                "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                              },
                              "src": "4617:11:10",
                              "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                            },
                            "id": 729,
                            "initializationExpression": {
                              "assignments": [704],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 704,
                                  "mutability": "mutable",
                                  "name": "i",
                                  "nameLocation": "4614:1:10",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 729,
                                  "src": "4606:9:10",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                                  "typeName": {
                                    "id": 703,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "4606:7:10",
                                    "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 705,
                              "nodeType": "VariableDeclarationStatement",
                              "src": "4606:9:10"
                            },
                            "loopExpression": {
                              "expression": {
                                "id": 710,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "UnaryOperation",
                                "operator": "++",
                                "prefix": true,
                                "src": "4630:3:10",
                                "subExpression": {
                                  "id": 709,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 704,
                                  "src": "4632:1:10",
                                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                },
                                "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                              },
                              "id": 711,
                              "nodeType": "ExpressionStatement",
                              "src": "4630:3:10"
                            },
                            "nodeType": "ForStatement",
                            "src": "4601:133:10"
                          }
                        ]
                      }
                    ]
                  },
                  "documentation": {
                    "id": 663,
                    "nodeType": "StructuredDocumentation",
                    "src": "3493:711:10",
                    "text": "@notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\n @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\n  so that the extraction is limited to only tokens sent accidentally.\n @dev Reverts if the sender is not the contract owner.\n @dev Reverts if `accounts`, `contracts` and `amounts` do not have the same length.\n @dev Reverts if one of the ERC721 transfers fails for any reason.\n @param accounts the list of accounts to transfer the tokens to.\n @param contracts the list of ERC721 contract addresses.\n @param tokenIds the list of token ids to transfer."
                  },
                  "functionSelector": "c3666c36",
                  "id": 732,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "recoverERC721s",
                  "nameLocation": "4218:14:10",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 674,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 666,
                        "mutability": "mutable",
                        "name": "accounts",
                        "nameLocation": "4252:8:10",
                        "nodeType": "VariableDeclaration",
                        "scope": 732,
                        "src": "4233:27:10",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                          "typeString": "address[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 664,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "4233:7:10",
                            "stateMutability": "nonpayable",
                            "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                          },
                          "id": 665,
                          "nodeType": "ArrayTypeName",
                          "src": "4233:9:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                            "typeString": "address[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 670,
                        "mutability": "mutable",
                        "name": "contracts",
                        "nameLocation": "4281:9:10",
                        "nodeType": "VariableDeclaration",
                        "scope": 732,
                        "src": "4262:28:10",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_contract$_IERC721_$819_$dyn_calldata_ptr",
                          "typeString": "contract IERC721[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 668,
                            "nodeType": "UserDefinedTypeName",
                            "pathNode": {
                              "id": 667,
                              "name": "IERC721",
                              "nameLocations": ["4262:7:10"],
                              "nodeType": "IdentifierPath",
                              "referencedDeclaration": 819,
                              "src": "4262:7:10"
                            },
                            "referencedDeclaration": 819,
                            "src": "4262:7:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC721_$819",
                              "typeString": "contract IERC721"
                            }
                          },
                          "id": 669,
                          "nodeType": "ArrayTypeName",
                          "src": "4262:9:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_contract$_IERC721_$819_$dyn_storage_ptr",
                            "typeString": "contract IERC721[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 673,
                        "mutability": "mutable",
                        "name": "tokenIds",
                        "nameLocation": "4311:8:10",
                        "nodeType": "VariableDeclaration",
                        "scope": 732,
                        "src": "4292:27:10",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
                          "typeString": "uint256[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 671,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "4292:7:10",
                            "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                          },
                          "id": 672,
                          "nodeType": "ArrayTypeName",
                          "src": "4292:9:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                            "typeString": "uint256[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4232:88:10"
                  },
                  "returnParameters": { "id": 675, "nodeType": "ParameterList", "parameters": [], "src": "4338:0:10" },
                  "scope": 733,
                  "src": "4209:541:10",
                  "stateMutability": "nonpayable",
                  "virtual": true,
                  "visibility": "external"
                }
              ],
              "scope": 734,
              "src": "782:3970:10",
              "usedErrors": []
            }
          ],
          "src": "32:4721:10"
        },
        "id": 10
      },
      "@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol": {
        "ast": {
          "absolutePath": "@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol",
          "exportedSymbols": { "IERC721": [819] },
          "id": 820,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            { "id": 735, "literals": ["solidity", "^", "0.8", ".8"], "nodeType": "PragmaDirective", "src": "32:23:11" },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "IERC721",
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 736,
                "nodeType": "StructuredDocumentation",
                "src": "57:296:11",
                "text": "@title ERC721 Non-Fungible Token Standard, basic interface (functions).\n @dev See https://eips.ethereum.org/EIPS/eip-721\n @dev This interface only contains the standard functions. See IERC721Events for the events.\n @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd."
              },
              "fullyImplemented": false,
              "id": 819,
              "linearizedBaseContracts": [819],
              "name": "IERC721",
              "nameLocation": "363:7:11",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "documentation": {
                    "id": 737,
                    "nodeType": "StructuredDocumentation",
                    "src": "377:684:11",
                    "text": "@notice Sets or unsets an approval to transfer a single token on behalf of its owner.\n @dev Note: There can only be one approved address per token at a given time.\n @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\n @dev Reverts if `tokenId` does not exist.\n @dev Reverts if `to` is the token owner.\n @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\n @dev Emits an {Approval} event.\n @param to The address to approve, or the zero address to remove any existing approval.\n @param tokenId The token identifier to give approval for."
                  },
                  "functionSelector": "095ea7b3",
                  "id": 744,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "approve",
                  "nameLocation": "1075:7:11",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 742,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 739,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "1091:2:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 744,
                        "src": "1083:10:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 738,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1083:7:11",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 741,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "1103:7:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 744,
                        "src": "1095:15:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                        "typeName": {
                          "id": 740,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1095:7:11",
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1082:29:11"
                  },
                  "returnParameters": { "id": 743, "nodeType": "ParameterList", "parameters": [], "src": "1120:0:11" },
                  "scope": 819,
                  "src": "1066:55:11",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 745,
                    "nodeType": "StructuredDocumentation",
                    "src": "1127:341:11",
                    "text": "@notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\n @dev Reverts if the sender is the same as `operator`.\n @dev Emits an {ApprovalForAll} event.\n @param operator The address to approve for all tokens.\n @param approved True to set an approval for all tokens, false to unset it."
                  },
                  "functionSelector": "a22cb465",
                  "id": 752,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "setApprovalForAll",
                  "nameLocation": "1482:17:11",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 750,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 747,
                        "mutability": "mutable",
                        "name": "operator",
                        "nameLocation": "1508:8:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 752,
                        "src": "1500:16:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 746,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1500:7:11",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 749,
                        "mutability": "mutable",
                        "name": "approved",
                        "nameLocation": "1523:8:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 752,
                        "src": "1518:13:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" },
                        "typeName": {
                          "id": 748,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "1518:4:11",
                          "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1499:33:11"
                  },
                  "returnParameters": { "id": 751, "nodeType": "ParameterList", "parameters": [], "src": "1541:0:11" },
                  "scope": 819,
                  "src": "1473:69:11",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 753,
                    "nodeType": "StructuredDocumentation",
                    "src": "1548:667:11",
                    "text": "@notice Unsafely transfers the ownership of a token to a recipient.\n @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` is not the owner of `tokenId`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n @dev Emits a {Transfer} event.\n @param from The current token owner.\n @param to The recipient of the token transfer. Self-transfers are possible.\n @param tokenId The identifier of the token to transfer."
                  },
                  "functionSelector": "23b872dd",
                  "id": 762,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transferFrom",
                  "nameLocation": "2229:12:11",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 760,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 755,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "2250:4:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 762,
                        "src": "2242:12:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 754,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2242:7:11",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 757,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "2264:2:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 762,
                        "src": "2256:10:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 756,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2256:7:11",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 759,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "2276:7:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 762,
                        "src": "2268:15:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                        "typeName": {
                          "id": 758,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2268:7:11",
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2241:43:11"
                  },
                  "returnParameters": { "id": 761, "nodeType": "ParameterList", "parameters": [], "src": "2293:0:11" },
                  "scope": 819,
                  "src": "2220:74:11",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 763,
                    "nodeType": "StructuredDocumentation",
                    "src": "2300:663:11",
                    "text": "@notice Safely transfers the ownership of a token to a recipient.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` is not the owner of `tokenId`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n @dev Emits a {Transfer} event.\n @param from The current token owner.\n @param to The recipient of the token transfer.\n @param tokenId The identifier of the token to transfer."
                  },
                  "functionSelector": "42842e0e",
                  "id": 772,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "safeTransferFrom",
                  "nameLocation": "2977:16:11",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 770,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 765,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "3002:4:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 772,
                        "src": "2994:12:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 764,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2994:7:11",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 767,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "3016:2:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 772,
                        "src": "3008:10:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 766,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3008:7:11",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 769,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "3028:7:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 772,
                        "src": "3020:15:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                        "typeName": {
                          "id": 768,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3020:7:11",
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2993:43:11"
                  },
                  "returnParameters": { "id": 771, "nodeType": "ParameterList", "parameters": [], "src": "3045:0:11" },
                  "scope": 819,
                  "src": "2968:78:11",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 773,
                    "nodeType": "StructuredDocumentation",
                    "src": "3052:735:11",
                    "text": "@notice Safely transfers the ownership of a token to a recipient.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` is not the owner of `tokenId`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n @dev Emits a {Transfer} event.\n @param from The current token owner.\n @param to The recipient of the token transfer.\n @param tokenId The identifier of the token to transfer.\n @param data Optional data to send along to a receiver contract."
                  },
                  "functionSelector": "b88d4fde",
                  "id": 784,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "safeTransferFrom",
                  "nameLocation": "3801:16:11",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 782,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 775,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "3826:4:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 784,
                        "src": "3818:12:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 774,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3818:7:11",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 777,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "3840:2:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 784,
                        "src": "3832:10:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 776,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3832:7:11",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 779,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "3852:7:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 784,
                        "src": "3844:15:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                        "typeName": {
                          "id": 778,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3844:7:11",
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 781,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "3876:4:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 784,
                        "src": "3861:19:11",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": { "typeIdentifier": "t_bytes_calldata_ptr", "typeString": "bytes" },
                        "typeName": {
                          "id": 780,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "3861:5:11",
                          "typeDescriptions": { "typeIdentifier": "t_bytes_storage_ptr", "typeString": "bytes" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3817:64:11"
                  },
                  "returnParameters": { "id": 783, "nodeType": "ParameterList", "parameters": [], "src": "3890:0:11" },
                  "scope": 819,
                  "src": "3792:99:11",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 785,
                    "nodeType": "StructuredDocumentation",
                    "src": "3897:209:11",
                    "text": "@notice Gets the balance of an address.\n @dev Reverts if `owner` is the zero address.\n @param owner The address to query the balance of.\n @return balance The amount owned by the owner."
                  },
                  "functionSelector": "70a08231",
                  "id": 792,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "balanceOf",
                  "nameLocation": "4120:9:11",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 788,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 787,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "4138:5:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 792,
                        "src": "4130:13:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 786,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4130:7:11",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4129:15:11"
                  },
                  "returnParameters": {
                    "id": 791,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 790,
                        "mutability": "mutable",
                        "name": "balance",
                        "nameLocation": "4176:7:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 792,
                        "src": "4168:15:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                        "typeName": {
                          "id": 789,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4168:7:11",
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4167:17:11"
                  },
                  "scope": 819,
                  "src": "4111:74:11",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 793,
                    "nodeType": "StructuredDocumentation",
                    "src": "4191:217:11",
                    "text": "@notice Gets the owner of a token.\n @dev Reverts if `tokenId` does not exist.\n @param tokenId The token identifier to query the owner of.\n @return tokenOwner The owner of the token identifier."
                  },
                  "functionSelector": "6352211e",
                  "id": 800,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "ownerOf",
                  "nameLocation": "4422:7:11",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 796,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 795,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "4438:7:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 800,
                        "src": "4430:15:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                        "typeName": {
                          "id": 794,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4430:7:11",
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4429:17:11"
                  },
                  "returnParameters": {
                    "id": 799,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 798,
                        "mutability": "mutable",
                        "name": "tokenOwner",
                        "nameLocation": "4478:10:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 800,
                        "src": "4470:18:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 797,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4470:7:11",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4469:20:11"
                  },
                  "scope": 819,
                  "src": "4413:77:11",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 801,
                    "nodeType": "StructuredDocumentation",
                    "src": "4496:285:11",
                    "text": "@notice Gets the approved address for a token.\n @dev Reverts if `tokenId` does not exist.\n @param tokenId The token identifier to query the approval of.\n @return approved The approved address for the token identifier, or the zero address if no approval is set."
                  },
                  "functionSelector": "081812fc",
                  "id": 808,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getApproved",
                  "nameLocation": "4795:11:11",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 804,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 803,
                        "mutability": "mutable",
                        "name": "tokenId",
                        "nameLocation": "4815:7:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 808,
                        "src": "4807:15:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                        "typeName": {
                          "id": 802,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4807:7:11",
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4806:17:11"
                  },
                  "returnParameters": {
                    "id": 807,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 806,
                        "mutability": "mutable",
                        "name": "approved",
                        "nameLocation": "4855:8:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 808,
                        "src": "4847:16:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 805,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4847:7:11",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4846:18:11"
                  },
                  "scope": 819,
                  "src": "4786:79:11",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 809,
                    "nodeType": "StructuredDocumentation",
                    "src": "4871:323:11",
                    "text": "@notice Gets whether an operator is approved for all tokens by an owner.\n @param owner The address which gives the approval for all tokens.\n @param operator The address which receives the approval for all tokens.\n @return approvedForAll Whether the operator is approved for all tokens by the owner."
                  },
                  "functionSelector": "e985e9c5",
                  "id": 818,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "isApprovedForAll",
                  "nameLocation": "5208:16:11",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 814,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 811,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "5233:5:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 818,
                        "src": "5225:13:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 810,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5225:7:11",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 813,
                        "mutability": "mutable",
                        "name": "operator",
                        "nameLocation": "5248:8:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 818,
                        "src": "5240:16:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 812,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5240:7:11",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5224:33:11"
                  },
                  "returnParameters": {
                    "id": 817,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 816,
                        "mutability": "mutable",
                        "name": "approvedForAll",
                        "nameLocation": "5286:14:11",
                        "nodeType": "VariableDeclaration",
                        "scope": 818,
                        "src": "5281:19:11",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" },
                        "typeName": {
                          "id": 815,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "5281:4:11",
                          "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5280:21:11"
                  },
                  "scope": 819,
                  "src": "5199:103:11",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 820,
              "src": "353:4951:11",
              "usedErrors": []
            }
          ],
          "src": "32:5273:11"
        },
        "id": 11
      },
      "@openzeppelin/contracts/interfaces/IERC20.sol": {
        "ast": {
          "absolutePath": "@openzeppelin/contracts/interfaces/IERC20.sol",
          "exportedSymbols": { "IERC20": [900] },
          "id": 823,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            { "id": 821, "literals": ["solidity", "^", "0.8", ".0"], "nodeType": "PragmaDirective", "src": "90:23:12" },
            {
              "absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
              "file": "../token/ERC20/IERC20.sol",
              "id": 822,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 823,
              "sourceUnit": 901,
              "src": "115:35:12",
              "symbolAliases": [],
              "unitAlias": ""
            }
          ],
          "src": "90:61:12"
        },
        "id": 12
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
        "ast": {
          "absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
          "exportedSymbols": { "IERC20": [900] },
          "id": 901,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 824,
              "literals": ["solidity", "^", "0.8", ".0"],
              "nodeType": "PragmaDirective",
              "src": "106:23:13"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "IERC20",
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 825,
                "nodeType": "StructuredDocumentation",
                "src": "131:70:13",
                "text": " @dev Interface of the ERC20 standard as defined in the EIP."
              },
              "fullyImplemented": false,
              "id": 900,
              "linearizedBaseContracts": [900],
              "name": "IERC20",
              "nameLocation": "212:6:13",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 826,
                    "nodeType": "StructuredDocumentation",
                    "src": "225:158:13",
                    "text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
                  },
                  "eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
                  "id": 834,
                  "name": "Transfer",
                  "nameLocation": "394:8:13",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 833,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 828,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "419:4:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 834,
                        "src": "403:20:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 827,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "403:7:13",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 830,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "441:2:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 834,
                        "src": "425:18:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 829,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "425:7:13",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 832,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "453:5:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 834,
                        "src": "445:13:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                        "typeName": {
                          "id": 831,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "445:7:13",
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "402:57:13"
                  },
                  "src": "388:72:13"
                },
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 835,
                    "nodeType": "StructuredDocumentation",
                    "src": "466:148:13",
                    "text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
                  },
                  "eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
                  "id": 843,
                  "name": "Approval",
                  "nameLocation": "625:8:13",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 842,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 837,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "650:5:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 843,
                        "src": "634:21:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 836,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "634:7:13",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 839,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "673:7:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 843,
                        "src": "657:23:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 838,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "657:7:13",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 841,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "690:5:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 843,
                        "src": "682:13:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                        "typeName": {
                          "id": 840,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "682:7:13",
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "633:63:13"
                  },
                  "src": "619:78:13"
                },
                {
                  "documentation": {
                    "id": 844,
                    "nodeType": "StructuredDocumentation",
                    "src": "703:66:13",
                    "text": " @dev Returns the amount of tokens in existence."
                  },
                  "functionSelector": "18160ddd",
                  "id": 849,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "totalSupply",
                  "nameLocation": "783:11:13",
                  "nodeType": "FunctionDefinition",
                  "parameters": { "id": 845, "nodeType": "ParameterList", "parameters": [], "src": "794:2:13" },
                  "returnParameters": {
                    "id": 848,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 847,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 849,
                        "src": "820:7:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                        "typeName": {
                          "id": 846,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "820:7:13",
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "819:9:13"
                  },
                  "scope": 900,
                  "src": "774:55:13",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 850,
                    "nodeType": "StructuredDocumentation",
                    "src": "835:72:13",
                    "text": " @dev Returns the amount of tokens owned by `account`."
                  },
                  "functionSelector": "70a08231",
                  "id": 857,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "balanceOf",
                  "nameLocation": "921:9:13",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 853,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 852,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "939:7:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 857,
                        "src": "931:15:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 851,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "931:7:13",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "930:17:13"
                  },
                  "returnParameters": {
                    "id": 856,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 855,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 857,
                        "src": "971:7:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                        "typeName": {
                          "id": 854,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "971:7:13",
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "970:9:13"
                  },
                  "scope": 900,
                  "src": "912:68:13",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 858,
                    "nodeType": "StructuredDocumentation",
                    "src": "986:202:13",
                    "text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
                  },
                  "functionSelector": "a9059cbb",
                  "id": 867,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transfer",
                  "nameLocation": "1202:8:13",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 863,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 860,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "1219:2:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 867,
                        "src": "1211:10:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 859,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1211:7:13",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 862,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "1231:6:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 867,
                        "src": "1223:14:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                        "typeName": {
                          "id": 861,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1223:7:13",
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1210:28:13"
                  },
                  "returnParameters": {
                    "id": 866,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 865,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 867,
                        "src": "1257:4:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" },
                        "typeName": {
                          "id": 864,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "1257:4:13",
                          "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1256:6:13"
                  },
                  "scope": 900,
                  "src": "1193:70:13",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 868,
                    "nodeType": "StructuredDocumentation",
                    "src": "1269:264:13",
                    "text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
                  },
                  "functionSelector": "dd62ed3e",
                  "id": 877,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "allowance",
                  "nameLocation": "1547:9:13",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 873,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 870,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "1565:5:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 877,
                        "src": "1557:13:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 869,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1557:7:13",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 872,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "1580:7:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 877,
                        "src": "1572:15:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 871,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1572:7:13",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1556:32:13"
                  },
                  "returnParameters": {
                    "id": 876,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 875,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 877,
                        "src": "1612:7:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                        "typeName": {
                          "id": 874,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1612:7:13",
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1611:9:13"
                  },
                  "scope": 900,
                  "src": "1538:83:13",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 878,
                    "nodeType": "StructuredDocumentation",
                    "src": "1627:642:13",
                    "text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
                  },
                  "functionSelector": "095ea7b3",
                  "id": 887,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "approve",
                  "nameLocation": "2283:7:13",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 883,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 880,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "2299:7:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 887,
                        "src": "2291:15:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 879,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2291:7:13",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 882,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "2316:6:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 887,
                        "src": "2308:14:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                        "typeName": {
                          "id": 881,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2308:7:13",
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2290:33:13"
                  },
                  "returnParameters": {
                    "id": 886,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 885,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 887,
                        "src": "2342:4:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" },
                        "typeName": {
                          "id": 884,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "2342:4:13",
                          "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2341:6:13"
                  },
                  "scope": 900,
                  "src": "2274:74:13",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 888,
                    "nodeType": "StructuredDocumentation",
                    "src": "2354:287:13",
                    "text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
                  },
                  "functionSelector": "23b872dd",
                  "id": 899,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transferFrom",
                  "nameLocation": "2655:12:13",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 895,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 890,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "2685:4:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 899,
                        "src": "2677:12:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 889,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2677:7:13",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 892,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "2707:2:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 899,
                        "src": "2699:10:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 891,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2699:7:13",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 894,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "2727:6:13",
                        "nodeType": "VariableDeclaration",
                        "scope": 899,
                        "src": "2719:14:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                        "typeName": {
                          "id": 893,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2719:7:13",
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2667:72:13"
                  },
                  "returnParameters": {
                    "id": 898,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 897,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 899,
                        "src": "2758:4:13",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" },
                        "typeName": {
                          "id": 896,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "2758:4:13",
                          "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2757:6:13"
                  },
                  "scope": 900,
                  "src": "2646:118:13",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 901,
              "src": "202:2564:13",
              "usedErrors": []
            }
          ],
          "src": "106:2661:13"
        },
        "id": 13
      },
      "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
        "ast": {
          "absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
          "exportedSymbols": { "IERC20Permit": [936] },
          "id": 937,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 902,
              "literals": ["solidity", "^", "0.8", ".0"],
              "nodeType": "PragmaDirective",
              "src": "114:23:14"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "IERC20Permit",
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 903,
                "nodeType": "StructuredDocumentation",
                "src": "139:480:14",
                "text": " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."
              },
              "fullyImplemented": false,
              "id": 936,
              "linearizedBaseContracts": [936],
              "name": "IERC20Permit",
              "nameLocation": "630:12:14",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "documentation": {
                    "id": 904,
                    "nodeType": "StructuredDocumentation",
                    "src": "649:792:14",
                    "text": " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."
                  },
                  "functionSelector": "d505accf",
                  "id": 921,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "permit",
                  "nameLocation": "1455:6:14",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 919,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 906,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "1479:5:14",
                        "nodeType": "VariableDeclaration",
                        "scope": 921,
                        "src": "1471:13:14",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 905,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1471:7:14",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 908,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "1502:7:14",
                        "nodeType": "VariableDeclaration",
                        "scope": 921,
                        "src": "1494:15:14",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 907,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1494:7:14",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 910,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "1527:5:14",
                        "nodeType": "VariableDeclaration",
                        "scope": 921,
                        "src": "1519:13:14",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                        "typeName": {
                          "id": 909,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1519:7:14",
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 912,
                        "mutability": "mutable",
                        "name": "deadline",
                        "nameLocation": "1550:8:14",
                        "nodeType": "VariableDeclaration",
                        "scope": 921,
                        "src": "1542:16:14",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                        "typeName": {
                          "id": 911,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1542:7:14",
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 914,
                        "mutability": "mutable",
                        "name": "v",
                        "nameLocation": "1574:1:14",
                        "nodeType": "VariableDeclaration",
                        "scope": 921,
                        "src": "1568:7:14",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_uint8", "typeString": "uint8" },
                        "typeName": {
                          "id": 913,
                          "name": "uint8",
                          "nodeType": "ElementaryTypeName",
                          "src": "1568:5:14",
                          "typeDescriptions": { "typeIdentifier": "t_uint8", "typeString": "uint8" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 916,
                        "mutability": "mutable",
                        "name": "r",
                        "nameLocation": "1593:1:14",
                        "nodeType": "VariableDeclaration",
                        "scope": 921,
                        "src": "1585:9:14",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_bytes32", "typeString": "bytes32" },
                        "typeName": {
                          "id": 915,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "1585:7:14",
                          "typeDescriptions": { "typeIdentifier": "t_bytes32", "typeString": "bytes32" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 918,
                        "mutability": "mutable",
                        "name": "s",
                        "nameLocation": "1612:1:14",
                        "nodeType": "VariableDeclaration",
                        "scope": 921,
                        "src": "1604:9:14",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_bytes32", "typeString": "bytes32" },
                        "typeName": {
                          "id": 917,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "1604:7:14",
                          "typeDescriptions": { "typeIdentifier": "t_bytes32", "typeString": "bytes32" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1461:158:14"
                  },
                  "returnParameters": { "id": 920, "nodeType": "ParameterList", "parameters": [], "src": "1628:0:14" },
                  "scope": 936,
                  "src": "1446:183:14",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 922,
                    "nodeType": "StructuredDocumentation",
                    "src": "1635:294:14",
                    "text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
                  },
                  "functionSelector": "7ecebe00",
                  "id": 929,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "nonces",
                  "nameLocation": "1943:6:14",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 925,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 924,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "1958:5:14",
                        "nodeType": "VariableDeclaration",
                        "scope": 929,
                        "src": "1950:13:14",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 923,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1950:7:14",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1949:15:14"
                  },
                  "returnParameters": {
                    "id": 928,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 927,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 929,
                        "src": "1988:7:14",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                        "typeName": {
                          "id": 926,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1988:7:14",
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1987:9:14"
                  },
                  "scope": 936,
                  "src": "1934:63:14",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "documentation": {
                    "id": 930,
                    "nodeType": "StructuredDocumentation",
                    "src": "2003:128:14",
                    "text": " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
                  },
                  "functionSelector": "3644e515",
                  "id": 935,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "DOMAIN_SEPARATOR",
                  "nameLocation": "2198:16:14",
                  "nodeType": "FunctionDefinition",
                  "parameters": { "id": 931, "nodeType": "ParameterList", "parameters": [], "src": "2214:2:14" },
                  "returnParameters": {
                    "id": 934,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 933,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 935,
                        "src": "2240:7:14",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_bytes32", "typeString": "bytes32" },
                        "typeName": {
                          "id": 932,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "2240:7:14",
                          "typeDescriptions": { "typeIdentifier": "t_bytes32", "typeString": "bytes32" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2239:9:14"
                  },
                  "scope": 936,
                  "src": "2189:60:14",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 937,
              "src": "620:1631:14",
              "usedErrors": []
            }
          ],
          "src": "114:2138:14"
        },
        "id": 14
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
        "ast": {
          "absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
          "exportedSymbols": { "Address": [1547], "IERC20": [900], "IERC20Permit": [936], "SafeERC20": [1217] },
          "id": 1218,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 938,
              "literals": ["solidity", "^", "0.8", ".0"],
              "nodeType": "PragmaDirective",
              "src": "115:23:15"
            },
            {
              "absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
              "file": "../IERC20.sol",
              "id": 939,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 1218,
              "sourceUnit": 901,
              "src": "140:23:15",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol",
              "file": "../extensions/draft-IERC20Permit.sol",
              "id": 940,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 1218,
              "sourceUnit": 937,
              "src": "164:46:15",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "@openzeppelin/contracts/utils/Address.sol",
              "file": "../../../utils/Address.sol",
              "id": 941,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 1218,
              "sourceUnit": 1548,
              "src": "211:36:15",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "SafeERC20",
              "contractDependencies": [],
              "contractKind": "library",
              "documentation": {
                "id": 942,
                "nodeType": "StructuredDocumentation",
                "src": "249:457:15",
                "text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
              },
              "fullyImplemented": true,
              "id": 1217,
              "linearizedBaseContracts": [1217],
              "name": "SafeERC20",
              "nameLocation": "715:9:15",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "global": false,
                  "id": 945,
                  "libraryName": {
                    "id": 943,
                    "name": "Address",
                    "nameLocations": ["737:7:15"],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 1547,
                    "src": "737:7:15"
                  },
                  "nodeType": "UsingForDirective",
                  "src": "731:26:15",
                  "typeName": {
                    "id": 944,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "749:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                  }
                },
                {
                  "body": {
                    "id": 967,
                    "nodeType": "Block",
                    "src": "865:103:15",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 956,
                              "name": "token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 948,
                              "src": "895:5:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$900",
                                "typeString": "contract IERC20"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "expression": {
                                    "expression": {
                                      "id": 959,
                                      "name": "token",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 948,
                                      "src": "925:5:15",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IERC20_$900",
                                        "typeString": "contract IERC20"
                                      }
                                    },
                                    "id": 960,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "931:8:15",
                                    "memberName": "transfer",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 867,
                                    "src": "925:14:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                                      "typeString": "function (address,uint256) external returns (bool)"
                                    }
                                  },
                                  "id": 961,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "940:8:15",
                                  "memberName": "selector",
                                  "nodeType": "MemberAccess",
                                  "src": "925:23:15",
                                  "typeDescriptions": { "typeIdentifier": "t_bytes4", "typeString": "bytes4" }
                                },
                                {
                                  "id": 962,
                                  "name": "to",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 950,
                                  "src": "950:2:15",
                                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                                },
                                {
                                  "id": 963,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 952,
                                  "src": "954:5:15",
                                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  { "typeIdentifier": "t_bytes4", "typeString": "bytes4" },
                                  { "typeIdentifier": "t_address", "typeString": "address" },
                                  { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                ],
                                "expression": {
                                  "id": 957,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "902:3:15",
                                  "typeDescriptions": { "typeIdentifier": "t_magic_abi", "typeString": "abi" }
                                },
                                "id": 958,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "906:18:15",
                                "memberName": "encodeWithSelector",
                                "nodeType": "MemberAccess",
                                "src": "902:22:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function (bytes4) pure returns (bytes memory)"
                                }
                              },
                              "id": 964,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "902:58:15",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              { "typeIdentifier": "t_contract$_IERC20_$900", "typeString": "contract IERC20" },
                              { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory" }
                            ],
                            "id": 955,
                            "name": "_callOptionalReturn",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1216,
                            "src": "875:19:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$900_$_t_bytes_memory_ptr_$returns$__$",
                              "typeString": "function (contract IERC20,bytes memory)"
                            }
                          },
                          "id": 965,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "875:86:15",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                        },
                        "id": 966,
                        "nodeType": "ExpressionStatement",
                        "src": "875:86:15"
                      }
                    ]
                  },
                  "id": 968,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "safeTransfer",
                  "nameLocation": "772:12:15",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 953,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 948,
                        "mutability": "mutable",
                        "name": "token",
                        "nameLocation": "801:5:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 968,
                        "src": "794:12:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$900",
                          "typeString": "contract IERC20"
                        },
                        "typeName": {
                          "id": 947,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 946,
                            "name": "IERC20",
                            "nameLocations": ["794:6:15"],
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 900,
                            "src": "794:6:15"
                          },
                          "referencedDeclaration": 900,
                          "src": "794:6:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IERC20_$900",
                            "typeString": "contract IERC20"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 950,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "824:2:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 968,
                        "src": "816:10:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 949,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "816:7:15",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 952,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "844:5:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 968,
                        "src": "836:13:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                        "typeName": {
                          "id": 951,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "836:7:15",
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "784:71:15"
                  },
                  "returnParameters": { "id": 954, "nodeType": "ParameterList", "parameters": [], "src": "865:0:15" },
                  "scope": 1217,
                  "src": "763:205:15",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 993,
                    "nodeType": "Block",
                    "src": "1102:113:15",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 981,
                              "name": "token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 971,
                              "src": "1132:5:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$900",
                                "typeString": "contract IERC20"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "expression": {
                                    "expression": {
                                      "id": 984,
                                      "name": "token",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 971,
                                      "src": "1162:5:15",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IERC20_$900",
                                        "typeString": "contract IERC20"
                                      }
                                    },
                                    "id": 985,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "1168:12:15",
                                    "memberName": "transferFrom",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 899,
                                    "src": "1162:18:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
                                      "typeString": "function (address,address,uint256) external returns (bool)"
                                    }
                                  },
                                  "id": 986,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "1181:8:15",
                                  "memberName": "selector",
                                  "nodeType": "MemberAccess",
                                  "src": "1162:27:15",
                                  "typeDescriptions": { "typeIdentifier": "t_bytes4", "typeString": "bytes4" }
                                },
                                {
                                  "id": 987,
                                  "name": "from",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 973,
                                  "src": "1191:4:15",
                                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                                },
                                {
                                  "id": 988,
                                  "name": "to",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 975,
                                  "src": "1197:2:15",
                                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                                },
                                {
                                  "id": 989,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 977,
                                  "src": "1201:5:15",
                                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  { "typeIdentifier": "t_bytes4", "typeString": "bytes4" },
                                  { "typeIdentifier": "t_address", "typeString": "address" },
                                  { "typeIdentifier": "t_address", "typeString": "address" },
                                  { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                ],
                                "expression": {
                                  "id": 982,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "1139:3:15",
                                  "typeDescriptions": { "typeIdentifier": "t_magic_abi", "typeString": "abi" }
                                },
                                "id": 983,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "1143:18:15",
                                "memberName": "encodeWithSelector",
                                "nodeType": "MemberAccess",
                                "src": "1139:22:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function (bytes4) pure returns (bytes memory)"
                                }
                              },
                              "id": 990,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1139:68:15",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              { "typeIdentifier": "t_contract$_IERC20_$900", "typeString": "contract IERC20" },
                              { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory" }
                            ],
                            "id": 980,
                            "name": "_callOptionalReturn",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1216,
                            "src": "1112:19:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$900_$_t_bytes_memory_ptr_$returns$__$",
                              "typeString": "function (contract IERC20,bytes memory)"
                            }
                          },
                          "id": 991,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1112:96:15",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                        },
                        "id": 992,
                        "nodeType": "ExpressionStatement",
                        "src": "1112:96:15"
                      }
                    ]
                  },
                  "id": 994,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "safeTransferFrom",
                  "nameLocation": "983:16:15",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 978,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 971,
                        "mutability": "mutable",
                        "name": "token",
                        "nameLocation": "1016:5:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 994,
                        "src": "1009:12:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$900",
                          "typeString": "contract IERC20"
                        },
                        "typeName": {
                          "id": 970,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 969,
                            "name": "IERC20",
                            "nameLocations": ["1009:6:15"],
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 900,
                            "src": "1009:6:15"
                          },
                          "referencedDeclaration": 900,
                          "src": "1009:6:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IERC20_$900",
                            "typeString": "contract IERC20"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 973,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "1039:4:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 994,
                        "src": "1031:12:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 972,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1031:7:15",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 975,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "1061:2:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 994,
                        "src": "1053:10:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 974,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1053:7:15",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 977,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "1081:5:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 994,
                        "src": "1073:13:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                        "typeName": {
                          "id": 976,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1073:7:15",
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "999:93:15"
                  },
                  "returnParameters": { "id": 979, "nodeType": "ParameterList", "parameters": [], "src": "1102:0:15" },
                  "scope": 1217,
                  "src": "974:241:15",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1037,
                    "nodeType": "Block",
                    "src": "1581:497:15",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": { "typeIdentifier": "t_bool", "typeString": "bool" },
                              "id": 1021,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "components": [
                                  {
                                    "commonType": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                                    "id": 1008,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 1006,
                                      "name": "value",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1002,
                                      "src": "1830:5:15",
                                      "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "==",
                                    "rightExpression": {
                                      "hexValue": "30",
                                      "id": 1007,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "1839:1:15",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    },
                                    "src": "1830:10:15",
                                    "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                                  }
                                ],
                                "id": 1009,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "1829:12:15",
                                "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "||",
                              "rightExpression": {
                                "components": [
                                  {
                                    "commonType": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                                    "id": 1019,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "id": 1014,
                                              "name": "this",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": -28,
                                              "src": "1870:4:15",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_contract$_SafeERC20_$1217",
                                                "typeString": "library SafeERC20"
                                              }
                                            }
                                          ],
                                          "expression": {
                                            "argumentTypes": [
                                              {
                                                "typeIdentifier": "t_contract$_SafeERC20_$1217",
                                                "typeString": "library SafeERC20"
                                              }
                                            ],
                                            "id": 1013,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "lValueRequested": false,
                                            "nodeType": "ElementaryTypeNameExpression",
                                            "src": "1862:7:15",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_type$_t_address_$",
                                              "typeString": "type(address)"
                                            },
                                            "typeName": {
                                              "id": 1012,
                                              "name": "address",
                                              "nodeType": "ElementaryTypeName",
                                              "src": "1862:7:15",
                                              "typeDescriptions": {}
                                            }
                                          },
                                          "id": 1015,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "kind": "typeConversion",
                                          "lValueRequested": false,
                                          "nameLocations": [],
                                          "names": [],
                                          "nodeType": "FunctionCall",
                                          "src": "1862:13:15",
                                          "tryCall": false,
                                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                                        },
                                        {
                                          "id": 1016,
                                          "name": "spender",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1000,
                                          "src": "1877:7:15",
                                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          { "typeIdentifier": "t_address", "typeString": "address" },
                                          { "typeIdentifier": "t_address", "typeString": "address" }
                                        ],
                                        "expression": {
                                          "id": 1010,
                                          "name": "token",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 998,
                                          "src": "1846:5:15",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_contract$_IERC20_$900",
                                            "typeString": "contract IERC20"
                                          }
                                        },
                                        "id": 1011,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberLocation": "1852:9:15",
                                        "memberName": "allowance",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 877,
                                        "src": "1846:15:15",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
                                          "typeString": "function (address,address) view external returns (uint256)"
                                        }
                                      },
                                      "id": 1017,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "nameLocations": [],
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "1846:39:15",
                                      "tryCall": false,
                                      "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "==",
                                    "rightExpression": {
                                      "hexValue": "30",
                                      "id": 1018,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "1889:1:15",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    },
                                    "src": "1846:44:15",
                                    "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                                  }
                                ],
                                "id": 1020,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "1845:46:15",
                                "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                              },
                              "src": "1829:62:15",
                              "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                            },
                            {
                              "hexValue": "5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
                              "id": 1022,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1905:56:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
                                "typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
                              },
                              "value": "SafeERC20: approve from non-zero to non-zero allowance"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              { "typeIdentifier": "t_bool", "typeString": "bool" },
                              {
                                "typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
                                "typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
                              }
                            ],
                            "id": 1005,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [-18, -18],
                            "referencedDeclaration": -18,
                            "src": "1808:7:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1023,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1808:163:15",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                        },
                        "id": 1024,
                        "nodeType": "ExpressionStatement",
                        "src": "1808:163:15"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1026,
                              "name": "token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 998,
                              "src": "2001:5:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$900",
                                "typeString": "contract IERC20"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "expression": {
                                    "expression": {
                                      "id": 1029,
                                      "name": "token",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 998,
                                      "src": "2031:5:15",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IERC20_$900",
                                        "typeString": "contract IERC20"
                                      }
                                    },
                                    "id": 1030,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "2037:7:15",
                                    "memberName": "approve",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 887,
                                    "src": "2031:13:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                                      "typeString": "function (address,uint256) external returns (bool)"
                                    }
                                  },
                                  "id": 1031,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "2045:8:15",
                                  "memberName": "selector",
                                  "nodeType": "MemberAccess",
                                  "src": "2031:22:15",
                                  "typeDescriptions": { "typeIdentifier": "t_bytes4", "typeString": "bytes4" }
                                },
                                {
                                  "id": 1032,
                                  "name": "spender",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1000,
                                  "src": "2055:7:15",
                                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                                },
                                {
                                  "id": 1033,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1002,
                                  "src": "2064:5:15",
                                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  { "typeIdentifier": "t_bytes4", "typeString": "bytes4" },
                                  { "typeIdentifier": "t_address", "typeString": "address" },
                                  { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                ],
                                "expression": {
                                  "id": 1027,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "2008:3:15",
                                  "typeDescriptions": { "typeIdentifier": "t_magic_abi", "typeString": "abi" }
                                },
                                "id": 1028,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "2012:18:15",
                                "memberName": "encodeWithSelector",
                                "nodeType": "MemberAccess",
                                "src": "2008:22:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function (bytes4) pure returns (bytes memory)"
                                }
                              },
                              "id": 1034,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2008:62:15",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              { "typeIdentifier": "t_contract$_IERC20_$900", "typeString": "contract IERC20" },
                              { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory" }
                            ],
                            "id": 1025,
                            "name": "_callOptionalReturn",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1216,
                            "src": "1981:19:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$900_$_t_bytes_memory_ptr_$returns$__$",
                              "typeString": "function (contract IERC20,bytes memory)"
                            }
                          },
                          "id": 1035,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1981:90:15",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                        },
                        "id": 1036,
                        "nodeType": "ExpressionStatement",
                        "src": "1981:90:15"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 995,
                    "nodeType": "StructuredDocumentation",
                    "src": "1221:249:15",
                    "text": " @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."
                  },
                  "id": 1038,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "safeApprove",
                  "nameLocation": "1484:11:15",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1003,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 998,
                        "mutability": "mutable",
                        "name": "token",
                        "nameLocation": "1512:5:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 1038,
                        "src": "1505:12:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$900",
                          "typeString": "contract IERC20"
                        },
                        "typeName": {
                          "id": 997,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 996,
                            "name": "IERC20",
                            "nameLocations": ["1505:6:15"],
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 900,
                            "src": "1505:6:15"
                          },
                          "referencedDeclaration": 900,
                          "src": "1505:6:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IERC20_$900",
                            "typeString": "contract IERC20"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1000,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "1535:7:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 1038,
                        "src": "1527:15:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 999,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1527:7:15",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1002,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "1560:5:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 1038,
                        "src": "1552:13:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                        "typeName": {
                          "id": 1001,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1552:7:15",
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1495:76:15"
                  },
                  "returnParameters": { "id": 1004, "nodeType": "ParameterList", "parameters": [], "src": "1581:0:15" },
                  "scope": 1217,
                  "src": "1475:603:15",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1073,
                    "nodeType": "Block",
                    "src": "2200:194:15",
                    "statements": [
                      {
                        "assignments": [1049],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1049,
                            "mutability": "mutable",
                            "name": "newAllowance",
                            "nameLocation": "2218:12:15",
                            "nodeType": "VariableDeclaration",
                            "scope": 1073,
                            "src": "2210:20:15",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                            "typeName": {
                              "id": 1048,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "2210:7:15",
                              "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1060,
                        "initialValue": {
                          "commonType": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                          "id": 1059,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "id": 1054,
                                    "name": "this",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -28,
                                    "src": "2257:4:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_SafeERC20_$1217",
                                      "typeString": "library SafeERC20"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_SafeERC20_$1217",
                                      "typeString": "library SafeERC20"
                                    }
                                  ],
                                  "id": 1053,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "2249:7:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 1052,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "2249:7:15",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 1055,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2249:13:15",
                                "tryCall": false,
                                "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                              },
                              {
                                "id": 1056,
                                "name": "spender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1043,
                                "src": "2264:7:15",
                                "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                { "typeIdentifier": "t_address", "typeString": "address" },
                                { "typeIdentifier": "t_address", "typeString": "address" }
                              ],
                              "expression": {
                                "id": 1050,
                                "name": "token",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1041,
                                "src": "2233:5:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IERC20_$900",
                                  "typeString": "contract IERC20"
                                }
                              },
                              "id": 1051,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "2239:9:15",
                              "memberName": "allowance",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 877,
                              "src": "2233:15:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
                                "typeString": "function (address,address) view external returns (uint256)"
                              }
                            },
                            "id": 1057,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2233:39:15",
                            "tryCall": false,
                            "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "+",
                          "rightExpression": {
                            "id": 1058,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1045,
                            "src": "2275:5:15",
                            "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                          },
                          "src": "2233:47:15",
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2210:70:15"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1062,
                              "name": "token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1041,
                              "src": "2310:5:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$900",
                                "typeString": "contract IERC20"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "expression": {
                                    "expression": {
                                      "id": 1065,
                                      "name": "token",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1041,
                                      "src": "2340:5:15",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_IERC20_$900",
                                        "typeString": "contract IERC20"
                                      }
                                    },
                                    "id": 1066,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "2346:7:15",
                                    "memberName": "approve",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 887,
                                    "src": "2340:13:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                                      "typeString": "function (address,uint256) external returns (bool)"
                                    }
                                  },
                                  "id": 1067,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "2354:8:15",
                                  "memberName": "selector",
                                  "nodeType": "MemberAccess",
                                  "src": "2340:22:15",
                                  "typeDescriptions": { "typeIdentifier": "t_bytes4", "typeString": "bytes4" }
                                },
                                {
                                  "id": 1068,
                                  "name": "spender",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1043,
                                  "src": "2364:7:15",
                                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                                },
                                {
                                  "id": 1069,
                                  "name": "newAllowance",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1049,
                                  "src": "2373:12:15",
                                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  { "typeIdentifier": "t_bytes4", "typeString": "bytes4" },
                                  { "typeIdentifier": "t_address", "typeString": "address" },
                                  { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                ],
                                "expression": {
                                  "id": 1063,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "2317:3:15",
                                  "typeDescriptions": { "typeIdentifier": "t_magic_abi", "typeString": "abi" }
                                },
                                "id": 1064,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "2321:18:15",
                                "memberName": "encodeWithSelector",
                                "nodeType": "MemberAccess",
                                "src": "2317:22:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function (bytes4) pure returns (bytes memory)"
                                }
                              },
                              "id": 1070,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2317:69:15",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              { "typeIdentifier": "t_contract$_IERC20_$900", "typeString": "contract IERC20" },
                              { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory" }
                            ],
                            "id": 1061,
                            "name": "_callOptionalReturn",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1216,
                            "src": "2290:19:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$900_$_t_bytes_memory_ptr_$returns$__$",
                              "typeString": "function (contract IERC20,bytes memory)"
                            }
                          },
                          "id": 1071,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2290:97:15",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                        },
                        "id": 1072,
                        "nodeType": "ExpressionStatement",
                        "src": "2290:97:15"
                      }
                    ]
                  },
                  "id": 1074,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "safeIncreaseAllowance",
                  "nameLocation": "2093:21:15",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1046,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1041,
                        "mutability": "mutable",
                        "name": "token",
                        "nameLocation": "2131:5:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 1074,
                        "src": "2124:12:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$900",
                          "typeString": "contract IERC20"
                        },
                        "typeName": {
                          "id": 1040,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 1039,
                            "name": "IERC20",
                            "nameLocations": ["2124:6:15"],
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 900,
                            "src": "2124:6:15"
                          },
                          "referencedDeclaration": 900,
                          "src": "2124:6:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IERC20_$900",
                            "typeString": "contract IERC20"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1043,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "2154:7:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 1074,
                        "src": "2146:15:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 1042,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2146:7:15",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1045,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "2179:5:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 1074,
                        "src": "2171:13:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                        "typeName": {
                          "id": 1044,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2171:7:15",
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2114:76:15"
                  },
                  "returnParameters": { "id": 1047, "nodeType": "ParameterList", "parameters": [], "src": "2200:0:15" },
                  "scope": 1217,
                  "src": "2084:310:15",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1121,
                    "nodeType": "Block",
                    "src": "2516:370:15",
                    "statements": [
                      {
                        "id": 1120,
                        "nodeType": "UncheckedBlock",
                        "src": "2526:354:15",
                        "statements": [
                          {
                            "assignments": [1085],
                            "declarations": [
                              {
                                "constant": false,
                                "id": 1085,
                                "mutability": "mutable",
                                "name": "oldAllowance",
                                "nameLocation": "2558:12:15",
                                "nodeType": "VariableDeclaration",
                                "scope": 1120,
                                "src": "2550:20:15",
                                "stateVariable": false,
                                "storageLocation": "default",
                                "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                                "typeName": {
                                  "id": 1084,
                                  "name": "uint256",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "2550:7:15",
                                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                },
                                "visibility": "internal"
                              }
                            ],
                            "id": 1094,
                            "initialValue": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "id": 1090,
                                      "name": "this",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -28,
                                      "src": "2597:4:15",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_SafeERC20_$1217",
                                        "typeString": "library SafeERC20"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_SafeERC20_$1217",
                                        "typeString": "library SafeERC20"
                                      }
                                    ],
                                    "id": 1089,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "2589:7:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 1088,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "2589:7:15",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 1091,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2589:13:15",
                                  "tryCall": false,
                                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                                },
                                {
                                  "id": 1092,
                                  "name": "spender",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1079,
                                  "src": "2604:7:15",
                                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  { "typeIdentifier": "t_address", "typeString": "address" },
                                  { "typeIdentifier": "t_address", "typeString": "address" }
                                ],
                                "expression": {
                                  "id": 1086,
                                  "name": "token",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1077,
                                  "src": "2573:5:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_IERC20_$900",
                                    "typeString": "contract IERC20"
                                  }
                                },
                                "id": 1087,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "2579:9:15",
                                "memberName": "allowance",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 877,
                                "src": "2573:15:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
                                  "typeString": "function (address,address) view external returns (uint256)"
                                }
                              },
                              "id": 1093,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2573:39:15",
                              "tryCall": false,
                              "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                            },
                            "nodeType": "VariableDeclarationStatement",
                            "src": "2550:62:15"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "commonType": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                                  "id": 1098,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 1096,
                                    "name": "oldAllowance",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1085,
                                    "src": "2634:12:15",
                                    "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": ">=",
                                  "rightExpression": {
                                    "id": 1097,
                                    "name": "value",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1081,
                                    "src": "2650:5:15",
                                    "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                  },
                                  "src": "2634:21:15",
                                  "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                                },
                                {
                                  "hexValue": "5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
                                  "id": 1099,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2657:43:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
                                    "typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
                                  },
                                  "value": "SafeERC20: decreased allowance below zero"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  { "typeIdentifier": "t_bool", "typeString": "bool" },
                                  {
                                    "typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
                                    "typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
                                  }
                                ],
                                "id": 1095,
                                "name": "require",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [-18, -18],
                                "referencedDeclaration": -18,
                                "src": "2626:7:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                                  "typeString": "function (bool,string memory) pure"
                                }
                              },
                              "id": 1100,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2626:75:15",
                              "tryCall": false,
                              "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                            },
                            "id": 1101,
                            "nodeType": "ExpressionStatement",
                            "src": "2626:75:15"
                          },
                          {
                            "assignments": [1103],
                            "declarations": [
                              {
                                "constant": false,
                                "id": 1103,
                                "mutability": "mutable",
                                "name": "newAllowance",
                                "nameLocation": "2723:12:15",
                                "nodeType": "VariableDeclaration",
                                "scope": 1120,
                                "src": "2715:20:15",
                                "stateVariable": false,
                                "storageLocation": "default",
                                "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                                "typeName": {
                                  "id": 1102,
                                  "name": "uint256",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "2715:7:15",
                                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                },
                                "visibility": "internal"
                              }
                            ],
                            "id": 1107,
                            "initialValue": {
                              "commonType": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                              "id": 1106,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1104,
                                "name": "oldAllowance",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1085,
                                "src": "2738:12:15",
                                "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "-",
                              "rightExpression": {
                                "id": 1105,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1081,
                                "src": "2753:5:15",
                                "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                              },
                              "src": "2738:20:15",
                              "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                            },
                            "nodeType": "VariableDeclarationStatement",
                            "src": "2715:43:15"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "id": 1109,
                                  "name": "token",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1077,
                                  "src": "2792:5:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_IERC20_$900",
                                    "typeString": "contract IERC20"
                                  }
                                },
                                {
                                  "arguments": [
                                    {
                                      "expression": {
                                        "expression": {
                                          "id": 1112,
                                          "name": "token",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1077,
                                          "src": "2822:5:15",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_contract$_IERC20_$900",
                                            "typeString": "contract IERC20"
                                          }
                                        },
                                        "id": 1113,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberLocation": "2828:7:15",
                                        "memberName": "approve",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 887,
                                        "src": "2822:13:15",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                                          "typeString": "function (address,uint256) external returns (bool)"
                                        }
                                      },
                                      "id": 1114,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberLocation": "2836:8:15",
                                      "memberName": "selector",
                                      "nodeType": "MemberAccess",
                                      "src": "2822:22:15",
                                      "typeDescriptions": { "typeIdentifier": "t_bytes4", "typeString": "bytes4" }
                                    },
                                    {
                                      "id": 1115,
                                      "name": "spender",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1079,
                                      "src": "2846:7:15",
                                      "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                                    },
                                    {
                                      "id": 1116,
                                      "name": "newAllowance",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1103,
                                      "src": "2855:12:15",
                                      "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      { "typeIdentifier": "t_bytes4", "typeString": "bytes4" },
                                      { "typeIdentifier": "t_address", "typeString": "address" },
                                      { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                    ],
                                    "expression": {
                                      "id": 1110,
                                      "name": "abi",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -1,
                                      "src": "2799:3:15",
                                      "typeDescriptions": { "typeIdentifier": "t_magic_abi", "typeString": "abi" }
                                    },
                                    "id": 1111,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "memberLocation": "2803:18:15",
                                    "memberName": "encodeWithSelector",
                                    "nodeType": "MemberAccess",
                                    "src": "2799:22:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                      "typeString": "function (bytes4) pure returns (bytes memory)"
                                    }
                                  },
                                  "id": 1117,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2799:69:15",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  { "typeIdentifier": "t_contract$_IERC20_$900", "typeString": "contract IERC20" },
                                  { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory" }
                                ],
                                "id": 1108,
                                "name": "_callOptionalReturn",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1216,
                                "src": "2772:19:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$900_$_t_bytes_memory_ptr_$returns$__$",
                                  "typeString": "function (contract IERC20,bytes memory)"
                                }
                              },
                              "id": 1118,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2772:97:15",
                              "tryCall": false,
                              "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                            },
                            "id": 1119,
                            "nodeType": "ExpressionStatement",
                            "src": "2772:97:15"
                          }
                        ]
                      }
                    ]
                  },
                  "id": 1122,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "safeDecreaseAllowance",
                  "nameLocation": "2409:21:15",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1082,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1077,
                        "mutability": "mutable",
                        "name": "token",
                        "nameLocation": "2447:5:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 1122,
                        "src": "2440:12:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$900",
                          "typeString": "contract IERC20"
                        },
                        "typeName": {
                          "id": 1076,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 1075,
                            "name": "IERC20",
                            "nameLocations": ["2440:6:15"],
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 900,
                            "src": "2440:6:15"
                          },
                          "referencedDeclaration": 900,
                          "src": "2440:6:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IERC20_$900",
                            "typeString": "contract IERC20"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1079,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "2470:7:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 1122,
                        "src": "2462:15:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 1078,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2462:7:15",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1081,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "2495:5:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 1122,
                        "src": "2487:13:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                        "typeName": {
                          "id": 1080,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2487:7:15",
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2430:76:15"
                  },
                  "returnParameters": { "id": 1083, "nodeType": "ParameterList", "parameters": [], "src": "2516:0:15" },
                  "scope": 1217,
                  "src": "2400:486:15",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1177,
                    "nodeType": "Block",
                    "src": "3107:257:15",
                    "statements": [
                      {
                        "assignments": [1143],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1143,
                            "mutability": "mutable",
                            "name": "nonceBefore",
                            "nameLocation": "3125:11:15",
                            "nodeType": "VariableDeclaration",
                            "scope": 1177,
                            "src": "3117:19:15",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                            "typeName": {
                              "id": 1142,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "3117:7:15",
                              "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1148,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 1146,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1127,
                              "src": "3152:5:15",
                              "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [{ "typeIdentifier": "t_address", "typeString": "address" }],
                            "expression": {
                              "id": 1144,
                              "name": "token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1125,
                              "src": "3139:5:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20Permit_$936",
                                "typeString": "contract IERC20Permit"
                              }
                            },
                            "id": 1145,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "3145:6:15",
                            "memberName": "nonces",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 929,
                            "src": "3139:12:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address) view external returns (uint256)"
                            }
                          },
                          "id": 1147,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3139:19:15",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3117:41:15"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1152,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1127,
                              "src": "3181:5:15",
                              "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                            },
                            {
                              "id": 1153,
                              "name": "spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1129,
                              "src": "3188:7:15",
                              "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                            },
                            {
                              "id": 1154,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1131,
                              "src": "3197:5:15",
                              "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                            },
                            {
                              "id": 1155,
                              "name": "deadline",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1133,
                              "src": "3204:8:15",
                              "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                            },
                            {
                              "id": 1156,
                              "name": "v",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1135,
                              "src": "3214:1:15",
                              "typeDescriptions": { "typeIdentifier": "t_uint8", "typeString": "uint8" }
                            },
                            {
                              "id": 1157,
                              "name": "r",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1137,
                              "src": "3217:1:15",
                              "typeDescriptions": { "typeIdentifier": "t_bytes32", "typeString": "bytes32" }
                            },
                            {
                              "id": 1158,
                              "name": "s",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1139,
                              "src": "3220:1:15",
                              "typeDescriptions": { "typeIdentifier": "t_bytes32", "typeString": "bytes32" }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              { "typeIdentifier": "t_address", "typeString": "address" },
                              { "typeIdentifier": "t_address", "typeString": "address" },
                              { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                              { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                              { "typeIdentifier": "t_uint8", "typeString": "uint8" },
                              { "typeIdentifier": "t_bytes32", "typeString": "bytes32" },
                              { "typeIdentifier": "t_bytes32", "typeString": "bytes32" }
                            ],
                            "expression": {
                              "id": 1149,
                              "name": "token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1125,
                              "src": "3168:5:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20Permit_$936",
                                "typeString": "contract IERC20Permit"
                              }
                            },
                            "id": 1151,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "3174:6:15",
                            "memberName": "permit",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 921,
                            "src": "3168:12:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$",
                              "typeString": "function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"
                            }
                          },
                          "id": 1159,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3168:54:15",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                        },
                        "id": 1160,
                        "nodeType": "ExpressionStatement",
                        "src": "3168:54:15"
                      },
                      {
                        "assignments": [1162],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1162,
                            "mutability": "mutable",
                            "name": "nonceAfter",
                            "nameLocation": "3240:10:15",
                            "nodeType": "VariableDeclaration",
                            "scope": 1177,
                            "src": "3232:18:15",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                            "typeName": {
                              "id": 1161,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "3232:7:15",
                              "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1167,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 1165,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1127,
                              "src": "3266:5:15",
                              "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [{ "typeIdentifier": "t_address", "typeString": "address" }],
                            "expression": {
                              "id": 1163,
                              "name": "token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1125,
                              "src": "3253:5:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20Permit_$936",
                                "typeString": "contract IERC20Permit"
                              }
                            },
                            "id": 1164,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "3259:6:15",
                            "memberName": "nonces",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 929,
                            "src": "3253:12:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address) view external returns (uint256)"
                            }
                          },
                          "id": 1166,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3253:19:15",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3232:40:15"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                              "id": 1173,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1169,
                                "name": "nonceAfter",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1162,
                                "src": "3290:10:15",
                                "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "commonType": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                                "id": 1172,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 1170,
                                  "name": "nonceBefore",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1143,
                                  "src": "3304:11:15",
                                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "+",
                                "rightExpression": {
                                  "hexValue": "31",
                                  "id": 1171,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "3318:1:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "src": "3304:15:15",
                                "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                              },
                              "src": "3290:29:15",
                              "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                            },
                            {
                              "hexValue": "5361666545524332303a207065726d697420646964206e6f742073756363656564",
                              "id": 1174,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3321:35:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d",
                                "typeString": "literal_string \"SafeERC20: permit did not succeed\""
                              },
                              "value": "SafeERC20: permit did not succeed"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              { "typeIdentifier": "t_bool", "typeString": "bool" },
                              {
                                "typeIdentifier": "t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d",
                                "typeString": "literal_string \"SafeERC20: permit did not succeed\""
                              }
                            ],
                            "id": 1168,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [-18, -18],
                            "referencedDeclaration": -18,
                            "src": "3282:7:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1175,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3282:75:15",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                        },
                        "id": 1176,
                        "nodeType": "ExpressionStatement",
                        "src": "3282:75:15"
                      }
                    ]
                  },
                  "id": 1178,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "safePermit",
                  "nameLocation": "2901:10:15",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1140,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1125,
                        "mutability": "mutable",
                        "name": "token",
                        "nameLocation": "2934:5:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 1178,
                        "src": "2921:18:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20Permit_$936",
                          "typeString": "contract IERC20Permit"
                        },
                        "typeName": {
                          "id": 1124,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 1123,
                            "name": "IERC20Permit",
                            "nameLocations": ["2921:12:15"],
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 936,
                            "src": "2921:12:15"
                          },
                          "referencedDeclaration": 936,
                          "src": "2921:12:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IERC20Permit_$936",
                            "typeString": "contract IERC20Permit"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1127,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "2957:5:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 1178,
                        "src": "2949:13:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 1126,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2949:7:15",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1129,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "2980:7:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 1178,
                        "src": "2972:15:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 1128,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2972:7:15",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1131,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "3005:5:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 1178,
                        "src": "2997:13:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                        "typeName": {
                          "id": 1130,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2997:7:15",
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1133,
                        "mutability": "mutable",
                        "name": "deadline",
                        "nameLocation": "3028:8:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 1178,
                        "src": "3020:16:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                        "typeName": {
                          "id": 1132,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3020:7:15",
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1135,
                        "mutability": "mutable",
                        "name": "v",
                        "nameLocation": "3052:1:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 1178,
                        "src": "3046:7:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_uint8", "typeString": "uint8" },
                        "typeName": {
                          "id": 1134,
                          "name": "uint8",
                          "nodeType": "ElementaryTypeName",
                          "src": "3046:5:15",
                          "typeDescriptions": { "typeIdentifier": "t_uint8", "typeString": "uint8" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1137,
                        "mutability": "mutable",
                        "name": "r",
                        "nameLocation": "3071:1:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 1178,
                        "src": "3063:9:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_bytes32", "typeString": "bytes32" },
                        "typeName": {
                          "id": 1136,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "3063:7:15",
                          "typeDescriptions": { "typeIdentifier": "t_bytes32", "typeString": "bytes32" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1139,
                        "mutability": "mutable",
                        "name": "s",
                        "nameLocation": "3090:1:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 1178,
                        "src": "3082:9:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_bytes32", "typeString": "bytes32" },
                        "typeName": {
                          "id": 1138,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "3082:7:15",
                          "typeDescriptions": { "typeIdentifier": "t_bytes32", "typeString": "bytes32" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2911:186:15"
                  },
                  "returnParameters": { "id": 1141, "nodeType": "ParameterList", "parameters": [], "src": "3107:0:15" },
                  "scope": 1217,
                  "src": "2892:472:15",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1215,
                    "nodeType": "Block",
                    "src": "3817:636:15",
                    "statements": [
                      {
                        "assignments": [1188],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1188,
                            "mutability": "mutable",
                            "name": "returndata",
                            "nameLocation": "4179:10:15",
                            "nodeType": "VariableDeclaration",
                            "scope": 1215,
                            "src": "4166:23:15",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes" },
                            "typeName": {
                              "id": 1187,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "4166:5:15",
                              "typeDescriptions": { "typeIdentifier": "t_bytes_storage_ptr", "typeString": "bytes" }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1197,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 1194,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1184,
                              "src": "4220:4:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "hexValue": "5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564",
                              "id": 1195,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4226:34:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
                                "typeString": "literal_string \"SafeERC20: low-level call failed\""
                              },
                              "value": "SafeERC20: low-level call failed"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory" },
                              {
                                "typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
                                "typeString": "literal_string \"SafeERC20: low-level call failed\""
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 1191,
                                  "name": "token",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1182,
                                  "src": "4200:5:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_IERC20_$900",
                                    "typeString": "contract IERC20"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  { "typeIdentifier": "t_contract$_IERC20_$900", "typeString": "contract IERC20" }
                                ],
                                "id": 1190,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "4192:7:15",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 1189,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "4192:7:15",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 1192,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4192:14:15",
                              "tryCall": false,
                              "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                            },
                            "id": 1193,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "4207:12:15",
                            "memberName": "functionCall",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1307,
                            "src": "4192:27:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$",
                              "typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
                            }
                          },
                          "id": 1196,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4192:69:15",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory" }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4166:95:15"
                      },
                      {
                        "condition": {
                          "commonType": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                          "id": 1201,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 1198,
                              "name": "returndata",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1188,
                              "src": "4275:10:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            "id": 1199,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "4286:6:15",
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "4275:17:15",
                            "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 1200,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4295:1:15",
                            "typeDescriptions": { "typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0" },
                            "value": "0"
                          },
                          "src": "4275:21:15",
                          "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                        },
                        "id": 1214,
                        "nodeType": "IfStatement",
                        "src": "4271:176:15",
                        "trueBody": {
                          "id": 1213,
                          "nodeType": "Block",
                          "src": "4298:149:15",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "id": 1205,
                                        "name": "returndata",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1188,
                                        "src": "4370:10:15",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes_memory_ptr",
                                          "typeString": "bytes memory"
                                        }
                                      },
                                      {
                                        "components": [
                                          {
                                            "id": 1207,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "lValueRequested": false,
                                            "nodeType": "ElementaryTypeNameExpression",
                                            "src": "4383:4:15",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_type$_t_bool_$",
                                              "typeString": "type(bool)"
                                            },
                                            "typeName": {
                                              "id": 1206,
                                              "name": "bool",
                                              "nodeType": "ElementaryTypeName",
                                              "src": "4383:4:15",
                                              "typeDescriptions": {}
                                            }
                                          }
                                        ],
                                        "id": 1208,
                                        "isConstant": false,
                                        "isInlineArray": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "nodeType": "TupleExpression",
                                        "src": "4382:6:15",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_bool_$",
                                          "typeString": "type(bool)"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory" },
                                        { "typeIdentifier": "t_type$_t_bool_$", "typeString": "type(bool)" }
                                      ],
                                      "expression": {
                                        "id": 1203,
                                        "name": "abi",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": -1,
                                        "src": "4359:3:15",
                                        "typeDescriptions": { "typeIdentifier": "t_magic_abi", "typeString": "abi" }
                                      },
                                      "id": 1204,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "memberLocation": "4363:6:15",
                                      "memberName": "decode",
                                      "nodeType": "MemberAccess",
                                      "src": "4359:10:15",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
                                        "typeString": "function () pure"
                                      }
                                    },
                                    "id": 1209,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "4359:30:15",
                                    "tryCall": false,
                                    "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                                  },
                                  {
                                    "hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564",
                                    "id": 1210,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "4391:44:15",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
                                      "typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
                                    },
                                    "value": "SafeERC20: ERC20 operation did not succeed"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    { "typeIdentifier": "t_bool", "typeString": "bool" },
                                    {
                                      "typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
                                      "typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
                                    }
                                  ],
                                  "id": 1202,
                                  "name": "require",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [-18, -18],
                                  "referencedDeclaration": -18,
                                  "src": "4351:7:15",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                                    "typeString": "function (bool,string memory) pure"
                                  }
                                },
                                "id": 1211,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "4351:85:15",
                                "tryCall": false,
                                "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                              },
                              "id": 1212,
                              "nodeType": "ExpressionStatement",
                              "src": "4351:85:15"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1179,
                    "nodeType": "StructuredDocumentation",
                    "src": "3370:372:15",
                    "text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
                  },
                  "id": 1216,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_callOptionalReturn",
                  "nameLocation": "3756:19:15",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1185,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1182,
                        "mutability": "mutable",
                        "name": "token",
                        "nameLocation": "3783:5:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 1216,
                        "src": "3776:12:15",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$900",
                          "typeString": "contract IERC20"
                        },
                        "typeName": {
                          "id": 1181,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 1180,
                            "name": "IERC20",
                            "nameLocations": ["3776:6:15"],
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 900,
                            "src": "3776:6:15"
                          },
                          "referencedDeclaration": 900,
                          "src": "3776:6:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IERC20_$900",
                            "typeString": "contract IERC20"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1184,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "3803:4:15",
                        "nodeType": "VariableDeclaration",
                        "scope": 1216,
                        "src": "3790:17:15",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes" },
                        "typeName": {
                          "id": 1183,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "3790:5:15",
                          "typeDescriptions": { "typeIdentifier": "t_bytes_storage_ptr", "typeString": "bytes" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3775:33:15"
                  },
                  "returnParameters": { "id": 1186, "nodeType": "ParameterList", "parameters": [], "src": "3817:0:15" },
                  "scope": 1217,
                  "src": "3747:706:15",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "private"
                }
              ],
              "scope": 1218,
              "src": "707:3748:15",
              "usedErrors": []
            }
          ],
          "src": "115:4341:15"
        },
        "id": 15
      },
      "@openzeppelin/contracts/utils/Address.sol": {
        "ast": {
          "absolutePath": "@openzeppelin/contracts/utils/Address.sol",
          "exportedSymbols": { "Address": [1547] },
          "id": 1548,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1219,
              "literals": ["solidity", "^", "0.8", ".1"],
              "nodeType": "PragmaDirective",
              "src": "101:23:16"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "Address",
              "contractDependencies": [],
              "contractKind": "library",
              "documentation": {
                "id": 1220,
                "nodeType": "StructuredDocumentation",
                "src": "126:67:16",
                "text": " @dev Collection of functions related to the address type"
              },
              "fullyImplemented": true,
              "id": 1547,
              "linearizedBaseContracts": [1547],
              "name": "Address",
              "nameLocation": "202:7:16",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": {
                    "id": 1234,
                    "nodeType": "Block",
                    "src": "1241:254:16",
                    "statements": [
                      {
                        "expression": {
                          "commonType": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                          "id": 1232,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "expression": {
                                "id": 1228,
                                "name": "account",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1223,
                                "src": "1465:7:16",
                                "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                              },
                              "id": 1229,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "1473:4:16",
                              "memberName": "code",
                              "nodeType": "MemberAccess",
                              "src": "1465:12:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            "id": 1230,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1478:6:16",
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "1465:19:16",
                            "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 1231,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1487:1:16",
                            "typeDescriptions": { "typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0" },
                            "value": "0"
                          },
                          "src": "1465:23:16",
                          "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                        },
                        "functionReturnParameters": 1227,
                        "id": 1233,
                        "nodeType": "Return",
                        "src": "1458:30:16"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1221,
                    "nodeType": "StructuredDocumentation",
                    "src": "216:954:16",
                    "text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
                  },
                  "id": 1235,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "isContract",
                  "nameLocation": "1184:10:16",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1224,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1223,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "1203:7:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 1235,
                        "src": "1195:15:16",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 1222,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1195:7:16",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1194:17:16"
                  },
                  "returnParameters": {
                    "id": 1227,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1226,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1235,
                        "src": "1235:4:16",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" },
                        "typeName": {
                          "id": 1225,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "1235:4:16",
                          "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1234:6:16"
                  },
                  "scope": 1547,
                  "src": "1175:320:16",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1268,
                    "nodeType": "Block",
                    "src": "2483:241:16",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                              "id": 1250,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "arguments": [
                                    {
                                      "id": 1246,
                                      "name": "this",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -28,
                                      "src": "2509:4:16",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_Address_$1547",
                                        "typeString": "library Address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      { "typeIdentifier": "t_contract$_Address_$1547", "typeString": "library Address" }
                                    ],
                                    "id": 1245,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "2501:7:16",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 1244,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "2501:7:16",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 1247,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2501:13:16",
                                  "tryCall": false,
                                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                                },
                                "id": 1248,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "2515:7:16",
                                "memberName": "balance",
                                "nodeType": "MemberAccess",
                                "src": "2501:21:16",
                                "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "id": 1249,
                                "name": "amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1240,
                                "src": "2526:6:16",
                                "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                              },
                              "src": "2501:31:16",
                              "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                            },
                            {
                              "hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
                              "id": 1251,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2534:31:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
                                "typeString": "literal_string \"Address: insufficient balance\""
                              },
                              "value": "Address: insufficient balance"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              { "typeIdentifier": "t_bool", "typeString": "bool" },
                              {
                                "typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
                                "typeString": "literal_string \"Address: insufficient balance\""
                              }
                            ],
                            "id": 1243,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [-18, -18],
                            "referencedDeclaration": -18,
                            "src": "2493:7:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1252,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2493:73:16",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                        },
                        "id": 1253,
                        "nodeType": "ExpressionStatement",
                        "src": "2493:73:16"
                      },
                      {
                        "assignments": [1255, null],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1255,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "2583:7:16",
                            "nodeType": "VariableDeclaration",
                            "scope": 1268,
                            "src": "2578:12:16",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" },
                            "typeName": {
                              "id": 1254,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "2578:4:16",
                              "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                            },
                            "visibility": "internal"
                          },
                          null
                        ],
                        "id": 1262,
                        "initialValue": {
                          "arguments": [
                            {
                              "hexValue": "",
                              "id": 1260,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2626:2:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              },
                              "value": ""
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                  "typeString": "literal_string \"\""
                                }
                              ],
                              "expression": {
                                "id": 1256,
                                "name": "recipient",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1238,
                                "src": "2596:9:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "id": 1257,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "2606:4:16",
                              "memberName": "call",
                              "nodeType": "MemberAccess",
                              "src": "2596:14:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                              }
                            },
                            "id": 1259,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "names": ["value"],
                            "nodeType": "FunctionCallOptions",
                            "options": [
                              {
                                "id": 1258,
                                "name": "amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1240,
                                "src": "2618:6:16",
                                "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                              }
                            ],
                            "src": "2596:29:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                              "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                            }
                          },
                          "id": 1261,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2596:33:16",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2577:52:16"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1264,
                              "name": "success",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1255,
                              "src": "2647:7:16",
                              "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                            },
                            {
                              "hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
                              "id": 1265,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2656:60:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
                                "typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
                              },
                              "value": "Address: unable to send value, recipient may have reverted"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              { "typeIdentifier": "t_bool", "typeString": "bool" },
                              {
                                "typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
                                "typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
                              }
                            ],
                            "id": 1263,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [-18, -18],
                            "referencedDeclaration": -18,
                            "src": "2639:7:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1266,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2639:78:16",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                        },
                        "id": 1267,
                        "nodeType": "ExpressionStatement",
                        "src": "2639:78:16"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1236,
                    "nodeType": "StructuredDocumentation",
                    "src": "1501:906:16",
                    "text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
                  },
                  "id": 1269,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "sendValue",
                  "nameLocation": "2421:9:16",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1241,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1238,
                        "mutability": "mutable",
                        "name": "recipient",
                        "nameLocation": "2447:9:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 1269,
                        "src": "2431:25:16",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address_payable", "typeString": "address payable" },
                        "typeName": {
                          "id": 1237,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2431:15:16",
                          "stateMutability": "payable",
                          "typeDescriptions": { "typeIdentifier": "t_address_payable", "typeString": "address payable" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1240,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "2466:6:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 1269,
                        "src": "2458:14:16",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                        "typeName": {
                          "id": 1239,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2458:7:16",
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2430:43:16"
                  },
                  "returnParameters": { "id": 1242, "nodeType": "ParameterList", "parameters": [], "src": "2483:0:16" },
                  "scope": 1547,
                  "src": "2412:312:16",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1286,
                    "nodeType": "Block",
                    "src": "3555:96:16",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1280,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1272,
                              "src": "3594:6:16",
                              "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                            },
                            {
                              "id": 1281,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1274,
                              "src": "3602:4:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "hexValue": "30",
                              "id": 1282,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3608:1:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            {
                              "hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
                              "id": 1283,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3611:32:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
                                "typeString": "literal_string \"Address: low-level call failed\""
                              },
                              "value": "Address: low-level call failed"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              { "typeIdentifier": "t_address", "typeString": "address" },
                              { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory" },
                              { "typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0" },
                              {
                                "typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
                                "typeString": "literal_string \"Address: low-level call failed\""
                              }
                            ],
                            "id": 1279,
                            "name": "functionCallWithValue",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [1327, 1371],
                            "referencedDeclaration": 1371,
                            "src": "3572:21:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
                            }
                          },
                          "id": 1284,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3572:72:16",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory" }
                        },
                        "functionReturnParameters": 1278,
                        "id": 1285,
                        "nodeType": "Return",
                        "src": "3565:79:16"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1270,
                    "nodeType": "StructuredDocumentation",
                    "src": "2730:731:16",
                    "text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
                  },
                  "id": 1287,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionCall",
                  "nameLocation": "3475:12:16",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1275,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1272,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "3496:6:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 1287,
                        "src": "3488:14:16",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 1271,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3488:7:16",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1274,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "3517:4:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 1287,
                        "src": "3504:17:16",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes" },
                        "typeName": {
                          "id": 1273,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "3504:5:16",
                          "typeDescriptions": { "typeIdentifier": "t_bytes_storage_ptr", "typeString": "bytes" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3487:35:16"
                  },
                  "returnParameters": {
                    "id": 1278,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1277,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1287,
                        "src": "3541:12:16",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes" },
                        "typeName": {
                          "id": 1276,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "3541:5:16",
                          "typeDescriptions": { "typeIdentifier": "t_bytes_storage_ptr", "typeString": "bytes" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3540:14:16"
                  },
                  "scope": 1547,
                  "src": "3466:185:16",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1306,
                    "nodeType": "Block",
                    "src": "4020:76:16",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1300,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1290,
                              "src": "4059:6:16",
                              "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                            },
                            {
                              "id": 1301,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1292,
                              "src": "4067:4:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "hexValue": "30",
                              "id": 1302,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4073:1:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            {
                              "id": 1303,
                              "name": "errorMessage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1294,
                              "src": "4076:12:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              { "typeIdentifier": "t_address", "typeString": "address" },
                              { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory" },
                              { "typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0" },
                              { "typeIdentifier": "t_string_memory_ptr", "typeString": "string memory" }
                            ],
                            "id": 1299,
                            "name": "functionCallWithValue",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [1327, 1371],
                            "referencedDeclaration": 1371,
                            "src": "4037:21:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
                            }
                          },
                          "id": 1304,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4037:52:16",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory" }
                        },
                        "functionReturnParameters": 1298,
                        "id": 1305,
                        "nodeType": "Return",
                        "src": "4030:59:16"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1288,
                    "nodeType": "StructuredDocumentation",
                    "src": "3657:211:16",
                    "text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
                  },
                  "id": 1307,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionCall",
                  "nameLocation": "3882:12:16",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1295,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1290,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "3912:6:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 1307,
                        "src": "3904:14:16",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 1289,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3904:7:16",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1292,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "3941:4:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 1307,
                        "src": "3928:17:16",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes" },
                        "typeName": {
                          "id": 1291,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "3928:5:16",
                          "typeDescriptions": { "typeIdentifier": "t_bytes_storage_ptr", "typeString": "bytes" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1294,
                        "mutability": "mutable",
                        "name": "errorMessage",
                        "nameLocation": "3969:12:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 1307,
                        "src": "3955:26:16",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": { "typeIdentifier": "t_string_memory_ptr", "typeString": "string" },
                        "typeName": {
                          "id": 1293,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "3955:6:16",
                          "typeDescriptions": { "typeIdentifier": "t_string_storage_ptr", "typeString": "string" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3894:93:16"
                  },
                  "returnParameters": {
                    "id": 1298,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1297,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1307,
                        "src": "4006:12:16",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes" },
                        "typeName": {
                          "id": 1296,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "4006:5:16",
                          "typeDescriptions": { "typeIdentifier": "t_bytes_storage_ptr", "typeString": "bytes" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4005:14:16"
                  },
                  "scope": 1547,
                  "src": "3873:223:16",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1326,
                    "nodeType": "Block",
                    "src": "4601:111:16",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1320,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1310,
                              "src": "4640:6:16",
                              "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                            },
                            {
                              "id": 1321,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1312,
                              "src": "4648:4:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "id": 1322,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1314,
                              "src": "4654:5:16",
                              "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                            },
                            {
                              "hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
                              "id": 1323,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4661:43:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
                                "typeString": "literal_string \"Address: low-level call with value failed\""
                              },
                              "value": "Address: low-level call with value failed"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              { "typeIdentifier": "t_address", "typeString": "address" },
                              { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory" },
                              { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                              {
                                "typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
                                "typeString": "literal_string \"Address: low-level call with value failed\""
                              }
                            ],
                            "id": 1319,
                            "name": "functionCallWithValue",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [1327, 1371],
                            "referencedDeclaration": 1371,
                            "src": "4618:21:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
                            }
                          },
                          "id": 1324,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4618:87:16",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory" }
                        },
                        "functionReturnParameters": 1318,
                        "id": 1325,
                        "nodeType": "Return",
                        "src": "4611:94:16"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1308,
                    "nodeType": "StructuredDocumentation",
                    "src": "4102:351:16",
                    "text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
                  },
                  "id": 1327,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionCallWithValue",
                  "nameLocation": "4467:21:16",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1315,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1310,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "4506:6:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 1327,
                        "src": "4498:14:16",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 1309,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4498:7:16",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1312,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "4535:4:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 1327,
                        "src": "4522:17:16",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes" },
                        "typeName": {
                          "id": 1311,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "4522:5:16",
                          "typeDescriptions": { "typeIdentifier": "t_bytes_storage_ptr", "typeString": "bytes" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1314,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "4557:5:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 1327,
                        "src": "4549:13:16",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                        "typeName": {
                          "id": 1313,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4549:7:16",
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4488:80:16"
                  },
                  "returnParameters": {
                    "id": 1318,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1317,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1327,
                        "src": "4587:12:16",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes" },
                        "typeName": {
                          "id": 1316,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "4587:5:16",
                          "typeDescriptions": { "typeIdentifier": "t_bytes_storage_ptr", "typeString": "bytes" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4586:14:16"
                  },
                  "scope": 1547,
                  "src": "4458:254:16",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1370,
                    "nodeType": "Block",
                    "src": "5139:267:16",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                              "id": 1348,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "arguments": [
                                    {
                                      "id": 1344,
                                      "name": "this",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -28,
                                      "src": "5165:4:16",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_Address_$1547",
                                        "typeString": "library Address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      { "typeIdentifier": "t_contract$_Address_$1547", "typeString": "library Address" }
                                    ],
                                    "id": 1343,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "5157:7:16",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": {
                                      "id": 1342,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "5157:7:16",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 1345,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "5157:13:16",
                                  "tryCall": false,
                                  "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                                },
                                "id": 1346,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "5171:7:16",
                                "memberName": "balance",
                                "nodeType": "MemberAccess",
                                "src": "5157:21:16",
                                "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "id": 1347,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1334,
                                "src": "5182:5:16",
                                "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                              },
                              "src": "5157:30:16",
                              "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                            },
                            {
                              "hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
                              "id": 1349,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5189:40:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
                                "typeString": "literal_string \"Address: insufficient balance for call\""
                              },
                              "value": "Address: insufficient balance for call"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              { "typeIdentifier": "t_bool", "typeString": "bool" },
                              {
                                "typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
                                "typeString": "literal_string \"Address: insufficient balance for call\""
                              }
                            ],
                            "id": 1341,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [-18, -18],
                            "referencedDeclaration": -18,
                            "src": "5149:7:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1350,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5149:81:16",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                        },
                        "id": 1351,
                        "nodeType": "ExpressionStatement",
                        "src": "5149:81:16"
                      },
                      {
                        "assignments": [1353, 1355],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1353,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "5246:7:16",
                            "nodeType": "VariableDeclaration",
                            "scope": 1370,
                            "src": "5241:12:16",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" },
                            "typeName": {
                              "id": 1352,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "5241:4:16",
                              "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 1355,
                            "mutability": "mutable",
                            "name": "returndata",
                            "nameLocation": "5268:10:16",
                            "nodeType": "VariableDeclaration",
                            "scope": 1370,
                            "src": "5255:23:16",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes" },
                            "typeName": {
                              "id": 1354,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "5255:5:16",
                              "typeDescriptions": { "typeIdentifier": "t_bytes_storage_ptr", "typeString": "bytes" }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1362,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 1360,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1332,
                              "src": "5308:4:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [{ "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory" }],
                            "expression": {
                              "argumentTypes": [
                                { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory" }
                              ],
                              "expression": {
                                "id": 1356,
                                "name": "target",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1330,
                                "src": "5282:6:16",
                                "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                              },
                              "id": 1357,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "5289:4:16",
                              "memberName": "call",
                              "nodeType": "MemberAccess",
                              "src": "5282:11:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                              }
                            },
                            "id": 1359,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "names": ["value"],
                            "nodeType": "FunctionCallOptions",
                            "options": [
                              {
                                "id": 1358,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1334,
                                "src": "5301:5:16",
                                "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                              }
                            ],
                            "src": "5282:25:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                              "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                            }
                          },
                          "id": 1361,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5282:31:16",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5240:73:16"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1364,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1330,
                              "src": "5357:6:16",
                              "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                            },
                            {
                              "id": 1365,
                              "name": "success",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1353,
                              "src": "5365:7:16",
                              "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                            },
                            {
                              "id": 1366,
                              "name": "returndata",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1355,
                              "src": "5374:10:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "id": 1367,
                              "name": "errorMessage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1336,
                              "src": "5386:12:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              { "typeIdentifier": "t_address", "typeString": "address" },
                              { "typeIdentifier": "t_bool", "typeString": "bool" },
                              { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory" },
                              { "typeIdentifier": "t_string_memory_ptr", "typeString": "string memory" }
                            ],
                            "id": 1363,
                            "name": "verifyCallResultFromTarget",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1502,
                            "src": "5330:26:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
                            }
                          },
                          "id": 1368,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5330:69:16",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory" }
                        },
                        "functionReturnParameters": 1340,
                        "id": 1369,
                        "nodeType": "Return",
                        "src": "5323:76:16"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1328,
                    "nodeType": "StructuredDocumentation",
                    "src": "4718:237:16",
                    "text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
                  },
                  "id": 1371,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionCallWithValue",
                  "nameLocation": "4969:21:16",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1337,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1330,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "5008:6:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 1371,
                        "src": "5000:14:16",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 1329,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5000:7:16",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1332,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "5037:4:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 1371,
                        "src": "5024:17:16",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes" },
                        "typeName": {
                          "id": 1331,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "5024:5:16",
                          "typeDescriptions": { "typeIdentifier": "t_bytes_storage_ptr", "typeString": "bytes" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1334,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "5059:5:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 1371,
                        "src": "5051:13:16",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                        "typeName": {
                          "id": 1333,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5051:7:16",
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1336,
                        "mutability": "mutable",
                        "name": "errorMessage",
                        "nameLocation": "5088:12:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 1371,
                        "src": "5074:26:16",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": { "typeIdentifier": "t_string_memory_ptr", "typeString": "string" },
                        "typeName": {
                          "id": 1335,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "5074:6:16",
                          "typeDescriptions": { "typeIdentifier": "t_string_storage_ptr", "typeString": "string" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4990:116:16"
                  },
                  "returnParameters": {
                    "id": 1340,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1339,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1371,
                        "src": "5125:12:16",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes" },
                        "typeName": {
                          "id": 1338,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "5125:5:16",
                          "typeDescriptions": { "typeIdentifier": "t_bytes_storage_ptr", "typeString": "bytes" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5124:14:16"
                  },
                  "scope": 1547,
                  "src": "4960:446:16",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1387,
                    "nodeType": "Block",
                    "src": "5683:97:16",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1382,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1374,
                              "src": "5719:6:16",
                              "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                            },
                            {
                              "id": 1383,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1376,
                              "src": "5727:4:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
                              "id": 1384,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5733:39:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
                                "typeString": "literal_string \"Address: low-level static call failed\""
                              },
                              "value": "Address: low-level static call failed"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              { "typeIdentifier": "t_address", "typeString": "address" },
                              { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory" },
                              {
                                "typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
                                "typeString": "literal_string \"Address: low-level static call failed\""
                              }
                            ],
                            "id": 1381,
                            "name": "functionStaticCall",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [1388, 1417],
                            "referencedDeclaration": 1417,
                            "src": "5700:18:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
                            }
                          },
                          "id": 1385,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5700:73:16",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory" }
                        },
                        "functionReturnParameters": 1380,
                        "id": 1386,
                        "nodeType": "Return",
                        "src": "5693:80:16"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1372,
                    "nodeType": "StructuredDocumentation",
                    "src": "5412:166:16",
                    "text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
                  },
                  "id": 1388,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionStaticCall",
                  "nameLocation": "5592:18:16",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1377,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1374,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "5619:6:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 1388,
                        "src": "5611:14:16",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 1373,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5611:7:16",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1376,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "5640:4:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 1388,
                        "src": "5627:17:16",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes" },
                        "typeName": {
                          "id": 1375,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "5627:5:16",
                          "typeDescriptions": { "typeIdentifier": "t_bytes_storage_ptr", "typeString": "bytes" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5610:35:16"
                  },
                  "returnParameters": {
                    "id": 1380,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1379,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1388,
                        "src": "5669:12:16",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes" },
                        "typeName": {
                          "id": 1378,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "5669:5:16",
                          "typeDescriptions": { "typeIdentifier": "t_bytes_storage_ptr", "typeString": "bytes" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5668:14:16"
                  },
                  "scope": 1547,
                  "src": "5583:197:16",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1416,
                    "nodeType": "Block",
                    "src": "6122:168:16",
                    "statements": [
                      {
                        "assignments": [1401, 1403],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1401,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "6138:7:16",
                            "nodeType": "VariableDeclaration",
                            "scope": 1416,
                            "src": "6133:12:16",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" },
                            "typeName": {
                              "id": 1400,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "6133:4:16",
                              "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 1403,
                            "mutability": "mutable",
                            "name": "returndata",
                            "nameLocation": "6160:10:16",
                            "nodeType": "VariableDeclaration",
                            "scope": 1416,
                            "src": "6147:23:16",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes" },
                            "typeName": {
                              "id": 1402,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "6147:5:16",
                              "typeDescriptions": { "typeIdentifier": "t_bytes_storage_ptr", "typeString": "bytes" }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1408,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 1406,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1393,
                              "src": "6192:4:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [{ "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory" }],
                            "expression": {
                              "id": 1404,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1391,
                              "src": "6174:6:16",
                              "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                            },
                            "id": 1405,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "6181:10:16",
                            "memberName": "staticcall",
                            "nodeType": "MemberAccess",
                            "src": "6174:17:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory) view returns (bool,bytes memory)"
                            }
                          },
                          "id": 1407,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6174:23:16",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "6132:65:16"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1410,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1391,
                              "src": "6241:6:16",
                              "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                            },
                            {
                              "id": 1411,
                              "name": "success",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1401,
                              "src": "6249:7:16",
                              "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                            },
                            {
                              "id": 1412,
                              "name": "returndata",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1403,
                              "src": "6258:10:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "id": 1413,
                              "name": "errorMessage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1395,
                              "src": "6270:12:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              { "typeIdentifier": "t_address", "typeString": "address" },
                              { "typeIdentifier": "t_bool", "typeString": "bool" },
                              { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory" },
                              { "typeIdentifier": "t_string_memory_ptr", "typeString": "string memory" }
                            ],
                            "id": 1409,
                            "name": "verifyCallResultFromTarget",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1502,
                            "src": "6214:26:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
                            }
                          },
                          "id": 1414,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6214:69:16",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory" }
                        },
                        "functionReturnParameters": 1399,
                        "id": 1415,
                        "nodeType": "Return",
                        "src": "6207:76:16"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1389,
                    "nodeType": "StructuredDocumentation",
                    "src": "5786:173:16",
                    "text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
                  },
                  "id": 1417,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionStaticCall",
                  "nameLocation": "5973:18:16",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1396,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1391,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "6009:6:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 1417,
                        "src": "6001:14:16",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 1390,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6001:7:16",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1393,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "6038:4:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 1417,
                        "src": "6025:17:16",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes" },
                        "typeName": {
                          "id": 1392,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "6025:5:16",
                          "typeDescriptions": { "typeIdentifier": "t_bytes_storage_ptr", "typeString": "bytes" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1395,
                        "mutability": "mutable",
                        "name": "errorMessage",
                        "nameLocation": "6066:12:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 1417,
                        "src": "6052:26:16",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": { "typeIdentifier": "t_string_memory_ptr", "typeString": "string" },
                        "typeName": {
                          "id": 1394,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "6052:6:16",
                          "typeDescriptions": { "typeIdentifier": "t_string_storage_ptr", "typeString": "string" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5991:93:16"
                  },
                  "returnParameters": {
                    "id": 1399,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1398,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1417,
                        "src": "6108:12:16",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes" },
                        "typeName": {
                          "id": 1397,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "6108:5:16",
                          "typeDescriptions": { "typeIdentifier": "t_bytes_storage_ptr", "typeString": "bytes" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6107:14:16"
                  },
                  "scope": 1547,
                  "src": "5964:326:16",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1433,
                    "nodeType": "Block",
                    "src": "6566:101:16",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1428,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1420,
                              "src": "6604:6:16",
                              "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                            },
                            {
                              "id": 1429,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1422,
                              "src": "6612:4:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
                              "id": 1430,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "6618:41:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
                                "typeString": "literal_string \"Address: low-level delegate call failed\""
                              },
                              "value": "Address: low-level delegate call failed"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              { "typeIdentifier": "t_address", "typeString": "address" },
                              { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory" },
                              {
                                "typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
                                "typeString": "literal_string \"Address: low-level delegate call failed\""
                              }
                            ],
                            "id": 1427,
                            "name": "functionDelegateCall",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [1434, 1463],
                            "referencedDeclaration": 1463,
                            "src": "6583:20:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
                            }
                          },
                          "id": 1431,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6583:77:16",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory" }
                        },
                        "functionReturnParameters": 1426,
                        "id": 1432,
                        "nodeType": "Return",
                        "src": "6576:84:16"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1418,
                    "nodeType": "StructuredDocumentation",
                    "src": "6296:168:16",
                    "text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
                  },
                  "id": 1434,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionDelegateCall",
                  "nameLocation": "6478:20:16",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1423,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1420,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "6507:6:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 1434,
                        "src": "6499:14:16",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 1419,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6499:7:16",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1422,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "6528:4:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 1434,
                        "src": "6515:17:16",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes" },
                        "typeName": {
                          "id": 1421,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "6515:5:16",
                          "typeDescriptions": { "typeIdentifier": "t_bytes_storage_ptr", "typeString": "bytes" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6498:35:16"
                  },
                  "returnParameters": {
                    "id": 1426,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1425,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1434,
                        "src": "6552:12:16",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes" },
                        "typeName": {
                          "id": 1424,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "6552:5:16",
                          "typeDescriptions": { "typeIdentifier": "t_bytes_storage_ptr", "typeString": "bytes" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6551:14:16"
                  },
                  "scope": 1547,
                  "src": "6469:198:16",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1462,
                    "nodeType": "Block",
                    "src": "7008:170:16",
                    "statements": [
                      {
                        "assignments": [1447, 1449],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1447,
                            "mutability": "mutable",
                            "name": "success",
                            "nameLocation": "7024:7:16",
                            "nodeType": "VariableDeclaration",
                            "scope": 1462,
                            "src": "7019:12:16",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" },
                            "typeName": {
                              "id": 1446,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "7019:4:16",
                              "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 1449,
                            "mutability": "mutable",
                            "name": "returndata",
                            "nameLocation": "7046:10:16",
                            "nodeType": "VariableDeclaration",
                            "scope": 1462,
                            "src": "7033:23:16",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes" },
                            "typeName": {
                              "id": 1448,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "7033:5:16",
                              "typeDescriptions": { "typeIdentifier": "t_bytes_storage_ptr", "typeString": "bytes" }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1454,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 1452,
                              "name": "data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1439,
                              "src": "7080:4:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [{ "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory" }],
                            "expression": {
                              "id": 1450,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1437,
                              "src": "7060:6:16",
                              "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                            },
                            "id": 1451,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "7067:12:16",
                            "memberName": "delegatecall",
                            "nodeType": "MemberAccess",
                            "src": "7060:19:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory) returns (bool,bytes memory)"
                            }
                          },
                          "id": 1453,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7060:25:16",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "tuple(bool,bytes memory)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "7018:67:16"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1456,
                              "name": "target",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1437,
                              "src": "7129:6:16",
                              "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                            },
                            {
                              "id": 1457,
                              "name": "success",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1447,
                              "src": "7137:7:16",
                              "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                            },
                            {
                              "id": 1458,
                              "name": "returndata",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1449,
                              "src": "7146:10:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "id": 1459,
                              "name": "errorMessage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1441,
                              "src": "7158:12:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              { "typeIdentifier": "t_address", "typeString": "address" },
                              { "typeIdentifier": "t_bool", "typeString": "bool" },
                              { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory" },
                              { "typeIdentifier": "t_string_memory_ptr", "typeString": "string memory" }
                            ],
                            "id": 1455,
                            "name": "verifyCallResultFromTarget",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1502,
                            "src": "7102:26:16",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
                            }
                          },
                          "id": 1460,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7102:69:16",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory" }
                        },
                        "functionReturnParameters": 1445,
                        "id": 1461,
                        "nodeType": "Return",
                        "src": "7095:76:16"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1435,
                    "nodeType": "StructuredDocumentation",
                    "src": "6673:175:16",
                    "text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
                  },
                  "id": 1463,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "functionDelegateCall",
                  "nameLocation": "6862:20:16",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1442,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1437,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "6900:6:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 1463,
                        "src": "6892:14:16",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 1436,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6892:7:16",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1439,
                        "mutability": "mutable",
                        "name": "data",
                        "nameLocation": "6929:4:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 1463,
                        "src": "6916:17:16",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes" },
                        "typeName": {
                          "id": 1438,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "6916:5:16",
                          "typeDescriptions": { "typeIdentifier": "t_bytes_storage_ptr", "typeString": "bytes" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1441,
                        "mutability": "mutable",
                        "name": "errorMessage",
                        "nameLocation": "6957:12:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 1463,
                        "src": "6943:26:16",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": { "typeIdentifier": "t_string_memory_ptr", "typeString": "string" },
                        "typeName": {
                          "id": 1440,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "6943:6:16",
                          "typeDescriptions": { "typeIdentifier": "t_string_storage_ptr", "typeString": "string" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6882:93:16"
                  },
                  "returnParameters": {
                    "id": 1445,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1444,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1463,
                        "src": "6994:12:16",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes" },
                        "typeName": {
                          "id": 1443,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "6994:5:16",
                          "typeDescriptions": { "typeIdentifier": "t_bytes_storage_ptr", "typeString": "bytes" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6993:14:16"
                  },
                  "scope": 1547,
                  "src": "6853:325:16",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1501,
                    "nodeType": "Block",
                    "src": "7660:434:16",
                    "statements": [
                      {
                        "condition": {
                          "id": 1477,
                          "name": "success",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1468,
                          "src": "7674:7:16",
                          "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                        },
                        "falseBody": {
                          "id": 1499,
                          "nodeType": "Block",
                          "src": "8030:58:16",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 1495,
                                    "name": "returndata",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1470,
                                    "src": "8052:10:16",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  },
                                  {
                                    "id": 1496,
                                    "name": "errorMessage",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1472,
                                    "src": "8064:12:16",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory" },
                                    { "typeIdentifier": "t_string_memory_ptr", "typeString": "string memory" }
                                  ],
                                  "id": 1494,
                                  "name": "_revert",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1546,
                                  "src": "8044:7:16",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
                                    "typeString": "function (bytes memory,string memory) pure"
                                  }
                                },
                                "id": 1497,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "8044:33:16",
                                "tryCall": false,
                                "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                              },
                              "id": 1498,
                              "nodeType": "ExpressionStatement",
                              "src": "8044:33:16"
                            }
                          ]
                        },
                        "id": 1500,
                        "nodeType": "IfStatement",
                        "src": "7670:418:16",
                        "trueBody": {
                          "id": 1493,
                          "nodeType": "Block",
                          "src": "7683:341:16",
                          "statements": [
                            {
                              "condition": {
                                "commonType": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                                "id": 1481,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "id": 1478,
                                    "name": "returndata",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1470,
                                    "src": "7701:10:16",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  },
                                  "id": 1479,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "7712:6:16",
                                  "memberName": "length",
                                  "nodeType": "MemberAccess",
                                  "src": "7701:17:16",
                                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "hexValue": "30",
                                  "id": 1480,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "7722:1:16",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "src": "7701:22:16",
                                "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                              },
                              "id": 1490,
                              "nodeType": "IfStatement",
                              "src": "7697:286:16",
                              "trueBody": {
                                "id": 1489,
                                "nodeType": "Block",
                                "src": "7725:258:16",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "id": 1484,
                                              "name": "target",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1466,
                                              "src": "7927:6:16",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              }
                                            }
                                          ],
                                          "expression": {
                                            "argumentTypes": [
                                              { "typeIdentifier": "t_address", "typeString": "address" }
                                            ],
                                            "id": 1483,
                                            "name": "isContract",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1235,
                                            "src": "7916:10:16",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                                              "typeString": "function (address) view returns (bool)"
                                            }
                                          },
                                          "id": 1485,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "kind": "functionCall",
                                          "lValueRequested": false,
                                          "nameLocations": [],
                                          "names": [],
                                          "nodeType": "FunctionCall",
                                          "src": "7916:18:16",
                                          "tryCall": false,
                                          "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                                        },
                                        {
                                          "hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
                                          "id": 1486,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "string",
                                          "lValueRequested": false,
                                          "nodeType": "Literal",
                                          "src": "7936:31:16",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
                                            "typeString": "literal_string \"Address: call to non-contract\""
                                          },
                                          "value": "Address: call to non-contract"
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          { "typeIdentifier": "t_bool", "typeString": "bool" },
                                          {
                                            "typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
                                            "typeString": "literal_string \"Address: call to non-contract\""
                                          }
                                        ],
                                        "id": 1482,
                                        "name": "require",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [-18, -18],
                                        "referencedDeclaration": -18,
                                        "src": "7908:7:16",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                                          "typeString": "function (bool,string memory) pure"
                                        }
                                      },
                                      "id": 1487,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "nameLocations": [],
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "7908:60:16",
                                      "tryCall": false,
                                      "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                                    },
                                    "id": 1488,
                                    "nodeType": "ExpressionStatement",
                                    "src": "7908:60:16"
                                  }
                                ]
                              }
                            },
                            {
                              "expression": {
                                "id": 1491,
                                "name": "returndata",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1470,
                                "src": "8003:10:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "functionReturnParameters": 1476,
                              "id": 1492,
                              "nodeType": "Return",
                              "src": "7996:17:16"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1464,
                    "nodeType": "StructuredDocumentation",
                    "src": "7184:277:16",
                    "text": " @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"
                  },
                  "id": 1502,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "verifyCallResultFromTarget",
                  "nameLocation": "7475:26:16",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1473,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1466,
                        "mutability": "mutable",
                        "name": "target",
                        "nameLocation": "7519:6:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 1502,
                        "src": "7511:14:16",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 1465,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "7511:7:16",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1468,
                        "mutability": "mutable",
                        "name": "success",
                        "nameLocation": "7540:7:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 1502,
                        "src": "7535:12:16",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" },
                        "typeName": {
                          "id": 1467,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "7535:4:16",
                          "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1470,
                        "mutability": "mutable",
                        "name": "returndata",
                        "nameLocation": "7570:10:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 1502,
                        "src": "7557:23:16",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes" },
                        "typeName": {
                          "id": 1469,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "7557:5:16",
                          "typeDescriptions": { "typeIdentifier": "t_bytes_storage_ptr", "typeString": "bytes" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1472,
                        "mutability": "mutable",
                        "name": "errorMessage",
                        "nameLocation": "7604:12:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 1502,
                        "src": "7590:26:16",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": { "typeIdentifier": "t_string_memory_ptr", "typeString": "string" },
                        "typeName": {
                          "id": 1471,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "7590:6:16",
                          "typeDescriptions": { "typeIdentifier": "t_string_storage_ptr", "typeString": "string" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7501:121:16"
                  },
                  "returnParameters": {
                    "id": 1476,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1475,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1502,
                        "src": "7646:12:16",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes" },
                        "typeName": {
                          "id": 1474,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "7646:5:16",
                          "typeDescriptions": { "typeIdentifier": "t_bytes_storage_ptr", "typeString": "bytes" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7645:14:16"
                  },
                  "scope": 1547,
                  "src": "7466:628:16",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1525,
                    "nodeType": "Block",
                    "src": "8475:135:16",
                    "statements": [
                      {
                        "condition": {
                          "id": 1514,
                          "name": "success",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1505,
                          "src": "8489:7:16",
                          "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                        },
                        "falseBody": {
                          "id": 1523,
                          "nodeType": "Block",
                          "src": "8546:58:16",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 1519,
                                    "name": "returndata",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1507,
                                    "src": "8568:10:16",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  },
                                  {
                                    "id": 1520,
                                    "name": "errorMessage",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1509,
                                    "src": "8580:12:16",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory" },
                                    { "typeIdentifier": "t_string_memory_ptr", "typeString": "string memory" }
                                  ],
                                  "id": 1518,
                                  "name": "_revert",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1546,
                                  "src": "8560:7:16",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
                                    "typeString": "function (bytes memory,string memory) pure"
                                  }
                                },
                                "id": 1521,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "8560:33:16",
                                "tryCall": false,
                                "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                              },
                              "id": 1522,
                              "nodeType": "ExpressionStatement",
                              "src": "8560:33:16"
                            }
                          ]
                        },
                        "id": 1524,
                        "nodeType": "IfStatement",
                        "src": "8485:119:16",
                        "trueBody": {
                          "id": 1517,
                          "nodeType": "Block",
                          "src": "8498:42:16",
                          "statements": [
                            {
                              "expression": {
                                "id": 1515,
                                "name": "returndata",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1507,
                                "src": "8519:10:16",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "functionReturnParameters": 1513,
                              "id": 1516,
                              "nodeType": "Return",
                              "src": "8512:17:16"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1503,
                    "nodeType": "StructuredDocumentation",
                    "src": "8100:210:16",
                    "text": " @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"
                  },
                  "id": 1526,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "verifyCallResult",
                  "nameLocation": "8324:16:16",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1510,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1505,
                        "mutability": "mutable",
                        "name": "success",
                        "nameLocation": "8355:7:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 1526,
                        "src": "8350:12:16",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" },
                        "typeName": {
                          "id": 1504,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "8350:4:16",
                          "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1507,
                        "mutability": "mutable",
                        "name": "returndata",
                        "nameLocation": "8385:10:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 1526,
                        "src": "8372:23:16",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes" },
                        "typeName": {
                          "id": 1506,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "8372:5:16",
                          "typeDescriptions": { "typeIdentifier": "t_bytes_storage_ptr", "typeString": "bytes" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1509,
                        "mutability": "mutable",
                        "name": "errorMessage",
                        "nameLocation": "8419:12:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 1526,
                        "src": "8405:26:16",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": { "typeIdentifier": "t_string_memory_ptr", "typeString": "string" },
                        "typeName": {
                          "id": 1508,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "8405:6:16",
                          "typeDescriptions": { "typeIdentifier": "t_string_storage_ptr", "typeString": "string" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "8340:97:16"
                  },
                  "returnParameters": {
                    "id": 1513,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1512,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1526,
                        "src": "8461:12:16",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes" },
                        "typeName": {
                          "id": 1511,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "8461:5:16",
                          "typeDescriptions": { "typeIdentifier": "t_bytes_storage_ptr", "typeString": "bytes" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "8460:14:16"
                  },
                  "scope": 1547,
                  "src": "8315:295:16",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1545,
                    "nodeType": "Block",
                    "src": "8699:457:16",
                    "statements": [
                      {
                        "condition": {
                          "commonType": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                          "id": 1536,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 1533,
                              "name": "returndata",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1528,
                              "src": "8775:10:16",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            "id": 1534,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "8786:6:16",
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "8775:17:16",
                            "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 1535,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "8795:1:16",
                            "typeDescriptions": { "typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0" },
                            "value": "0"
                          },
                          "src": "8775:21:16",
                          "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                        },
                        "falseBody": {
                          "id": 1543,
                          "nodeType": "Block",
                          "src": "9105:45:16",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 1540,
                                    "name": "errorMessage",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1530,
                                    "src": "9126:12:16",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_string_memory_ptr",
                                      "typeString": "string memory"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    { "typeIdentifier": "t_string_memory_ptr", "typeString": "string memory" }
                                  ],
                                  "id": 1539,
                                  "name": "revert",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [-19, -19],
                                  "referencedDeclaration": -19,
                                  "src": "9119:6:16",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
                                    "typeString": "function (string memory) pure"
                                  }
                                },
                                "id": 1541,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "9119:20:16",
                                "tryCall": false,
                                "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                              },
                              "id": 1542,
                              "nodeType": "ExpressionStatement",
                              "src": "9119:20:16"
                            }
                          ]
                        },
                        "id": 1544,
                        "nodeType": "IfStatement",
                        "src": "8771:379:16",
                        "trueBody": {
                          "id": 1538,
                          "nodeType": "Block",
                          "src": "8798:301:16",
                          "statements": [
                            {
                              "AST": {
                                "nodeType": "YulBlock",
                                "src": "8956:133:16",
                                "statements": [
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "8974:40:16",
                                    "value": {
                                      "arguments": [
                                        { "name": "returndata", "nodeType": "YulIdentifier", "src": "9003:10:16" }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "8997:5:16"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8997:17:16"
                                    },
                                    "variables": [
                                      {
                                        "name": "returndata_size",
                                        "nodeType": "YulTypedName",
                                        "src": "8978:15:16",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "9042:2:16",
                                              "type": "",
                                              "value": "32"
                                            },
                                            { "name": "returndata", "nodeType": "YulIdentifier", "src": "9046:10:16" }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "9038:3:16"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "9038:19:16"
                                        },
                                        { "name": "returndata_size", "nodeType": "YulIdentifier", "src": "9059:15:16" }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "9031:6:16"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "9031:44:16"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "9031:44:16"
                                  }
                                ]
                              },
                              "documentation": "@solidity memory-safe-assembly",
                              "evmVersion": "london",
                              "externalReferences": [
                                {
                                  "declaration": 1528,
                                  "isOffset": false,
                                  "isSlot": false,
                                  "src": "9003:10:16",
                                  "valueSize": 1
                                },
                                {
                                  "declaration": 1528,
                                  "isOffset": false,
                                  "isSlot": false,
                                  "src": "9046:10:16",
                                  "valueSize": 1
                                }
                              ],
                              "id": 1537,
                              "nodeType": "InlineAssembly",
                              "src": "8947:142:16"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "id": 1546,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_revert",
                  "nameLocation": "8625:7:16",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1531,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1528,
                        "mutability": "mutable",
                        "name": "returndata",
                        "nameLocation": "8646:10:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 1546,
                        "src": "8633:23:16",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": { "typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes" },
                        "typeName": {
                          "id": 1527,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "8633:5:16",
                          "typeDescriptions": { "typeIdentifier": "t_bytes_storage_ptr", "typeString": "bytes" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1530,
                        "mutability": "mutable",
                        "name": "errorMessage",
                        "nameLocation": "8672:12:16",
                        "nodeType": "VariableDeclaration",
                        "scope": 1546,
                        "src": "8658:26:16",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": { "typeIdentifier": "t_string_memory_ptr", "typeString": "string" },
                        "typeName": {
                          "id": 1529,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "8658:6:16",
                          "typeDescriptions": { "typeIdentifier": "t_string_storage_ptr", "typeString": "string" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "8632:53:16"
                  },
                  "returnParameters": { "id": 1532, "nodeType": "ParameterList", "parameters": [], "src": "8699:0:16" },
                  "scope": 1547,
                  "src": "8616:540:16",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "private"
                }
              ],
              "scope": 1548,
              "src": "194:8964:16",
              "usedErrors": []
            }
          ],
          "src": "101:9058:16"
        },
        "id": 16
      },
      "@openzeppelin/contracts/utils/Context.sol": {
        "ast": {
          "absolutePath": "@openzeppelin/contracts/utils/Context.sol",
          "exportedSymbols": { "Context": [1569] },
          "id": 1570,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1549,
              "literals": ["solidity", "^", "0.8", ".0"],
              "nodeType": "PragmaDirective",
              "src": "86:23:17"
            },
            {
              "abstract": true,
              "baseContracts": [],
              "canonicalName": "Context",
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 1550,
                "nodeType": "StructuredDocumentation",
                "src": "111:496:17",
                "text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
              },
              "fullyImplemented": true,
              "id": 1569,
              "linearizedBaseContracts": [1569],
              "name": "Context",
              "nameLocation": "626:7:17",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": {
                    "id": 1558,
                    "nodeType": "Block",
                    "src": "702:34:17",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "id": 1555,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "719:3:17",
                            "typeDescriptions": { "typeIdentifier": "t_magic_message", "typeString": "msg" }
                          },
                          "id": 1556,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "723:6:17",
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "719:10:17",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "functionReturnParameters": 1554,
                        "id": 1557,
                        "nodeType": "Return",
                        "src": "712:17:17"
                      }
                    ]
                  },
                  "id": 1559,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_msgSender",
                  "nameLocation": "649:10:17",
                  "nodeType": "FunctionDefinition",
                  "parameters": { "id": 1551, "nodeType": "ParameterList", "parameters": [], "src": "659:2:17" },
                  "returnParameters": {
                    "id": 1554,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1553,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1559,
                        "src": "693:7:17",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 1552,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "693:7:17",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "692:9:17"
                  },
                  "scope": 1569,
                  "src": "640:96:17",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1567,
                    "nodeType": "Block",
                    "src": "809:32:17",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "id": 1564,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "826:3:17",
                            "typeDescriptions": { "typeIdentifier": "t_magic_message", "typeString": "msg" }
                          },
                          "id": 1565,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "830:4:17",
                          "memberName": "data",
                          "nodeType": "MemberAccess",
                          "src": "826:8:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_calldata_ptr",
                            "typeString": "bytes calldata"
                          }
                        },
                        "functionReturnParameters": 1563,
                        "id": 1566,
                        "nodeType": "Return",
                        "src": "819:15:17"
                      }
                    ]
                  },
                  "id": 1568,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_msgData",
                  "nameLocation": "751:8:17",
                  "nodeType": "FunctionDefinition",
                  "parameters": { "id": 1560, "nodeType": "ParameterList", "parameters": [], "src": "759:2:17" },
                  "returnParameters": {
                    "id": 1563,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1562,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1568,
                        "src": "793:14:17",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": { "typeIdentifier": "t_bytes_calldata_ptr", "typeString": "bytes" },
                        "typeName": {
                          "id": 1561,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "793:5:17",
                          "typeDescriptions": { "typeIdentifier": "t_bytes_storage_ptr", "typeString": "bytes" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "792:16:17"
                  },
                  "scope": 1569,
                  "src": "742:99:17",
                  "stateMutability": "view",
                  "virtual": true,
                  "visibility": "internal"
                }
              ],
              "scope": 1570,
              "src": "608:235:17",
              "usedErrors": []
            }
          ],
          "src": "86:758:17"
        },
        "id": 17
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol": {
        "ast": {
          "absolutePath": "@openzeppelin/contracts/utils/StorageSlot.sol",
          "exportedSymbols": { "StorageSlot": [1629] },
          "id": 1630,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1571,
              "literals": ["solidity", "^", "0.8", ".0"],
              "nodeType": "PragmaDirective",
              "src": "105:23:18"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "StorageSlot",
              "contractDependencies": [],
              "contractKind": "library",
              "documentation": {
                "id": 1572,
                "nodeType": "StructuredDocumentation",
                "src": "130:1148:18",
                "text": " @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._"
              },
              "fullyImplemented": true,
              "id": 1629,
              "linearizedBaseContracts": [1629],
              "name": "StorageSlot",
              "nameLocation": "1287:11:18",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "canonicalName": "StorageSlot.AddressSlot",
                  "id": 1575,
                  "members": [
                    {
                      "constant": false,
                      "id": 1574,
                      "mutability": "mutable",
                      "name": "value",
                      "nameLocation": "1342:5:18",
                      "nodeType": "VariableDeclaration",
                      "scope": 1575,
                      "src": "1334:13:18",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                      "typeName": {
                        "id": 1573,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1334:7:18",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "AddressSlot",
                  "nameLocation": "1312:11:18",
                  "nodeType": "StructDefinition",
                  "scope": 1629,
                  "src": "1305:49:18",
                  "visibility": "public"
                },
                {
                  "canonicalName": "StorageSlot.BooleanSlot",
                  "id": 1578,
                  "members": [
                    {
                      "constant": false,
                      "id": 1577,
                      "mutability": "mutable",
                      "name": "value",
                      "nameLocation": "1394:5:18",
                      "nodeType": "VariableDeclaration",
                      "scope": 1578,
                      "src": "1389:10:18",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" },
                      "typeName": {
                        "id": 1576,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "1389:4:18",
                        "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "BooleanSlot",
                  "nameLocation": "1367:11:18",
                  "nodeType": "StructDefinition",
                  "scope": 1629,
                  "src": "1360:46:18",
                  "visibility": "public"
                },
                {
                  "canonicalName": "StorageSlot.Bytes32Slot",
                  "id": 1581,
                  "members": [
                    {
                      "constant": false,
                      "id": 1580,
                      "mutability": "mutable",
                      "name": "value",
                      "nameLocation": "1449:5:18",
                      "nodeType": "VariableDeclaration",
                      "scope": 1581,
                      "src": "1441:13:18",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": { "typeIdentifier": "t_bytes32", "typeString": "bytes32" },
                      "typeName": {
                        "id": 1579,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "1441:7:18",
                        "typeDescriptions": { "typeIdentifier": "t_bytes32", "typeString": "bytes32" }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "Bytes32Slot",
                  "nameLocation": "1419:11:18",
                  "nodeType": "StructDefinition",
                  "scope": 1629,
                  "src": "1412:49:18",
                  "visibility": "public"
                },
                {
                  "canonicalName": "StorageSlot.Uint256Slot",
                  "id": 1584,
                  "members": [
                    {
                      "constant": false,
                      "id": 1583,
                      "mutability": "mutable",
                      "name": "value",
                      "nameLocation": "1504:5:18",
                      "nodeType": "VariableDeclaration",
                      "scope": 1584,
                      "src": "1496:13:18",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                      "typeName": {
                        "id": 1582,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1496:7:18",
                        "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "Uint256Slot",
                  "nameLocation": "1474:11:18",
                  "nodeType": "StructDefinition",
                  "scope": 1629,
                  "src": "1467:49:18",
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1594,
                    "nodeType": "Block",
                    "src": "1698:106:18",
                    "statements": [
                      {
                        "AST": {
                          "nodeType": "YulBlock",
                          "src": "1760:38:18",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "1774:14:18",
                              "value": { "name": "slot", "nodeType": "YulIdentifier", "src": "1784:4:18" },
                              "variableNames": [{ "name": "r.slot", "nodeType": "YulIdentifier", "src": "1774:6:18" }]
                            }
                          ]
                        },
                        "documentation": "@solidity memory-safe-assembly",
                        "evmVersion": "london",
                        "externalReferences": [
                          {
                            "declaration": 1591,
                            "isOffset": false,
                            "isSlot": true,
                            "src": "1774:6:18",
                            "suffix": "slot",
                            "valueSize": 1
                          },
                          {
                            "declaration": 1587,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "1784:4:18",
                            "valueSize": 1
                          }
                        ],
                        "id": 1593,
                        "nodeType": "InlineAssembly",
                        "src": "1751:47:18"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1585,
                    "nodeType": "StructuredDocumentation",
                    "src": "1522:87:18",
                    "text": " @dev Returns an `AddressSlot` with member `value` located at `slot`."
                  },
                  "id": 1595,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getAddressSlot",
                  "nameLocation": "1623:14:18",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1588,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1587,
                        "mutability": "mutable",
                        "name": "slot",
                        "nameLocation": "1646:4:18",
                        "nodeType": "VariableDeclaration",
                        "scope": 1595,
                        "src": "1638:12:18",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_bytes32", "typeString": "bytes32" },
                        "typeName": {
                          "id": 1586,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "1638:7:18",
                          "typeDescriptions": { "typeIdentifier": "t_bytes32", "typeString": "bytes32" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1637:14:18"
                  },
                  "returnParameters": {
                    "id": 1592,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1591,
                        "mutability": "mutable",
                        "name": "r",
                        "nameLocation": "1695:1:18",
                        "nodeType": "VariableDeclaration",
                        "scope": 1595,
                        "src": "1675:21:18",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_AddressSlot_$1575_storage_ptr",
                          "typeString": "struct StorageSlot.AddressSlot"
                        },
                        "typeName": {
                          "id": 1590,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 1589,
                            "name": "AddressSlot",
                            "nameLocations": ["1675:11:18"],
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 1575,
                            "src": "1675:11:18"
                          },
                          "referencedDeclaration": 1575,
                          "src": "1675:11:18",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_AddressSlot_$1575_storage_ptr",
                            "typeString": "struct StorageSlot.AddressSlot"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1674:23:18"
                  },
                  "scope": 1629,
                  "src": "1614:190:18",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1605,
                    "nodeType": "Block",
                    "src": "1986:106:18",
                    "statements": [
                      {
                        "AST": {
                          "nodeType": "YulBlock",
                          "src": "2048:38:18",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "2062:14:18",
                              "value": { "name": "slot", "nodeType": "YulIdentifier", "src": "2072:4:18" },
                              "variableNames": [{ "name": "r.slot", "nodeType": "YulIdentifier", "src": "2062:6:18" }]
                            }
                          ]
                        },
                        "documentation": "@solidity memory-safe-assembly",
                        "evmVersion": "london",
                        "externalReferences": [
                          {
                            "declaration": 1602,
                            "isOffset": false,
                            "isSlot": true,
                            "src": "2062:6:18",
                            "suffix": "slot",
                            "valueSize": 1
                          },
                          {
                            "declaration": 1598,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "2072:4:18",
                            "valueSize": 1
                          }
                        ],
                        "id": 1604,
                        "nodeType": "InlineAssembly",
                        "src": "2039:47:18"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1596,
                    "nodeType": "StructuredDocumentation",
                    "src": "1810:87:18",
                    "text": " @dev Returns an `BooleanSlot` with member `value` located at `slot`."
                  },
                  "id": 1606,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getBooleanSlot",
                  "nameLocation": "1911:14:18",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1599,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1598,
                        "mutability": "mutable",
                        "name": "slot",
                        "nameLocation": "1934:4:18",
                        "nodeType": "VariableDeclaration",
                        "scope": 1606,
                        "src": "1926:12:18",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_bytes32", "typeString": "bytes32" },
                        "typeName": {
                          "id": 1597,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "1926:7:18",
                          "typeDescriptions": { "typeIdentifier": "t_bytes32", "typeString": "bytes32" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1925:14:18"
                  },
                  "returnParameters": {
                    "id": 1603,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1602,
                        "mutability": "mutable",
                        "name": "r",
                        "nameLocation": "1983:1:18",
                        "nodeType": "VariableDeclaration",
                        "scope": 1606,
                        "src": "1963:21:18",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_BooleanSlot_$1578_storage_ptr",
                          "typeString": "struct StorageSlot.BooleanSlot"
                        },
                        "typeName": {
                          "id": 1601,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 1600,
                            "name": "BooleanSlot",
                            "nameLocations": ["1963:11:18"],
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 1578,
                            "src": "1963:11:18"
                          },
                          "referencedDeclaration": 1578,
                          "src": "1963:11:18",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_BooleanSlot_$1578_storage_ptr",
                            "typeString": "struct StorageSlot.BooleanSlot"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1962:23:18"
                  },
                  "scope": 1629,
                  "src": "1902:190:18",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1616,
                    "nodeType": "Block",
                    "src": "2274:106:18",
                    "statements": [
                      {
                        "AST": {
                          "nodeType": "YulBlock",
                          "src": "2336:38:18",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "2350:14:18",
                              "value": { "name": "slot", "nodeType": "YulIdentifier", "src": "2360:4:18" },
                              "variableNames": [{ "name": "r.slot", "nodeType": "YulIdentifier", "src": "2350:6:18" }]
                            }
                          ]
                        },
                        "documentation": "@solidity memory-safe-assembly",
                        "evmVersion": "london",
                        "externalReferences": [
                          {
                            "declaration": 1613,
                            "isOffset": false,
                            "isSlot": true,
                            "src": "2350:6:18",
                            "suffix": "slot",
                            "valueSize": 1
                          },
                          {
                            "declaration": 1609,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "2360:4:18",
                            "valueSize": 1
                          }
                        ],
                        "id": 1615,
                        "nodeType": "InlineAssembly",
                        "src": "2327:47:18"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1607,
                    "nodeType": "StructuredDocumentation",
                    "src": "2098:87:18",
                    "text": " @dev Returns an `Bytes32Slot` with member `value` located at `slot`."
                  },
                  "id": 1617,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getBytes32Slot",
                  "nameLocation": "2199:14:18",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1610,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1609,
                        "mutability": "mutable",
                        "name": "slot",
                        "nameLocation": "2222:4:18",
                        "nodeType": "VariableDeclaration",
                        "scope": 1617,
                        "src": "2214:12:18",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_bytes32", "typeString": "bytes32" },
                        "typeName": {
                          "id": 1608,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "2214:7:18",
                          "typeDescriptions": { "typeIdentifier": "t_bytes32", "typeString": "bytes32" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2213:14:18"
                  },
                  "returnParameters": {
                    "id": 1614,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1613,
                        "mutability": "mutable",
                        "name": "r",
                        "nameLocation": "2271:1:18",
                        "nodeType": "VariableDeclaration",
                        "scope": 1617,
                        "src": "2251:21:18",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Bytes32Slot_$1581_storage_ptr",
                          "typeString": "struct StorageSlot.Bytes32Slot"
                        },
                        "typeName": {
                          "id": 1612,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 1611,
                            "name": "Bytes32Slot",
                            "nameLocations": ["2251:11:18"],
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 1581,
                            "src": "2251:11:18"
                          },
                          "referencedDeclaration": 1581,
                          "src": "2251:11:18",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Bytes32Slot_$1581_storage_ptr",
                            "typeString": "struct StorageSlot.Bytes32Slot"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2250:23:18"
                  },
                  "scope": 1629,
                  "src": "2190:190:18",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1627,
                    "nodeType": "Block",
                    "src": "2562:106:18",
                    "statements": [
                      {
                        "AST": {
                          "nodeType": "YulBlock",
                          "src": "2624:38:18",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "2638:14:18",
                              "value": { "name": "slot", "nodeType": "YulIdentifier", "src": "2648:4:18" },
                              "variableNames": [{ "name": "r.slot", "nodeType": "YulIdentifier", "src": "2638:6:18" }]
                            }
                          ]
                        },
                        "documentation": "@solidity memory-safe-assembly",
                        "evmVersion": "london",
                        "externalReferences": [
                          {
                            "declaration": 1624,
                            "isOffset": false,
                            "isSlot": true,
                            "src": "2638:6:18",
                            "suffix": "slot",
                            "valueSize": 1
                          },
                          {
                            "declaration": 1620,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "2648:4:18",
                            "valueSize": 1
                          }
                        ],
                        "id": 1626,
                        "nodeType": "InlineAssembly",
                        "src": "2615:47:18"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 1618,
                    "nodeType": "StructuredDocumentation",
                    "src": "2386:87:18",
                    "text": " @dev Returns an `Uint256Slot` with member `value` located at `slot`."
                  },
                  "id": 1628,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getUint256Slot",
                  "nameLocation": "2487:14:18",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1621,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1620,
                        "mutability": "mutable",
                        "name": "slot",
                        "nameLocation": "2510:4:18",
                        "nodeType": "VariableDeclaration",
                        "scope": 1628,
                        "src": "2502:12:18",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_bytes32", "typeString": "bytes32" },
                        "typeName": {
                          "id": 1619,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "2502:7:18",
                          "typeDescriptions": { "typeIdentifier": "t_bytes32", "typeString": "bytes32" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2501:14:18"
                  },
                  "returnParameters": {
                    "id": 1625,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1624,
                        "mutability": "mutable",
                        "name": "r",
                        "nameLocation": "2559:1:18",
                        "nodeType": "VariableDeclaration",
                        "scope": 1628,
                        "src": "2539:21:18",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Uint256Slot_$1584_storage_ptr",
                          "typeString": "struct StorageSlot.Uint256Slot"
                        },
                        "typeName": {
                          "id": 1623,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 1622,
                            "name": "Uint256Slot",
                            "nameLocations": ["2539:11:18"],
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 1584,
                            "src": "2539:11:18"
                          },
                          "referencedDeclaration": 1584,
                          "src": "2539:11:18",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Uint256Slot_$1584_storage_ptr",
                            "typeString": "struct StorageSlot.Uint256Slot"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2538:23:18"
                  },
                  "scope": 1629,
                  "src": "2478:190:18",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 1630,
              "src": "1279:1391:18",
              "usedErrors": []
            }
          ],
          "src": "105:2566:18"
        },
        "id": 18
      },
      "contracts/GasStation.sol": {
        "ast": {
          "absolutePath": "contracts/GasStation.sol",
          "exportedSymbols": { "ContractOwnership": [32], "OpenCampusGasStation": [1880], "TokenRecovery": [514] },
          "id": 1881,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1631,
              "literals": ["solidity", ">=", "0.7", ".0", "<", "0.9", ".0"],
              "nodeType": "PragmaDirective",
              "src": "32:31:19"
            },
            {
              "absolutePath": "@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol",
              "file": "@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol",
              "id": 1633,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 1881,
              "sourceUnit": 515,
              "src": "438:95:19",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 1632,
                    "name": "TokenRecovery",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 514,
                    "src": "446:13:19",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "absolutePath": "@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol",
              "file": "@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol",
              "id": 1635,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 1881,
              "sourceUnit": 33,
              "src": "534:101:19",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 1634,
                    "name": "ContractOwnership",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 32,
                    "src": "542:17:19",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 1636,
                    "name": "TokenRecovery",
                    "nameLocations": ["664:13:19"],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 514,
                    "src": "664:13:19"
                  },
                  "id": 1637,
                  "nodeType": "InheritanceSpecifier",
                  "src": "664:13:19"
                }
              ],
              "canonicalName": "OpenCampusGasStation",
              "contractDependencies": [],
              "contractKind": "contract",
              "fullyImplemented": true,
              "id": 1880,
              "linearizedBaseContracts": [1880, 514, 32, 338, 350, 82, 105, 733, 1569],
              "name": "OpenCampusGasStation",
              "nameLocation": "647:12:19",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": false,
                  "functionSelector": "adddc767",
                  "id": 1640,
                  "mutability": "mutable",
                  "name": "pumps",
                  "nameLocation": "743:5:19",
                  "nodeType": "VariableDeclaration",
                  "scope": 1880,
                  "src": "718:30:19",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_payable_$dyn_storage",
                    "typeString": "address payable[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 1638,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "718:15:19",
                      "stateMutability": "payable",
                      "typeDescriptions": { "typeIdentifier": "t_address_payable", "typeString": "address payable" }
                    },
                    "id": 1639,
                    "nodeType": "ArrayTypeName",
                    "src": "718:17:19",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_payable_$dyn_storage_ptr",
                      "typeString": "address payable[]"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "id": 1644,
                  "mutability": "mutable",
                  "name": "isPump",
                  "nameLocation": "790:6:19",
                  "nodeType": "VariableDeclaration",
                  "scope": 1880,
                  "src": "754:42:19",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_address_payable_$",
                    "typeString": "mapping(address => address payable)"
                  },
                  "typeName": {
                    "id": 1643,
                    "keyType": {
                      "id": 1641,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "762:7:19",
                      "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                    },
                    "nodeType": "Mapping",
                    "src": "754:35:19",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_address_payable_$",
                      "typeString": "mapping(address => address payable)"
                    },
                    "valueType": {
                      "id": 1642,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "773:15:19",
                      "stateMutability": "payable",
                      "typeDescriptions": { "typeIdentifier": "t_address_payable", "typeString": "address payable" }
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1646,
                  "mutability": "mutable",
                  "name": "total_value",
                  "nameLocation": "807:11:19",
                  "nodeType": "VariableDeclaration",
                  "scope": 1880,
                  "src": "802:16:19",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                  "typeName": {
                    "id": 1645,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "802:4:19",
                    "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                  },
                  "visibility": "internal"
                },
                {
                  "anonymous": false,
                  "eventSelector": "342827c97908e5e2f71151c08502a66d44b6f758e3ac2f1de95f02eb95f0a735",
                  "id": 1652,
                  "name": "OwnerSet",
                  "nameLocation": "869:8:19",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1651,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1648,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "oldOwner",
                        "nameLocation": "894:8:19",
                        "nodeType": "VariableDeclaration",
                        "scope": 1652,
                        "src": "878:24:19",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 1647,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "878:7:19",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1650,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "newOwner",
                        "nameLocation": "920:8:19",
                        "nodeType": "VariableDeclaration",
                        "scope": 1652,
                        "src": "904:24:19",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" },
                        "typeName": {
                          "id": 1649,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "904:7:19",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "877:52:19"
                  },
                  "src": "863:67:19"
                },
                {
                  "anonymous": false,
                  "eventSelector": "6d86fa282077cbb7e8dfb1e46d681667447b404489db833611f44ac272a3d64e",
                  "id": 1660,
                  "name": "GasPumpsSet",
                  "nameLocation": "941:11:19",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1659,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1655,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "oldGasPumps",
                        "nameLocation": "979:11:19",
                        "nodeType": "VariableDeclaration",
                        "scope": 1660,
                        "src": "953:37:19",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_payable_$dyn_memory_ptr",
                          "typeString": "address payable[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 1653,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "953:15:19",
                            "stateMutability": "payable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "id": 1654,
                          "nodeType": "ArrayTypeName",
                          "src": "953:17:19",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_payable_$dyn_storage_ptr",
                            "typeString": "address payable[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1658,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "newGasPumps",
                        "nameLocation": "1018:11:19",
                        "nodeType": "VariableDeclaration",
                        "scope": 1660,
                        "src": "992:37:19",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_payable_$dyn_memory_ptr",
                          "typeString": "address payable[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 1656,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "992:15:19",
                            "stateMutability": "payable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "id": 1657,
                          "nodeType": "ArrayTypeName",
                          "src": "992:17:19",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_payable_$dyn_storage_ptr",
                            "typeString": "address payable[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "952:78:19"
                  },
                  "src": "935:96:19"
                },
                {
                  "body": {
                    "id": 1672,
                    "nodeType": "Block",
                    "src": "1118:81:19",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": { "typeIdentifier": "t_address", "typeString": "address" },
                              "id": 1667,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 1663,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "1136:3:19",
                                  "typeDescriptions": { "typeIdentifier": "t_magic_message", "typeString": "msg" }
                                },
                                "id": 1664,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "1140:6:19",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "1136:10:19",
                                "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "id": 1665,
                                  "name": "owner",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 63,
                                  "src": "1150:5:19",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                    "typeString": "function () view returns (address)"
                                  }
                                },
                                "id": 1666,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1150:7:19",
                                "tryCall": false,
                                "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                              },
                              "src": "1136:21:19",
                              "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                            },
                            {
                              "hexValue": "43616c6c6572206973206e6f74206f776e6572",
                              "id": 1668,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1159:21:19",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_2d10247a65709fdb3c0696b0ed760a0c246e12f8c496efb56291dd2fe3b0275d",
                                "typeString": "literal_string \"Caller is not owner\""
                              },
                              "value": "Caller is not owner"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              { "typeIdentifier": "t_bool", "typeString": "bool" },
                              {
                                "typeIdentifier": "t_stringliteral_2d10247a65709fdb3c0696b0ed760a0c246e12f8c496efb56291dd2fe3b0275d",
                                "typeString": "literal_string \"Caller is not owner\""
                              }
                            ],
                            "id": 1662,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [-18, -18],
                            "referencedDeclaration": -18,
                            "src": "1128:7:19",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1669,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1128:53:19",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                        },
                        "id": 1670,
                        "nodeType": "ExpressionStatement",
                        "src": "1128:53:19"
                      },
                      { "id": 1671, "nodeType": "PlaceholderStatement", "src": "1191:1:19" }
                    ]
                  },
                  "id": 1673,
                  "name": "isOwner",
                  "nameLocation": "1108:7:19",
                  "nodeType": "ModifierDefinition",
                  "parameters": { "id": 1661, "nodeType": "ParameterList", "parameters": [], "src": "1115:2:19" },
                  "src": "1099:100:19",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1684,
                    "nodeType": "Block",
                    "src": "1276:69:19",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                              "id": 1679,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 1676,
                                  "name": "pumps",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1640,
                                  "src": "1294:5:19",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_address_payable_$dyn_storage",
                                    "typeString": "address payable[] storage ref"
                                  }
                                },
                                "id": 1677,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "1300:6:19",
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "src": "1294:12:19",
                                "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">",
                              "rightExpression": {
                                "hexValue": "30",
                                "id": 1678,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1309:1:19",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "1294:16:19",
                              "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                            },
                            {
                              "hexValue": "4e6f206761732070756d7073",
                              "id": 1680,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1312:14:19",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c1abf30d4e27019b56298306476010b3f6ef9e55a9cfe90bcb5f6dc16e369b9d",
                                "typeString": "literal_string \"No gas pumps\""
                              },
                              "value": "No gas pumps"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              { "typeIdentifier": "t_bool", "typeString": "bool" },
                              {
                                "typeIdentifier": "t_stringliteral_c1abf30d4e27019b56298306476010b3f6ef9e55a9cfe90bcb5f6dc16e369b9d",
                                "typeString": "literal_string \"No gas pumps\""
                              }
                            ],
                            "id": 1675,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [-18, -18],
                            "referencedDeclaration": -18,
                            "src": "1286:7:19",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1681,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1286:41:19",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                        },
                        "id": 1682,
                        "nodeType": "ExpressionStatement",
                        "src": "1286:41:19"
                      },
                      { "id": 1683, "nodeType": "PlaceholderStatement", "src": "1337:1:19" }
                    ]
                  },
                  "id": 1685,
                  "name": "hasGasPumps",
                  "nameLocation": "1262:11:19",
                  "nodeType": "ModifierDefinition",
                  "parameters": { "id": 1674, "nodeType": "ParameterList", "parameters": [], "src": "1273:2:19" },
                  "src": "1253:92:19",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1704,
                    "nodeType": "Block",
                    "src": "1440:272:19",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1696,
                              "name": "gasPumps",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1688,
                              "src": "1615:8:19",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_address_payable_$dyn_memory_ptr",
                                "typeString": "address payable[] memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_array$_t_address_payable_$dyn_memory_ptr",
                                "typeString": "address payable[] memory"
                              }
                            ],
                            "id": 1695,
                            "name": "setGasPumps",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1746,
                            "src": "1603:11:19",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_address_payable_$dyn_memory_ptr_$returns$__$",
                              "typeString": "function (address payable[] memory)"
                            }
                          },
                          "id": 1697,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1603:21:19",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                        },
                        "id": 1698,
                        "nodeType": "ExpressionStatement",
                        "src": "1603:21:19"
                      },
                      {
                        "expression": {
                          "id": 1702,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1699,
                            "name": "total_value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1646,
                            "src": "1635:11:19",
                            "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 1700,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "1649:3:19",
                              "typeDescriptions": { "typeIdentifier": "t_magic_message", "typeString": "msg" }
                            },
                            "id": 1701,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1653:5:19",
                            "memberName": "value",
                            "nodeType": "MemberAccess",
                            "src": "1649:9:19",
                            "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                          },
                          "src": "1635:23:19",
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "id": 1703,
                        "nodeType": "ExpressionStatement",
                        "src": "1635:23:19"
                      }
                    ]
                  },
                  "id": 1705,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "expression": {
                            "id": 1691,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1420:3:19",
                            "typeDescriptions": { "typeIdentifier": "t_magic_message", "typeString": "msg" }
                          },
                          "id": 1692,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "1424:6:19",
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "1420:10:19",
                          "typeDescriptions": { "typeIdentifier": "t_address", "typeString": "address" }
                        }
                      ],
                      "id": 1693,
                      "kind": "baseConstructorSpecifier",
                      "modifierName": {
                        "id": 1690,
                        "name": "ContractOwnership",
                        "nameLocations": ["1402:17:19"],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 32,
                        "src": "1402:17:19"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "1402:29:19"
                    }
                  ],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1689,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1688,
                        "mutability": "mutable",
                        "name": "gasPumps",
                        "nameLocation": "1392:8:19",
                        "nodeType": "VariableDeclaration",
                        "scope": 1705,
                        "src": "1367:33:19",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_payable_$dyn_memory_ptr",
                          "typeString": "address payable[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 1686,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "1367:15:19",
                            "stateMutability": "payable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "id": 1687,
                          "nodeType": "ArrayTypeName",
                          "src": "1367:17:19",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_payable_$dyn_storage_ptr",
                            "typeString": "address payable[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1366:35:19"
                  },
                  "returnParameters": { "id": 1694, "nodeType": "ParameterList", "parameters": [], "src": "1440:0:19" },
                  "scope": 1880,
                  "src": "1355:357:19",
                  "stateMutability": "payable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1745,
                    "nodeType": "Block",
                    "src": "2032:182:19",
                    "statements": [
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 1714,
                              "name": "pumps",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1640,
                              "src": "2059:5:19",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_address_payable_$dyn_storage",
                                "typeString": "address payable[] storage ref"
                              }
                            },
                            {
                              "id": 1715,
                              "name": "newGasPumps",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1708,
                              "src": "2066:11:19",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_address_payable_$dyn_memory_ptr",
                                "typeString": "address payable[] memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_array$_t_address_payable_$dyn_storage",
                                "typeString": "address payable[] storage ref"
                              },
                              {
                                "typeIdentifier": "t_array$_t_address_payable_$dyn_memory_ptr",
                                "typeString": "address payable[] memory"
                              }
                            ],
                            "id": 1713,
                            "name": "GasPumpsSet",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1660,
                            "src": "2047:11:19",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_array$_t_address_payable_$dyn_memory_ptr_$_t_array$_t_address_payable_$dyn_memory_ptr_$returns$__$",
                              "typeString": "function (address payable[] memory,address payable[] memory)"
                            }
                          },
                          "id": 1716,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2047:31:19",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                        },
                        "id": 1717,
                        "nodeType": "EmitStatement",
                        "src": "2042:36:19"
                      },
                      {
                        "expression": {
                          "id": 1720,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1718,
                            "name": "pumps",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1640,
                            "src": "2088:5:19",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_payable_$dyn_storage",
                              "typeString": "address payable[] storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1719,
                            "name": "newGasPumps",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1708,
                            "src": "2096:11:19",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_payable_$dyn_memory_ptr",
                              "typeString": "address payable[] memory"
                            }
                          },
                          "src": "2088:19:19",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_payable_$dyn_storage",
                            "typeString": "address payable[] storage ref"
                          }
                        },
                        "id": 1721,
                        "nodeType": "ExpressionStatement",
                        "src": "2088:19:19"
                      },
                      {
                        "body": {
                          "id": 1743,
                          "nodeType": "Block",
                          "src": "2156:52:19",
                          "statements": [
                            {
                              "expression": {
                                "id": 1741,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "id": 1733,
                                    "name": "isPump",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1644,
                                    "src": "2170:6:19",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_address_payable_$",
                                      "typeString": "mapping(address => address payable)"
                                    }
                                  },
                                  "id": 1737,
                                  "indexExpression": {
                                    "baseExpression": {
                                      "id": 1734,
                                      "name": "pumps",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1640,
                                      "src": "2177:5:19",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_address_payable_$dyn_storage",
                                        "typeString": "address payable[] storage ref"
                                      }
                                    },
                                    "id": 1736,
                                    "indexExpression": {
                                      "id": 1735,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1723,
                                      "src": "2183:1:19",
                                      "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "2177:8:19",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address_payable",
                                      "typeString": "address payable"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "2170:16:19",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "baseExpression": {
                                    "id": 1738,
                                    "name": "pumps",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1640,
                                    "src": "2189:5:19",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_address_payable_$dyn_storage",
                                      "typeString": "address payable[] storage ref"
                                    }
                                  },
                                  "id": 1740,
                                  "indexExpression": {
                                    "id": 1739,
                                    "name": "i",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1723,
                                    "src": "2195:1:19",
                                    "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "2189:8:19",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                },
                                "src": "2170:27:19",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "id": 1742,
                              "nodeType": "ExpressionStatement",
                              "src": "2170:27:19"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                          "id": 1729,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1726,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1723,
                            "src": "2133:1:19",
                            "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "expression": {
                              "id": 1727,
                              "name": "pumps",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1640,
                              "src": "2137:5:19",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_address_payable_$dyn_storage",
                                "typeString": "address payable[] storage ref"
                              }
                            },
                            "id": 1728,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2143:6:19",
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "2137:12:19",
                            "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                          },
                          "src": "2133:16:19",
                          "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                        },
                        "id": 1744,
                        "initializationExpression": {
                          "assignments": [1723],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 1723,
                              "mutability": "mutable",
                              "name": "i",
                              "nameLocation": "2128:1:19",
                              "nodeType": "VariableDeclaration",
                              "scope": 1744,
                              "src": "2123:6:19",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                              "typeName": {
                                "id": 1722,
                                "name": "uint",
                                "nodeType": "ElementaryTypeName",
                                "src": "2123:4:19",
                                "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 1725,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 1724,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2130:1:19",
                            "typeDescriptions": { "typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0" },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "2123:8:19"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 1731,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": false,
                            "src": "2151:3:19",
                            "subExpression": {
                              "id": 1730,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1723,
                              "src": "2151:1:19",
                              "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                            },
                            "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                          },
                          "id": 1732,
                          "nodeType": "ExpressionStatement",
                          "src": "2151:3:19"
                        },
                        "nodeType": "ForStatement",
                        "src": "2118:90:19"
                      }
                    ]
                  },
                  "functionSelector": "27bd8ff1",
                  "id": 1746,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 1711,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1710,
                        "name": "isOwner",
                        "nameLocations": ["2024:7:19"],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 1673,
                        "src": "2024:7:19"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "2024:7:19"
                    }
                  ],
                  "name": "setGasPumps",
                  "nameLocation": "1967:11:19",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1709,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1708,
                        "mutability": "mutable",
                        "name": "newGasPumps",
                        "nameLocation": "2004:11:19",
                        "nodeType": "VariableDeclaration",
                        "scope": 1746,
                        "src": "1979:36:19",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_payable_$dyn_memory_ptr",
                          "typeString": "address payable[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 1706,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "1979:15:19",
                            "stateMutability": "payable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "id": 1707,
                          "nodeType": "ArrayTypeName",
                          "src": "1979:17:19",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_payable_$dyn_storage_ptr",
                            "typeString": "address payable[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1978:38:19"
                  },
                  "returnParameters": { "id": 1712, "nodeType": "ParameterList", "parameters": [], "src": "2032:0:19" },
                  "scope": 1880,
                  "src": "1958:256:19",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1754,
                    "nodeType": "Block",
                    "src": "2297:29:19",
                    "statements": [
                      {
                        "expression": {
                          "id": 1752,
                          "name": "pumps",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1640,
                          "src": "2314:5:19",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_payable_$dyn_storage",
                            "typeString": "address payable[] storage ref"
                          }
                        },
                        "functionReturnParameters": 1751,
                        "id": 1753,
                        "nodeType": "Return",
                        "src": "2307:12:19"
                      }
                    ]
                  },
                  "functionSelector": "89cd7a7b",
                  "id": 1755,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getGasPumps",
                  "nameLocation": "2234:11:19",
                  "nodeType": "FunctionDefinition",
                  "parameters": { "id": 1747, "nodeType": "ParameterList", "parameters": [], "src": "2245:2:19" },
                  "returnParameters": {
                    "id": 1751,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1750,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1755,
                        "src": "2271:24:19",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_payable_$dyn_memory_ptr",
                          "typeString": "address payable[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 1748,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "2271:15:19",
                            "stateMutability": "payable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "id": 1749,
                          "nodeType": "ArrayTypeName",
                          "src": "2271:17:19",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_payable_$dyn_storage_ptr",
                            "typeString": "address payable[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2270:26:19"
                  },
                  "scope": 1880,
                  "src": "2225:101:19",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1803,
                    "nodeType": "Block",
                    "src": "2378:295:19",
                    "statements": [
                      {
                        "expression": {
                          "id": 1763,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1760,
                            "name": "total_value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1646,
                            "src": "2388:11:19",
                            "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "expression": {
                              "id": 1761,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "2403:3:19",
                              "typeDescriptions": { "typeIdentifier": "t_magic_message", "typeString": "msg" }
                            },
                            "id": 1762,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2407:5:19",
                            "memberName": "value",
                            "nodeType": "MemberAccess",
                            "src": "2403:9:19",
                            "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                          },
                          "src": "2388:24:19",
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "id": 1764,
                        "nodeType": "ExpressionStatement",
                        "src": "2388:24:19"
                      },
                      {
                        "assignments": [1766],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1766,
                            "mutability": "mutable",
                            "name": "pricePerPump",
                            "nameLocation": "2430:12:19",
                            "nodeType": "VariableDeclaration",
                            "scope": 1803,
                            "src": "2422:20:19",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                            "typeName": {
                              "id": 1765,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "2422:7:19",
                              "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1772,
                        "initialValue": {
                          "commonType": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                          "id": 1771,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 1767,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "2445:3:19",
                              "typeDescriptions": { "typeIdentifier": "t_magic_message", "typeString": "msg" }
                            },
                            "id": 1768,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2449:5:19",
                            "memberName": "value",
                            "nodeType": "MemberAccess",
                            "src": "2445:9:19",
                            "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "expression": {
                              "id": 1769,
                              "name": "pumps",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1640,
                              "src": "2457:5:19",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_address_payable_$dyn_storage",
                                "typeString": "address payable[] storage ref"
                              }
                            },
                            "id": 1770,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2463:6:19",
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "2457:12:19",
                            "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                          },
                          "src": "2445:24:19",
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2422:47:19"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                              "id": 1776,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1774,
                                "name": "pricePerPump",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1766,
                                "src": "2487:12:19",
                                "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">",
                              "rightExpression": {
                                "hexValue": "3130303030",
                                "id": 1775,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "2502:5:19",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_10000_by_1",
                                  "typeString": "int_const 10000"
                                },
                                "value": "10000"
                              },
                              "src": "2487:20:19",
                              "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [{ "typeIdentifier": "t_bool", "typeString": "bool" }],
                            "id": 1773,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [-18, -18],
                            "referencedDeclaration": -18,
                            "src": "2479:7:19",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 1777,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2479:29:19",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                        },
                        "id": 1778,
                        "nodeType": "ExpressionStatement",
                        "src": "2479:29:19"
                      },
                      {
                        "body": {
                          "id": 1801,
                          "nodeType": "Block",
                          "src": "2556:111:19",
                          "statements": [
                            {
                              "expression": {
                                "id": 1792,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 1790,
                                  "name": "total_value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1646,
                                  "src": "2570:11:19",
                                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                },
                                "nodeType": "Assignment",
                                "operator": "-=",
                                "rightHandSide": {
                                  "id": 1791,
                                  "name": "pricePerPump",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1766,
                                  "src": "2585:12:19",
                                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                },
                                "src": "2570:27:19",
                                "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                              },
                              "id": 1793,
                              "nodeType": "ExpressionStatement",
                              "src": "2570:27:19"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "baseExpression": {
                                      "id": 1795,
                                      "name": "pumps",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1640,
                                      "src": "2633:5:19",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_address_payable_$dyn_storage",
                                        "typeString": "address payable[] storage ref"
                                      }
                                    },
                                    "id": 1797,
                                    "indexExpression": {
                                      "id": 1796,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1780,
                                      "src": "2639:1:19",
                                      "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "2633:8:19",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address_payable",
                                      "typeString": "address payable"
                                    }
                                  },
                                  {
                                    "id": 1798,
                                    "name": "pricePerPump",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1766,
                                    "src": "2643:12:19",
                                    "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    { "typeIdentifier": "t_address_payable", "typeString": "address payable" },
                                    { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                  ],
                                  "id": 1794,
                                  "name": "withdraw",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1879,
                                  "src": "2624:8:19",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_nonpayable$_t_address_payable_$_t_uint256_$returns$__$",
                                    "typeString": "function (address payable,uint256)"
                                  }
                                },
                                "id": 1799,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2624:32:19",
                                "tryCall": false,
                                "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                              },
                              "id": 1800,
                              "nodeType": "ExpressionStatement",
                              "src": "2624:32:19"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                          "id": 1786,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1783,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1780,
                            "src": "2533:1:19",
                            "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "expression": {
                              "id": 1784,
                              "name": "pumps",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1640,
                              "src": "2537:5:19",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_address_payable_$dyn_storage",
                                "typeString": "address payable[] storage ref"
                              }
                            },
                            "id": 1785,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2543:6:19",
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "2537:12:19",
                            "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                          },
                          "src": "2533:16:19",
                          "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                        },
                        "id": 1802,
                        "initializationExpression": {
                          "assignments": [1780],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 1780,
                              "mutability": "mutable",
                              "name": "i",
                              "nameLocation": "2528:1:19",
                              "nodeType": "VariableDeclaration",
                              "scope": 1802,
                              "src": "2523:6:19",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                              "typeName": {
                                "id": 1779,
                                "name": "uint",
                                "nodeType": "ElementaryTypeName",
                                "src": "2523:4:19",
                                "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 1782,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 1781,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2530:1:19",
                            "typeDescriptions": { "typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0" },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "2523:8:19"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 1788,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": false,
                            "src": "2551:3:19",
                            "subExpression": {
                              "id": 1787,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1780,
                              "src": "2551:1:19",
                              "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                            },
                            "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                          },
                          "id": 1789,
                          "nodeType": "ExpressionStatement",
                          "src": "2551:3:19"
                        },
                        "nodeType": "ForStatement",
                        "src": "2518:149:19"
                      }
                    ]
                  },
                  "functionSelector": "55161913",
                  "id": 1804,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 1758,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1757,
                        "name": "hasGasPumps",
                        "nameLocations": ["2366:11:19"],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 1685,
                        "src": "2366:11:19"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "2366:11:19"
                    }
                  ],
                  "name": "charge",
                  "nameLocation": "2342:6:19",
                  "nodeType": "FunctionDefinition",
                  "parameters": { "id": 1756, "nodeType": "ParameterList", "parameters": [], "src": "2348:2:19" },
                  "returnParameters": { "id": 1759, "nodeType": "ParameterList", "parameters": [], "src": "2378:0:19" },
                  "scope": 1880,
                  "src": "2333:340:19",
                  "stateMutability": "payable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1855,
                    "nodeType": "Block",
                    "src": "2754:356:19",
                    "statements": [
                      {
                        "expression": {
                          "id": 1815,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1812,
                            "name": "total_value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1646,
                            "src": "2764:11:19",
                            "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "expression": {
                              "id": 1813,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "2779:3:19",
                              "typeDescriptions": { "typeIdentifier": "t_magic_message", "typeString": "msg" }
                            },
                            "id": 1814,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2783:5:19",
                            "memberName": "value",
                            "nodeType": "MemberAccess",
                            "src": "2779:9:19",
                            "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                          },
                          "src": "2764:24:19",
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "id": 1816,
                        "nodeType": "ExpressionStatement",
                        "src": "2764:24:19"
                      },
                      {
                        "assignments": [1818],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1818,
                            "mutability": "mutable",
                            "name": "pricePerPump",
                            "nameLocation": "2806:12:19",
                            "nodeType": "VariableDeclaration",
                            "scope": 1855,
                            "src": "2798:20:19",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                            "typeName": {
                              "id": 1817,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "2798:7:19",
                              "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1823,
                        "initialValue": {
                          "commonType": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                          "id": 1822,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1819,
                            "name": "total_value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1646,
                            "src": "2821:11:19",
                            "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "expression": {
                              "id": 1820,
                              "name": "addrs",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1807,
                              "src": "2835:5:19",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_address_payable_$dyn_memory_ptr",
                                "typeString": "address payable[] memory"
                              }
                            },
                            "id": 1821,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2841:6:19",
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "2835:12:19",
                            "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                          },
                          "src": "2821:26:19",
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2798:49:19"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                              "id": 1827,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1825,
                                "name": "pricePerPump",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1818,
                                "src": "2874:12:19",
                                "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">",
                              "rightExpression": {
                                "hexValue": "313030303030303030303030303030303030",
                                "id": 1826,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "2889:18:19",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_100000000000000000_by_1",
                                  "typeString": "int_const 100000000000000000"
                                },
                                "value": "100000000000000000"
                              },
                              "src": "2874:33:19",
                              "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                            },
                            {
                              "hexValue": "4e6f7420656e6f7567682066756e647320666f7220616c6c2077616c6c65747320746f2062652066696c6c6564",
                              "id": 1828,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2909:47:19",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_50f9407a4adcdf6ae12e0d869562d9d87ab7a621231d402d6cee2f0011d7245a",
                                "typeString": "literal_string \"Not enough funds for all wallets to be filled\""
                              },
                              "value": "Not enough funds for all wallets to be filled"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              { "typeIdentifier": "t_bool", "typeString": "bool" },
                              {
                                "typeIdentifier": "t_stringliteral_50f9407a4adcdf6ae12e0d869562d9d87ab7a621231d402d6cee2f0011d7245a",
                                "typeString": "literal_string \"Not enough funds for all wallets to be filled\""
                              }
                            ],
                            "id": 1824,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [-18, -18],
                            "referencedDeclaration": -18,
                            "src": "2866:7:19",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1829,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2866:91:19",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                        },
                        "id": 1830,
                        "nodeType": "ExpressionStatement",
                        "src": "2866:91:19"
                      },
                      {
                        "body": {
                          "id": 1853,
                          "nodeType": "Block",
                          "src": "3006:98:19",
                          "statements": [
                            {
                              "expression": {
                                "id": 1844,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 1842,
                                  "name": "total_value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1646,
                                  "src": "3020:11:19",
                                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                },
                                "nodeType": "Assignment",
                                "operator": "-=",
                                "rightHandSide": {
                                  "id": 1843,
                                  "name": "pricePerPump",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1818,
                                  "src": "3035:12:19",
                                  "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                },
                                "src": "3020:27:19",
                                "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                              },
                              "id": 1845,
                              "nodeType": "ExpressionStatement",
                              "src": "3020:27:19"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "baseExpression": {
                                      "id": 1847,
                                      "name": "addrs",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1807,
                                      "src": "3070:5:19",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_address_payable_$dyn_memory_ptr",
                                        "typeString": "address payable[] memory"
                                      }
                                    },
                                    "id": 1849,
                                    "indexExpression": {
                                      "id": 1848,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1832,
                                      "src": "3076:1:19",
                                      "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "3070:8:19",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address_payable",
                                      "typeString": "address payable"
                                    }
                                  },
                                  {
                                    "id": 1850,
                                    "name": "pricePerPump",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1818,
                                    "src": "3080:12:19",
                                    "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    { "typeIdentifier": "t_address_payable", "typeString": "address payable" },
                                    { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                                  ],
                                  "id": 1846,
                                  "name": "withdraw",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1879,
                                  "src": "3061:8:19",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_nonpayable$_t_address_payable_$_t_uint256_$returns$__$",
                                    "typeString": "function (address payable,uint256)"
                                  }
                                },
                                "id": 1851,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "3061:32:19",
                                "tryCall": false,
                                "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                              },
                              "id": 1852,
                              "nodeType": "ExpressionStatement",
                              "src": "3061:32:19"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                          "id": 1838,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1835,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1832,
                            "src": "2983:1:19",
                            "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "expression": {
                              "id": 1836,
                              "name": "addrs",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1807,
                              "src": "2987:5:19",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_address_payable_$dyn_memory_ptr",
                                "typeString": "address payable[] memory"
                              }
                            },
                            "id": 1837,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2993:6:19",
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "2987:12:19",
                            "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                          },
                          "src": "2983:16:19",
                          "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                        },
                        "id": 1854,
                        "initializationExpression": {
                          "assignments": [1832],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 1832,
                              "mutability": "mutable",
                              "name": "i",
                              "nameLocation": "2978:1:19",
                              "nodeType": "VariableDeclaration",
                              "scope": 1854,
                              "src": "2973:6:19",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                              "typeName": {
                                "id": 1831,
                                "name": "uint",
                                "nodeType": "ElementaryTypeName",
                                "src": "2973:4:19",
                                "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 1834,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 1833,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2980:1:19",
                            "typeDescriptions": { "typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0" },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "2973:8:19"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 1840,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": false,
                            "src": "3001:3:19",
                            "subExpression": {
                              "id": 1839,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1832,
                              "src": "3001:1:19",
                              "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                            },
                            "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                          },
                          "id": 1841,
                          "nodeType": "ExpressionStatement",
                          "src": "3001:3:19"
                        },
                        "nodeType": "ForStatement",
                        "src": "2968:136:19"
                      }
                    ]
                  },
                  "functionSelector": "77d17db2",
                  "id": 1856,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 1810,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1809,
                        "name": "hasGasPumps",
                        "nameLocations": ["2742:11:19"],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 1685,
                        "src": "2742:11:19"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "2742:11:19"
                    }
                  ],
                  "name": "charge",
                  "nameLocation": "2688:6:19",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1808,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1807,
                        "mutability": "mutable",
                        "name": "addrs",
                        "nameLocation": "2720:5:19",
                        "nodeType": "VariableDeclaration",
                        "scope": 1856,
                        "src": "2695:30:19",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_payable_$dyn_memory_ptr",
                          "typeString": "address payable[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 1805,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "2695:15:19",
                            "stateMutability": "payable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "id": 1806,
                          "nodeType": "ArrayTypeName",
                          "src": "2695:17:19",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_payable_$dyn_storage_ptr",
                            "typeString": "address payable[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2694:32:19"
                  },
                  "returnParameters": { "id": 1811, "nodeType": "ParameterList", "parameters": [], "src": "2754:0:19" },
                  "scope": 1880,
                  "src": "2679:431:19",
                  "stateMutability": "payable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1878,
                    "nodeType": "Block",
                    "src": "3195:147:19",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": { "typeIdentifier": "t_address_payable", "typeString": "address payable" },
                              "id": 1868,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "baseExpression": {
                                  "id": 1864,
                                  "name": "isPump",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1644,
                                  "src": "3213:6:19",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_address_payable_$",
                                    "typeString": "mapping(address => address payable)"
                                  }
                                },
                                "id": 1866,
                                "indexExpression": {
                                  "id": 1865,
                                  "name": "receiverAddr",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1858,
                                  "src": "3220:12:19",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "3213:20:19",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "id": 1867,
                                "name": "receiverAddr",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1858,
                                "src": "3237:12:19",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "src": "3213:36:19",
                              "typeDescriptions": { "typeIdentifier": "t_bool", "typeString": "bool" }
                            },
                            {
                              "hexValue": "41646472657373206e6f742070617274206f6620746865204761732053746174696f6e20",
                              "id": 1869,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3251:38:19",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_7e652ff6a488637940a02d29f8449254de8a14c7dab61e902488aa9b3477438f",
                                "typeString": "literal_string \"Address not part of the Gas Station \""
                              },
                              "value": "Address not part of the Gas Station "
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              { "typeIdentifier": "t_bool", "typeString": "bool" },
                              {
                                "typeIdentifier": "t_stringliteral_7e652ff6a488637940a02d29f8449254de8a14c7dab61e902488aa9b3477438f",
                                "typeString": "literal_string \"Address not part of the Gas Station \""
                              }
                            ],
                            "id": 1863,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [-18, -18],
                            "referencedDeclaration": -18,
                            "src": "3205:7:19",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1870,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3205:85:19",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                        },
                        "id": 1871,
                        "nodeType": "ExpressionStatement",
                        "src": "3205:85:19"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1875,
                              "name": "receiverAmnt",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1860,
                              "src": "3322:12:19",
                              "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [{ "typeIdentifier": "t_uint256", "typeString": "uint256" }],
                            "expression": {
                              "id": 1872,
                              "name": "receiverAddr",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1858,
                              "src": "3300:12:19",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "id": 1874,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "3313:8:19",
                            "memberName": "transfer",
                            "nodeType": "MemberAccess",
                            "src": "3300:21:19",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256)"
                            }
                          },
                          "id": 1876,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3300:35:19",
                          "tryCall": false,
                          "typeDescriptions": { "typeIdentifier": "t_tuple$__$", "typeString": "tuple()" }
                        },
                        "id": 1877,
                        "nodeType": "ExpressionStatement",
                        "src": "3300:35:19"
                      }
                    ]
                  },
                  "id": 1879,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "withdraw",
                  "nameLocation": "3129:8:19",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1861,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1858,
                        "mutability": "mutable",
                        "name": "receiverAddr",
                        "nameLocation": "3154:12:19",
                        "nodeType": "VariableDeclaration",
                        "scope": 1879,
                        "src": "3138:28:19",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_address_payable", "typeString": "address payable" },
                        "typeName": {
                          "id": 1857,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3138:15:19",
                          "stateMutability": "payable",
                          "typeDescriptions": { "typeIdentifier": "t_address_payable", "typeString": "address payable" }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1860,
                        "mutability": "mutable",
                        "name": "receiverAmnt",
                        "nameLocation": "3173:12:19",
                        "nodeType": "VariableDeclaration",
                        "scope": 1879,
                        "src": "3168:17:19",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" },
                        "typeName": {
                          "id": 1859,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "3168:4:19",
                          "typeDescriptions": { "typeIdentifier": "t_uint256", "typeString": "uint256" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3137:49:19"
                  },
                  "returnParameters": { "id": 1862, "nodeType": "ParameterList", "parameters": [], "src": "3195:0:19" },
                  "scope": 1880,
                  "src": "3120:222:19",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "private"
                }
              ],
              "scope": 1881,
              "src": "638:2711:19",
              "usedErrors": []
            }
          ],
          "src": "32:3317:19"
        },
        "id": 19
      },
      "contracts/OpenCampusGasStationMock.sol": {
        "ast": {
          "absolutePath": "contracts/OpenCampusGasStationMock.sol",
          "exportedSymbols": {
            "Context": [1569],
            "OpenCampusGasStationMock": [1910],
            "IForwarderRegistry": [463],
            "OpenCampusGasStation": [1880]
          },
          "id": 1911,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            { "id": 1882, "literals": ["solidity", "0.8", ".17"], "nodeType": "PragmaDirective", "src": "32:23:20" },
            {
              "absolutePath": "@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol",
              "file": "@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol",
              "id": 1884,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 1911,
              "sourceUnit": 464,
              "src": "57:114:20",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 1883,
                    "name": "IForwarderRegistry",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 463,
                    "src": "65:18:20",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "absolutePath": "@openzeppelin/contracts/utils/Context.sol",
              "file": "@openzeppelin/contracts/utils/Context.sol",
              "id": 1886,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 1911,
              "sourceUnit": 1570,
              "src": "172:66:20",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 1885,
                    "name": "Context",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1569,
                    "src": "180:7:20",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "absolutePath": "contracts/GasStation.sol",
              "file": "./GasStation.sol",
              "id": 1888,
              "nameLocation": "-1:-1:-1",
              "nodeType": "ImportDirective",
              "scope": 1911,
              "sourceUnit": 1881,
              "src": "239:46:20",
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 1887,
                    "name": "OpenCampusGasStation",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1880,
                    "src": "247:12:20",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 1889,
                    "name": "OpenCampusGasStation",
                    "nameLocations": ["314:12:20"],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 1880,
                    "src": "314:12:20"
                  },
                  "id": 1890,
                  "nodeType": "InheritanceSpecifier",
                  "src": "314:12:20"
                }
              ],
              "canonicalName": "OpenCampusGasStationMock",
              "contractDependencies": [],
              "contractKind": "contract",
              "fullyImplemented": true,
              "id": 1910,
              "linearizedBaseContracts": [1910, 1880, 514, 32, 338, 350, 82, 105, 733, 1569],
              "name": "OpenCampusGasStationMock",
              "nameLocation": "296:14:20",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": { "id": 1899, "nodeType": "Block", "src": "417:2:20", "statements": [] },
                  "id": 1900,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 1896,
                          "name": "gasPumps",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1893,
                          "src": "407:8:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_payable_$dyn_memory_ptr",
                            "typeString": "address payable[] memory"
                          }
                        }
                      ],
                      "id": 1897,
                      "kind": "baseConstructorSpecifier",
                      "modifierName": {
                        "id": 1895,
                        "name": "OpenCampusGasStation",
                        "nameLocations": ["394:12:20"],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 1880,
                        "src": "394:12:20"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "394:22:20"
                    }
                  ],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1894,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1893,
                        "mutability": "mutable",
                        "name": "gasPumps",
                        "nameLocation": "379:8:20",
                        "nodeType": "VariableDeclaration",
                        "scope": 1900,
                        "src": "354:33:20",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_payable_$dyn_memory_ptr",
                          "typeString": "address payable[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 1891,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "354:15:20",
                            "stateMutability": "payable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "id": 1892,
                          "nodeType": "ArrayTypeName",
                          "src": "354:17:20",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_payable_$dyn_storage_ptr",
                            "typeString": "address payable[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "344:49:20"
                  },
                  "returnParameters": { "id": 1898, "nodeType": "ParameterList", "parameters": [], "src": "417:0:20" },
                  "scope": 1910,
                  "src": "333:86:20",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1908,
                    "nodeType": "Block",
                    "src": "485:34:20",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 1905,
                            "name": "_msgData",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1568,
                            "src": "502:8:20",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$",
                              "typeString": "function () view returns (bytes calldata)"
                            }
                          },
                          "id": 1906,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "502:10:20",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_calldata_ptr",
                            "typeString": "bytes calldata"
                          }
                        },
                        "functionReturnParameters": 1904,
                        "id": 1907,
                        "nodeType": "Return",
                        "src": "495:17:20"
                      }
                    ]
                  },
                  "functionSelector": "31e66e1e",
                  "id": 1909,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "__msgData",
                  "nameLocation": "434:9:20",
                  "nodeType": "FunctionDefinition",
                  "parameters": { "id": 1901, "nodeType": "ParameterList", "parameters": [], "src": "443:2:20" },
                  "returnParameters": {
                    "id": 1904,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1903,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1909,
                        "src": "469:14:20",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": { "typeIdentifier": "t_bytes_calldata_ptr", "typeString": "bytes" },
                        "typeName": {
                          "id": 1902,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "469:5:20",
                          "typeDescriptions": { "typeIdentifier": "t_bytes_storage_ptr", "typeString": "bytes" }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "468:16:20"
                  },
                  "scope": 1910,
                  "src": "425:94:20",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 1911,
              "src": "287:234:20",
              "usedErrors": []
            }
          ],
          "src": "32:490:20"
        },
        "id": 20
      }
    },
    "contracts": {
      "@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol": {
        "ContractOwnership": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                { "indexed": true, "internalType": "address", "name": "previousOwner", "type": "address" },
                { "indexed": true, "internalType": "address", "name": "newOwner", "type": "address" }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [{ "internalType": "address", "name": "", "type": "address" }],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [{ "internalType": "bytes4", "name": "interfaceId", "type": "bytes4" }],
              "name": "supportsInterface",
              "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [{ "internalType": "address", "name": "newOwner", "type": "address" }],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.",
            "kind": "dev",
            "methods": {
              "constructor": {
                "details": "Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.",
                "params": { "initialOwner": "the initial contract owner." }
              },
              "owner()": { "returns": { "_0": "The address of the contract owner." } },
              "supportsInterface(bytes4)": {
                "details": "Note: This function call must use less than 30 000 gas.",
                "params": { "interfaceId": "the interface identifier to test." },
                "returns": {
                  "_0": "True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."
                }
              },
              "transferOwnership(address)": {
                "details": "Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.",
                "params": {
                  "newOwner": "The address of the new contract owner. Using the zero address means renouncing ownership."
                }
              }
            },
            "title": "ERC173 Contract Ownership Standard (immutable version).",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "owner()": "8da5cb5b",
              "supportsInterface(bytes4)": "01ffc9a7",
              "transferOwnership(address)": "f2fde38b"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\",\"params\":{\"initialOwner\":\"the initial contract owner.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (immutable version).\",\"version\":1},\"userdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":\"ContractOwnership\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x7c8f90c1f72ccdd900c212f4d0067907c906e4a64856f1b67fee7f7ec13e1f74\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is Context, IERC173 {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual override returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual override {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xd408d65cc5a0377e5310695c67400dfbd397d6537398d384a70f09b3bfdf8262\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8c069442d3de596ee13824f700ef4d640e1429aeaa6b82bfd919f177c656fb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xef423b77e65093f86e7f7ffc35e41f7008304976a7334bb3f9049db69d43eae9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": { "storage": [], "types": null },
          "userdoc": {
            "events": {
              "OwnershipTransferred(address,address)": { "notice": "Emitted when the contract ownership changes." }
            },
            "kind": "user",
            "methods": {
              "constructor": {
                "notice": "Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173."
              },
              "owner()": { "notice": "Gets the address of the contract owner." },
              "supportsInterface(bytes4)": { "notice": "Returns whether this contract implements a given interface." },
              "transferOwnership(address)": { "notice": "Sets the address of the new contract owner." }
            },
            "version": 1
          }
        }
      },
      "@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol": {
        "ContractOwnershipBase": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                { "indexed": true, "internalType": "address", "name": "previousOwner", "type": "address" },
                { "indexed": true, "internalType": "address", "name": "newOwner", "type": "address" }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [{ "internalType": "address", "name": "", "type": "address" }],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [{ "internalType": "address", "name": "newOwner", "type": "address" }],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).",
            "kind": "dev",
            "methods": {
              "owner()": { "returns": { "_0": "The address of the contract owner." } },
              "transferOwnership(address)": {
                "details": "Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.",
                "params": {
                  "newOwner": "The address of the new contract owner. Using the zero address means renouncing ownership."
                }
              }
            },
            "title": "ERC173 Contract Ownership Standard (proxiable version).",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": { "owner()": "8da5cb5b", "transferOwnership(address)": "f2fde38b" }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (proxiable version).\",\"version\":1},\"userdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":\"ContractOwnershipBase\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is Context, IERC173 {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual override returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual override {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xd408d65cc5a0377e5310695c67400dfbd397d6537398d384a70f09b3bfdf8262\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8c069442d3de596ee13824f700ef4d640e1429aeaa6b82bfd919f177c656fb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": { "storage": [], "types": null },
          "userdoc": {
            "events": {
              "OwnershipTransferred(address,address)": { "notice": "Emitted when the contract ownership changes." }
            },
            "kind": "user",
            "methods": {
              "owner()": { "notice": "Gets the address of the contract owner." },
              "transferOwnership(address)": { "notice": "Sets the address of the new contract owner." }
            },
            "version": 1
          }
        }
      },
      "@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol": {
        "IERC173": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                { "indexed": true, "internalType": "address", "name": "previousOwner", "type": "address" },
                { "indexed": true, "internalType": "address", "name": "newOwner", "type": "address" }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [{ "internalType": "address", "name": "contractOwner", "type": "address" }],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [{ "internalType": "address", "name": "newOwner", "type": "address" }],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0",
            "events": {
              "OwnershipTransferred(address,address)": {
                "params": { "newOwner": "the new contract owner.", "previousOwner": "the previous contract owner." }
              }
            },
            "kind": "dev",
            "methods": {
              "owner()": { "returns": { "contractOwner": "The address of the contract owner." } },
              "transferOwnership(address)": {
                "details": "Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.",
                "params": {
                  "newOwner": "The address of the new contract owner. Using the zero address means renouncing ownership."
                }
              }
            },
            "title": "ERC-173 Contract Ownership Standard",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": { "owner()": "8da5cb5b", "transferOwnership(address)": "f2fde38b" }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0\",\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"contractOwner\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC-173 Contract Ownership Standard\",\"version\":1},\"userdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":\"IERC173\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": { "storage": [], "types": null },
          "userdoc": {
            "events": {
              "OwnershipTransferred(address,address)": { "notice": "Emitted when the contract ownership changes." }
            },
            "kind": "user",
            "methods": {
              "owner()": { "notice": "Gets the address of the contract owner." },
              "transferOwnership(address)": { "notice": "Sets the address of the new contract owner." }
            },
            "version": 1
          }
        }
      },
      "@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol": {
        "ContractOwnershipStorage": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                { "indexed": true, "internalType": "address", "name": "previousOwner", "type": "address" },
                { "indexed": true, "internalType": "address", "name": "newOwner", "type": "address" }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            }
          ],
          "devdoc": { "kind": "dev", "methods": {}, "version": 1 },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122036393bd92545ffd41abc8badede38803e381936f80890226d4d76019cc364c0c64736f6c63430008110033",
              "opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATASIZE CODECOPY EXTCODESIZE 0xD9 0x25 GASLIMIT SELFDESTRUCT 0xD4 BYTE 0xBC DUP12 0xAD 0xED 0xE3 DUP9 SUB 0xE3 DUP2 SWAP4 PUSH16 0x80890226D4D76019CC364C0C64736F6C PUSH4 0x43000811 STOP CALLER ",
              "sourceMap": "301:3582:3:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;301:3582:3;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122036393bd92545ffd41abc8badede38803e381936f80890226d4d76019cc364c0c64736f6c63430008110033",
              "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATASIZE CODECOPY EXTCODESIZE 0xD9 0x25 GASLIMIT SELFDESTRUCT 0xD4 BYTE 0xBC DUP12 0xAD 0xED 0xE3 DUP9 SUB 0xE3 DUP2 SWAP4 PUSH16 0x80890226D4D76019CC364C0C64736F6C PUSH4 0x43000811 STOP CALLER ",
              "sourceMap": "301:3582:3:-:0;;;;;;;;"
            },
            "gasEstimates": {
              "creation": { "codeDepositCost": "17200", "executionCost": "103", "totalCost": "17303" },
              "internal": {
                "constructorInit(struct ContractOwnershipStorage.Layout storage pointer,address)": "infinite",
                "enforceIsContractOwner(struct ContractOwnershipStorage.Layout storage pointer,address)": "infinite",
                "layout()": "infinite",
                "owner(struct ContractOwnershipStorage.Layout storage pointer)": "infinite",
                "proxyInit(struct ContractOwnershipStorage.Layout storage pointer,address)": "infinite",
                "transferOwnership(struct ContractOwnershipStorage.Layout storage pointer,address,address)": "infinite"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":\"ContractOwnershipStorage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8c069442d3de596ee13824f700ef4d640e1429aeaa6b82bfd919f177c656fb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": { "storage": [], "types": null },
          "userdoc": { "kind": "user", "methods": {}, "version": 1 }
        }
      },
      "@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol": {
        "InterfaceDetection": {
          "abi": [
            {
              "inputs": [{ "internalType": "bytes4", "name": "interfaceId", "type": "bytes4" }],
              "name": "supportsInterface",
              "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.",
            "kind": "dev",
            "methods": {
              "supportsInterface(bytes4)": {
                "details": "Note: This function call must use less than 30 000 gas.",
                "params": { "interfaceId": "the interface identifier to test." },
                "returns": {
                  "_0": "True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."
                }
              }
            },
            "title": "ERC165 Interface Detection Standard (immutable or proxiable version).",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": { "supportsInterface(bytes4)": "01ffc9a7" }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard (immutable or proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":\"InterfaceDetection\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xef423b77e65093f86e7f7ffc35e41f7008304976a7334bb3f9049db69d43eae9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": { "storage": [], "types": null },
          "userdoc": {
            "kind": "user",
            "methods": {
              "supportsInterface(bytes4)": { "notice": "Returns whether this contract implements a given interface." }
            },
            "version": 1
          }
        }
      },
      "@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol": {
        "IERC165": {
          "abi": [
            {
              "inputs": [{ "internalType": "bytes4", "name": "interfaceId", "type": "bytes4" }],
              "name": "supportsInterface",
              "outputs": [{ "internalType": "bool", "name": "supported", "type": "bool" }],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.",
            "kind": "dev",
            "methods": {
              "supportsInterface(bytes4)": {
                "details": "Note: This function call must use less than 30 000 gas.",
                "params": { "interfaceId": "the interface identifier to test." },
                "returns": {
                  "supported": "True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."
                }
              }
            },
            "title": "ERC165 Interface Detection Standard.",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": { "supportsInterface(bytes4)": "01ffc9a7" }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"supported\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": { "storage": [], "types": null },
          "userdoc": {
            "kind": "user",
            "methods": {
              "supportsInterface(bytes4)": { "notice": "Returns whether this contract implements a given interface." }
            },
            "version": 1
          }
        }
      },
      "@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol": {
        "InterfaceDetectionStorage": {
          "abi": [],
          "devdoc": { "kind": "dev", "methods": {}, "version": 1 },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207ee28cc8d921d3b2f377862cd713a6fd5007c16ee013e6ff173785f011447eeb64736f6c63430008110033",
              "opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH31 0xE28CC8D921D3B2F377862CD713A6FD5007C16EE013E6FF173785F011447EEB PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ",
              "sourceMap": "111:1678:6:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;111:1678:6;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207ee28cc8d921d3b2f377862cd713a6fd5007c16ee013e6ff173785f011447eeb64736f6c63430008110033",
              "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH31 0xE28CC8D921D3B2F377862CD713A6FD5007C16EE013E6FF173785F011447EEB PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ",
              "sourceMap": "111:1678:6:-:0;;;;;;;;"
            },
            "gasEstimates": {
              "creation": { "codeDepositCost": "17200", "executionCost": "103", "totalCost": "17303" },
              "internal": {
                "layout()": "infinite",
                "setSupportedInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)": "infinite",
                "supportsInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4)": "infinite"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":\"InterfaceDetectionStorage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": { "storage": [], "types": null },
          "userdoc": { "kind": "user", "methods": {}, "version": 1 }
        }
      },
      "@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol": {
        "IForwarderRegistry": {
          "abi": [
            {
              "inputs": [
                { "internalType": "address", "name": "sender", "type": "address" },
                { "internalType": "address", "name": "forwarder", "type": "address" }
              ],
              "name": "isApprovedForwarder",
              "outputs": [{ "internalType": "bool", "name": "isApproved", "type": "bool" }],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Derived from https://github.com/wighawag/universal-forwarder (MIT licence)",
            "kind": "dev",
            "methods": {
              "isApprovedForwarder(address,address)": {
                "params": { "forwarder": "The forwarder account.", "sender": "The sender account." },
                "returns": {
                  "isApproved": "True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise."
                }
              }
            },
            "title": "Universal Meta-Transactions Forwarder Registry.",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": { "isApprovedForwarder(address,address)": "8929a8ca" }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isApprovedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{\"isApprovedForwarder(address,address)\":{\"params\":{\"forwarder\":\"The forwarder account.\",\"sender\":\"The sender account.\"},\"returns\":{\"isApproved\":\"True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\"}}},\"title\":\"Universal Meta-Transactions Forwarder Registry.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isApprovedForwarder(address,address)\":{\"notice\":\"Checks whether an account is as an approved meta-transaction forwarder for a sender account.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":\"IForwarderRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xe3487e6d79da78bc0ea5b4649ca9cc7a0376800280e3e389a5e70fc7ced74d00\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": { "storage": [], "types": null },
          "userdoc": {
            "kind": "user",
            "methods": {
              "isApprovedForwarder(address,address)": {
                "notice": "Checks whether an account is as an approved meta-transaction forwarder for a sender account."
              }
            },
            "version": 1
          }
        }
      },
      "@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol": {
        "ProxyInitialization": {
          "abi": [],
          "devdoc": { "kind": "dev", "methods": {}, "version": 1 },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fc94e7a6a3360beeb1586f37beebb947c6d4d1325d736e78773bc4b68bcd18bf64736f6c63430008110033",
              "opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFC SWAP5 0xE7 0xA6 LOG3 CALLDATASIZE SIGNEXTEND 0xEE 0xB1 PC PUSH16 0x37BEEBB947C6D4D1325D736E78773BC4 0xB6 DUP12 0xCD XOR 0xBF PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ",
              "sourceMap": "225:593:8:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;225:593:8;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fc94e7a6a3360beeb1586f37beebb947c6d4d1325d736e78773bc4b68bcd18bf64736f6c63430008110033",
              "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFC SWAP5 0xE7 0xA6 LOG3 CALLDATASIZE SIGNEXTEND 0xEE 0xB1 PC PUSH16 0x37BEEBB947C6D4D1325D736E78773BC4 0xB6 DUP12 0xCD XOR 0xBF PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ",
              "sourceMap": "225:593:8:-:0;;;;;;;;"
            },
            "gasEstimates": {
              "creation": { "codeDepositCost": "17200", "executionCost": "103", "totalCost": "17303" },
              "internal": { "setPhase(bytes32,uint256)": "infinite" }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Multiple calls protection for storage-modifying proxy initialization functions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":\"ProxyInitialization\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": { "storage": [], "types": null },
          "userdoc": {
            "kind": "user",
            "methods": {},
            "notice": "Multiple calls protection for storage-modifying proxy initialization functions.",
            "version": 1
          }
        }
      },
      "@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol": {
        "TokenRecovery": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                { "indexed": true, "internalType": "address", "name": "previousOwner", "type": "address" },
                { "indexed": true, "internalType": "address", "name": "newOwner", "type": "address" }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [{ "internalType": "address", "name": "", "type": "address" }],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                { "internalType": "address[]", "name": "accounts", "type": "address[]" },
                { "internalType": "contract IERC20[]", "name": "tokens", "type": "address[]" },
                { "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }
              ],
              "name": "recoverERC20s",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                { "internalType": "address[]", "name": "accounts", "type": "address[]" },
                { "internalType": "contract IERC721[]", "name": "contracts", "type": "address[]" },
                { "internalType": "uint256[]", "name": "tokenIds", "type": "uint256[]" }
              ],
              "name": "recoverERC721s",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                { "internalType": "address payable[]", "name": "accounts", "type": "address[]" },
                { "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }
              ],
              "name": "recoverETH",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [{ "internalType": "bytes4", "name": "interfaceId", "type": "bytes4" }],
              "name": "supportsInterface",
              "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [{ "internalType": "address", "name": "newOwner", "type": "address" }],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "This contract is to be used via inheritance in an immutable (non-proxied) implementation.",
            "kind": "dev",
            "methods": {
              "owner()": { "returns": { "_0": "The address of the contract owner." } },
              "recoverERC20s(address[],address[],uint256[])": {
                "details": "Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.",
                "params": {
                  "accounts": "the list of accounts to transfer the tokens to.",
                  "amounts": "the list of token amounts to transfer.",
                  "tokens": "the list of ERC20 token addresses."
                }
              },
              "recoverERC721s(address[],address[],uint256[])": {
                "details": "Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.",
                "params": {
                  "accounts": "the list of accounts to transfer the tokens to.",
                  "contracts": "the list of ERC721 contract addresses.",
                  "tokenIds": "the list of token ids to transfer."
                }
              },
              "recoverETH(address[],uint256[])": {
                "details": "Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.",
                "params": {
                  "accounts": "the list of accounts to transfer the tokens to.",
                  "amounts": "the list of token amounts to transfer."
                }
              },
              "supportsInterface(bytes4)": {
                "details": "Note: This function call must use less than 30 000 gas.",
                "params": { "interfaceId": "the interface identifier to test." },
                "returns": {
                  "_0": "True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."
                }
              },
              "transferOwnership(address)": {
                "details": "Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.",
                "params": {
                  "newOwner": "The address of the new contract owner. Using the zero address means renouncing ownership."
                }
              }
            },
            "title": "Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "owner()": "8da5cb5b",
              "recoverERC20s(address[],address[],uint256[])": "73c8a958",
              "recoverERC721s(address[],address[],uint256[])": "c3666c36",
              "recoverETH(address[],uint256[])": "f7ba94bd",
              "supportsInterface(bytes4)": "01ffc9a7",
              "transferOwnership(address)": "f2fde38b"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC721[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"recoverERC20s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\",\"tokens\":\"the list of ERC20 token addresses.\"}},\"recoverERC721s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"contracts\":\"the list of ERC721 contract addresses.\",\"tokenIds\":\"the list of token ids to transfer.\"}},\"recoverETH(address[],uint256[])\":{\"details\":\"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\",\"version\":1},\"userdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"recoverERC20s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverERC721s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverETH(address[],uint256[])\":{\"notice\":\"Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\":\"TokenRecovery\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x7c8f90c1f72ccdd900c212f4d0067907c906e4a64856f1b67fee7f7ec13e1f74\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is Context, IERC173 {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual override returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual override {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xd408d65cc5a0377e5310695c67400dfbd397d6537398d384a70f09b3bfdf8262\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8c069442d3de596ee13824f700ef4d640e1429aeaa6b82bfd919f177c656fb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xef423b77e65093f86e7f7ffc35e41f7008304976a7334bb3f9049db69d43eae9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {TokenRecoveryBase} from \\\"./base/TokenRecoveryBase.sol\\\";\\nimport {ContractOwnership} from \\\"./../access/ContractOwnership.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract TokenRecovery is TokenRecoveryBase, ContractOwnership {\\n\\n}\\n\",\"keccak256\":\"0x573429048b4d0f019904aec1f120b8c9b5e64a028ede705eff43942ad0aec46d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\ncontract TokenRecoveryBase is Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        require(length == amounts.length, \\\"Recovery: inconsistent arrays\\\");\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                accounts[i].sendValue(amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        require(length == tokens.length && length == amounts.length, \\\"Recovery: inconsistent arrays\\\");\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                tokens[i].safeTransfer(accounts[i], amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        require(length == contracts.length && length == tokenIds.length, \\\"Recovery: inconsistent arrays\\\");\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                contracts[i].transferFrom(address(this), accounts[i], tokenIds[i]);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd26d7268e7cdfc11150ec6ffb1f3552b541f65972012e2ecacaa9a58c4bf4152\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0x1b9d3522fab7ad81b4757fa0ce919f4320f08249546b3e3bd79da7cf12d55cee\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": { "storage": [], "types": null },
          "userdoc": {
            "events": {
              "OwnershipTransferred(address,address)": { "notice": "Emitted when the contract ownership changes." }
            },
            "kind": "user",
            "methods": {
              "owner()": { "notice": "Gets the address of the contract owner." },
              "recoverERC20s(address[],address[],uint256[])": {
                "notice": "Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts."
              },
              "recoverERC721s(address[],address[],uint256[])": {
                "notice": "Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts."
              },
              "recoverETH(address[],uint256[])": {
                "notice": "Extract ETH tokens which were accidentally sent to the contract to a list of accounts."
              },
              "supportsInterface(bytes4)": { "notice": "Returns whether this contract implements a given interface." },
              "transferOwnership(address)": { "notice": "Sets the address of the new contract owner." }
            },
            "version": 1
          }
        }
      },
      "@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol": {
        "TokenRecoveryBase": {
          "abi": [
            {
              "inputs": [
                { "internalType": "address[]", "name": "accounts", "type": "address[]" },
                { "internalType": "contract IERC20[]", "name": "tokens", "type": "address[]" },
                { "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }
              ],
              "name": "recoverERC20s",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                { "internalType": "address[]", "name": "accounts", "type": "address[]" },
                { "internalType": "contract IERC721[]", "name": "contracts", "type": "address[]" },
                { "internalType": "uint256[]", "name": "tokenIds", "type": "uint256[]" }
              ],
              "name": "recoverERC721s",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                { "internalType": "address payable[]", "name": "accounts", "type": "address[]" },
                { "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }
              ],
              "name": "recoverETH",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).",
            "kind": "dev",
            "methods": {
              "recoverERC20s(address[],address[],uint256[])": {
                "details": "Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.",
                "params": {
                  "accounts": "the list of accounts to transfer the tokens to.",
                  "amounts": "the list of token amounts to transfer.",
                  "tokens": "the list of ERC20 token addresses."
                }
              },
              "recoverERC721s(address[],address[],uint256[])": {
                "details": "Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.",
                "params": {
                  "accounts": "the list of accounts to transfer the tokens to.",
                  "contracts": "the list of ERC721 contract addresses.",
                  "tokenIds": "the list of token ids to transfer."
                }
              },
              "recoverETH(address[],uint256[])": {
                "details": "Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.",
                "params": {
                  "accounts": "the list of accounts to transfer the tokens to.",
                  "amounts": "the list of token amounts to transfer."
                }
              }
            },
            "title": "Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b50610cef806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806373c8a95814610046578063c3666c361461005b578063f7ba94bd1461006e575b600080fd5b610059610054366004610a4e565b610081565b005b610059610069366004610a4e565b6101b1565b61005961007c366004610ae8565b610354565b610094335b61008e610440565b90610474565b8483811480156100a357508082145b61010e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5265636f766572793a20696e636f6e73697374656e742061727261797300000060448201526064015b60405180910390fd5b60005b8181146101a75761019f88888381811061012d5761012d610b54565b90506020020160208101906101429190610ba8565b85858481811061015457610154610b54565b9050602002013588888581811061016d5761016d610b54565b90506020020160208101906101829190610ba8565b73ffffffffffffffffffffffffffffffffffffffff1691906104fb565b600101610111565b5050505050505050565b6101ba33610086565b8483811480156101c957508082145b61022f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5265636f766572793a20696e636f6e73697374656e74206172726179730000006044820152606401610105565b60005b8181146101a75785858281811061024b5761024b610b54565b90506020020160208101906102609190610ba8565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd308a8a8581811061028e5761028e610b54565b90506020020160208101906102a39190610ba8565b8787868181106102b5576102b5610b54565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b15801561033157600080fd5b505af1158015610345573d6000803e3d6000fd5b50505050806001019050610232565b61035d33610086565b828181146103c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5265636f766572793a20696e636f6e73697374656e74206172726179730000006044820152606401610105565b60005b818114610438576104308484838181106103e6576103e6610b54565b905060200201358787848181106103ff576103ff610b54565b90506020020160208101906104149190610ba8565b73ffffffffffffffffffffffffffffffffffffffff169061058d565b6001016103ca565b505050505050565b60008061046e60017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd610bcc565b92915050565b815473ffffffffffffffffffffffffffffffffffffffff8281169116146104f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f776e6572736869703a206e6f7420746865206f776e657200000000000000006044820152606401610105565b5050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526105889084906106e7565b505050565b804710156105f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610105565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114610651576040519150601f19603f3d011682016040523d82523d6000602084013e610656565b606091505b5050905080610588576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610105565b6000610749826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166107f39092919063ffffffff16565b80519091501561058857808060200190518101906107679190610c06565b610588576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610105565b6060610802848460008561080a565b949350505050565b60608247101561089c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610105565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516108c59190610c4c565b60006040518083038185875af1925050503d8060008114610902576040519150601f19603f3d011682016040523d82523d6000602084013e610907565b606091505b509150915061091887838387610923565b979650505050505050565b606083156109b95782516000036109b25773ffffffffffffffffffffffffffffffffffffffff85163b6109b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610105565b5081610802565b61080283838151156109ce5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101059190610c68565b60008083601f840112610a1457600080fd5b50813567ffffffffffffffff811115610a2c57600080fd5b6020830191508360208260051b8501011115610a4757600080fd5b9250929050565b60008060008060008060608789031215610a6757600080fd5b863567ffffffffffffffff80821115610a7f57600080fd5b610a8b8a838b01610a02565b90985096506020890135915080821115610aa457600080fd5b610ab08a838b01610a02565b90965094506040890135915080821115610ac957600080fd5b50610ad689828a01610a02565b979a9699509497509295939492505050565b60008060008060408587031215610afe57600080fd5b843567ffffffffffffffff80821115610b1657600080fd5b610b2288838901610a02565b90965094506020870135915080821115610b3b57600080fd5b50610b4887828801610a02565b95989497509550505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610ba557600080fd5b50565b600060208284031215610bba57600080fd5b8135610bc581610b83565b9392505050565b8181038181111561046e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060208284031215610c1857600080fd5b81518015158114610bc557600080fd5b60005b83811015610c43578181015183820152602001610c2b565b50506000910152565b60008251610c5e818460208701610c28565b9190910192915050565b6020815260008251806020840152610c87816040850160208701610c28565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea26469706673582212206ced8f5cf2c471ed1b5cb59f2660a86f4d6e0e232856debef5e1d92b92b6c81464736f6c63430008110033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xCEF DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x73C8A958 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0xC3666C36 EQ PUSH2 0x5B JUMPI DUP1 PUSH4 0xF7BA94BD EQ PUSH2 0x6E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x59 PUSH2 0x54 CALLDATASIZE PUSH1 0x4 PUSH2 0xA4E JUMP JUMPDEST PUSH2 0x81 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x59 PUSH2 0x69 CALLDATASIZE PUSH1 0x4 PUSH2 0xA4E JUMP JUMPDEST PUSH2 0x1B1 JUMP JUMPDEST PUSH2 0x59 PUSH2 0x7C CALLDATASIZE PUSH1 0x4 PUSH2 0xAE8 JUMP JUMPDEST PUSH2 0x354 JUMP JUMPDEST PUSH2 0x94 CALLER JUMPDEST PUSH2 0x8E PUSH2 0x440 JUMP JUMPDEST SWAP1 PUSH2 0x474 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ DUP1 ISZERO PUSH2 0xA3 JUMPI POP DUP1 DUP3 EQ JUMPDEST PUSH2 0x10E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265636F766572793A20696E636F6E73697374656E7420617272617973000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x1A7 JUMPI PUSH2 0x19F DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x12D JUMPI PUSH2 0x12D PUSH2 0xB54 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x142 SWAP2 SWAP1 PUSH2 0xBA8 JUMP JUMPDEST DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x154 JUMPI PUSH2 0x154 PUSH2 0xB54 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x16D JUMPI PUSH2 0x16D PUSH2 0xB54 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x182 SWAP2 SWAP1 PUSH2 0xBA8 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 SWAP1 PUSH2 0x4FB JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x111 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1BA CALLER PUSH2 0x86 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ DUP1 ISZERO PUSH2 0x1C9 JUMPI POP DUP1 DUP3 EQ JUMPDEST PUSH2 0x22F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265636F766572793A20696E636F6E73697374656E7420617272617973000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x105 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x1A7 JUMPI DUP6 DUP6 DUP3 DUP2 DUP2 LT PUSH2 0x24B JUMPI PUSH2 0x24B PUSH2 0xB54 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x260 SWAP2 SWAP1 PUSH2 0xBA8 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD ADDRESS DUP11 DUP11 DUP6 DUP2 DUP2 LT PUSH2 0x28E JUMPI PUSH2 0x28E PUSH2 0xB54 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x2A3 SWAP2 SWAP1 PUSH2 0xBA8 JUMP JUMPDEST DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0x2B5 JUMPI PUSH2 0x2B5 PUSH2 0xB54 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP9 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP4 AND PUSH1 0x24 DUP6 ADD MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x331 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x345 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x232 JUMP JUMPDEST PUSH2 0x35D CALLER PUSH2 0x86 JUMP JUMPDEST DUP3 DUP2 DUP2 EQ PUSH2 0x3C7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265636F766572793A20696E636F6E73697374656E7420617272617973000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x105 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x438 JUMPI PUSH2 0x430 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x3E6 JUMPI PUSH2 0x3E6 PUSH2 0xB54 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0x3FF JUMPI PUSH2 0x3FF PUSH2 0xB54 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x414 SWAP2 SWAP1 PUSH2 0xBA8 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x58D JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x3CA JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x46E PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0xBCC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x4F7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E6572736869703A206E6F7420746865206F776E65720000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x105 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x588 SWAP1 DUP5 SWAP1 PUSH2 0x6E7 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0x5F7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x105 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x651 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x656 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x588 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20756E61626C6520746F2073656E642076616C75652C2072 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6563697069656E74206D61792068617665207265766572746564000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x105 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x749 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x7F3 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x588 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x767 SWAP2 SWAP1 PUSH2 0xC06 JUMP JUMPDEST PUSH2 0x588 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x105 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x802 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x80A JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x89C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x105 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x8C5 SWAP2 SWAP1 PUSH2 0xC4C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x902 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x907 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x918 DUP8 DUP4 DUP4 DUP8 PUSH2 0x923 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x9B9 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x9B2 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND EXTCODESIZE PUSH2 0x9B2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x105 JUMP JUMPDEST POP DUP2 PUSH2 0x802 JUMP JUMPDEST PUSH2 0x802 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x9CE JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x105 SWAP2 SWAP1 PUSH2 0xC68 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xA14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA2C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xA47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0xA67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xA7F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA8B DUP11 DUP4 DUP12 ADD PUSH2 0xA02 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xAA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAB0 DUP11 DUP4 DUP12 ADD PUSH2 0xA02 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xAC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAD6 DUP10 DUP3 DUP11 ADD PUSH2 0xA02 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xAFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xB16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB22 DUP9 DUP4 DUP10 ADD PUSH2 0xA02 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xB3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB48 DUP8 DUP3 DUP9 ADD PUSH2 0xA02 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xBA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xBC5 DUP2 PUSH2 0xB83 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x46E JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xBC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xC43 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xC2B JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xC5E DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xC28 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xC87 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0xC28 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH13 0xED8F5CF2C471ED1B5CB59F2660 0xA8 PUSH16 0x4D6E0E232856DEBEF5E1D92B92B6C814 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ",
              "sourceMap": "782:3970:10:-:0;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "@_callOptionalReturn_1216": { "entryPoint": 1767, "id": 1216, "parameterSlots": 2, "returnSlots": 0 },
                "@_msgSender_1559": { "entryPoint": null, "id": 1559, "parameterSlots": 0, "returnSlots": 1 },
                "@_revert_1546": { "entryPoint": null, "id": 1546, "parameterSlots": 2, "returnSlots": 0 },
                "@enforceIsContractOwner_294": { "entryPoint": 1140, "id": 294, "parameterSlots": 2, "returnSlots": 0 },
                "@functionCallWithValue_1371": {
                  "entryPoint": 2058,
                  "id": 1371,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "@functionCall_1307": { "entryPoint": 2035, "id": 1307, "parameterSlots": 3, "returnSlots": 1 },
                "@isContract_1235": { "entryPoint": null, "id": 1235, "parameterSlots": 1, "returnSlots": 1 },
                "@layout_306": { "entryPoint": 1088, "id": 306, "parameterSlots": 0, "returnSlots": 1 },
                "@recoverERC20s_662": { "entryPoint": 129, "id": 662, "parameterSlots": 6, "returnSlots": 0 },
                "@recoverERC721s_732": { "entryPoint": 433, "id": 732, "parameterSlots": 6, "returnSlots": 0 },
                "@recoverETH_596": { "entryPoint": 852, "id": 596, "parameterSlots": 4, "returnSlots": 0 },
                "@safeTransfer_968": { "entryPoint": 1275, "id": 968, "parameterSlots": 3, "returnSlots": 0 },
                "@sendValue_1269": { "entryPoint": 1421, "id": 1269, "parameterSlots": 2, "returnSlots": 0 },
                "@verifyCallResultFromTarget_1502": {
                  "entryPoint": 2339,
                  "id": 1502,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "abi_decode_array_address_dyn_calldata": {
                  "entryPoint": 2562,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_tuple_t_address": { "entryPoint": 2984, "id": null, "parameterSlots": 2, "returnSlots": 1 },
                "abi_decode_tuple_t_address_payable": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$900_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr": {
                  "entryPoint": 2638,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 6
                },
                "abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$819_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 6
                },
                "abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr": {
                  "entryPoint": 2792,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 4
                },
                "abi_decode_tuple_t_bool_fromMemory": {
                  "entryPoint": 3078,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_contract$_IERC20_$900": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_contract$_IERC721_$819": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 3148,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": 3176,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_12227dcd596297e685bdc66ab01e81b5228df9a6bdd1fe7960df703f31587551__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "checked_sub_t_uint256": { "entryPoint": 3020, "id": null, "parameterSlots": 2, "returnSlots": 1 },
                "copy_memory_to_memory_with_cleanup": {
                  "entryPoint": 3112,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "panic_error_0x32": { "entryPoint": 2900, "id": null, "parameterSlots": 0, "returnSlots": 0 },
                "validator_revert_address": { "entryPoint": 2947, "id": null, "parameterSlots": 1, "returnSlots": 0 }
              },
              "generatedSources": [
                {
                  "ast": {
                    "nodeType": "YulBlock",
                    "src": "0:9940:21",
                    "statements": [
                      { "nodeType": "YulBlock", "src": "6:3:21", "statements": [] },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "98:283:21",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "147:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "156:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "159:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "149:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "149:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "149:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          { "name": "offset", "nodeType": "YulIdentifier", "src": "126:6:21" },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "134:4:21",
                                            "type": "",
                                            "value": "0x1f"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "122:3:21"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "122:17:21"
                                      },
                                      { "name": "end", "nodeType": "YulIdentifier", "src": "141:3:21" }
                                    ],
                                    "functionName": { "name": "slt", "nodeType": "YulIdentifier", "src": "118:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "118:27:21"
                                  }
                                ],
                                "functionName": { "name": "iszero", "nodeType": "YulIdentifier", "src": "111:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "111:35:21"
                              },
                              "nodeType": "YulIf",
                              "src": "108:55:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "172:30:21",
                              "value": {
                                "arguments": [{ "name": "offset", "nodeType": "YulIdentifier", "src": "195:6:21" }],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "182:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "182:20:21"
                              },
                              "variableNames": [{ "name": "length", "nodeType": "YulIdentifier", "src": "172:6:21" }]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "245:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "254:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "257:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "247:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "247:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "247:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "length", "nodeType": "YulIdentifier", "src": "217:6:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "225:18:21",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "214:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "214:30:21"
                              },
                              "nodeType": "YulIf",
                              "src": "211:50:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "270:29:21",
                              "value": {
                                "arguments": [
                                  { "name": "offset", "nodeType": "YulIdentifier", "src": "286:6:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "294:4:21",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "282:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "282:17:21"
                              },
                              "variableNames": [{ "name": "arrayPos", "nodeType": "YulIdentifier", "src": "270:8:21" }]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "359:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "368:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "371:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "361:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "361:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "361:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          { "name": "offset", "nodeType": "YulIdentifier", "src": "322:6:21" },
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "334:1:21",
                                                "type": "",
                                                "value": "5"
                                              },
                                              { "name": "length", "nodeType": "YulIdentifier", "src": "337:6:21" }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "330:3:21"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "330:14:21"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "318:3:21"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "318:27:21"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "347:4:21",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "314:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "314:38:21"
                                  },
                                  { "name": "end", "nodeType": "YulIdentifier", "src": "354:3:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "311:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "311:47:21"
                              },
                              "nodeType": "YulIf",
                              "src": "308:67:21"
                            }
                          ]
                        },
                        "name": "abi_decode_array_address_dyn_calldata",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "offset", "nodeType": "YulTypedName", "src": "61:6:21", "type": "" },
                          { "name": "end", "nodeType": "YulTypedName", "src": "69:3:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "arrayPos", "nodeType": "YulTypedName", "src": "77:8:21", "type": "" },
                          { "name": "length", "nodeType": "YulTypedName", "src": "87:6:21", "type": "" }
                        ],
                        "src": "14:367:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "609:879:21",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "655:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "664:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "667:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "657:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "657:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "657:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "630:7:21" },
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "639:9:21" }
                                    ],
                                    "functionName": { "name": "sub", "nodeType": "YulIdentifier", "src": "626:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "626:23:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "651:2:21",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": { "name": "slt", "nodeType": "YulIdentifier", "src": "622:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "622:32:21"
                              },
                              "nodeType": "YulIf",
                              "src": "619:52:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "680:37:21",
                              "value": {
                                "arguments": [{ "name": "headStart", "nodeType": "YulIdentifier", "src": "707:9:21" }],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "694:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "694:23:21"
                              },
                              "variables": [
                                { "name": "offset", "nodeType": "YulTypedName", "src": "684:6:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "726:28:21",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "736:18:21",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              },
                              "variables": [{ "name": "_1", "nodeType": "YulTypedName", "src": "730:2:21", "type": "" }]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "781:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "790:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "793:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "783:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "783:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "783:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "offset", "nodeType": "YulIdentifier", "src": "769:6:21" },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "777:2:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "766:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "766:14:21"
                              },
                              "nodeType": "YulIf",
                              "src": "763:34:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "806:96:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "874:9:21" },
                                      { "name": "offset", "nodeType": "YulIdentifier", "src": "885:6:21" }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "870:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "870:22:21"
                                  },
                                  { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "894:7:21" }
                                ],
                                "functionName": {
                                  "name": "abi_decode_array_address_dyn_calldata",
                                  "nodeType": "YulIdentifier",
                                  "src": "832:37:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "832:70:21"
                              },
                              "variables": [
                                { "name": "value0_1", "nodeType": "YulTypedName", "src": "810:8:21", "type": "" },
                                { "name": "value1_1", "nodeType": "YulTypedName", "src": "820:8:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "911:18:21",
                              "value": { "name": "value0_1", "nodeType": "YulIdentifier", "src": "921:8:21" },
                              "variableNames": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "911:6:21" }]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "938:18:21",
                              "value": { "name": "value1_1", "nodeType": "YulIdentifier", "src": "948:8:21" },
                              "variableNames": [{ "name": "value1", "nodeType": "YulIdentifier", "src": "938:6:21" }]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "965:48:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "998:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1009:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "994:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "994:18:21"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "981:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "981:32:21"
                              },
                              "variables": [
                                { "name": "offset_1", "nodeType": "YulTypedName", "src": "969:8:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1042:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1051:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1054:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "1044:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1044:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1044:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "offset_1", "nodeType": "YulIdentifier", "src": "1028:8:21" },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "1038:2:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "1025:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1025:16:21"
                              },
                              "nodeType": "YulIf",
                              "src": "1022:36:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1067:98:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "1135:9:21" },
                                      { "name": "offset_1", "nodeType": "YulIdentifier", "src": "1146:8:21" }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "1131:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1131:24:21"
                                  },
                                  { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "1157:7:21" }
                                ],
                                "functionName": {
                                  "name": "abi_decode_array_address_dyn_calldata",
                                  "nodeType": "YulIdentifier",
                                  "src": "1093:37:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1093:72:21"
                              },
                              "variables": [
                                { "name": "value2_1", "nodeType": "YulTypedName", "src": "1071:8:21", "type": "" },
                                { "name": "value3_1", "nodeType": "YulTypedName", "src": "1081:8:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1174:18:21",
                              "value": { "name": "value2_1", "nodeType": "YulIdentifier", "src": "1184:8:21" },
                              "variableNames": [{ "name": "value2", "nodeType": "YulIdentifier", "src": "1174:6:21" }]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1201:18:21",
                              "value": { "name": "value3_1", "nodeType": "YulIdentifier", "src": "1211:8:21" },
                              "variableNames": [{ "name": "value3", "nodeType": "YulIdentifier", "src": "1201:6:21" }]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1228:48:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "1261:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1272:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "1257:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1257:18:21"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "1244:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1244:32:21"
                              },
                              "variables": [
                                { "name": "offset_2", "nodeType": "YulTypedName", "src": "1232:8:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1305:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1314:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1317:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "1307:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1307:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1307:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "offset_2", "nodeType": "YulIdentifier", "src": "1291:8:21" },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "1301:2:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "1288:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1288:16:21"
                              },
                              "nodeType": "YulIf",
                              "src": "1285:36:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1330:98:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "1398:9:21" },
                                      { "name": "offset_2", "nodeType": "YulIdentifier", "src": "1409:8:21" }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "1394:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1394:24:21"
                                  },
                                  { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "1420:7:21" }
                                ],
                                "functionName": {
                                  "name": "abi_decode_array_address_dyn_calldata",
                                  "nodeType": "YulIdentifier",
                                  "src": "1356:37:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1356:72:21"
                              },
                              "variables": [
                                { "name": "value4_1", "nodeType": "YulTypedName", "src": "1334:8:21", "type": "" },
                                { "name": "value5_1", "nodeType": "YulTypedName", "src": "1344:8:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1437:18:21",
                              "value": { "name": "value4_1", "nodeType": "YulIdentifier", "src": "1447:8:21" },
                              "variableNames": [{ "name": "value4", "nodeType": "YulIdentifier", "src": "1437:6:21" }]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1464:18:21",
                              "value": { "name": "value5_1", "nodeType": "YulIdentifier", "src": "1474:8:21" },
                              "variableNames": [{ "name": "value5", "nodeType": "YulIdentifier", "src": "1464:6:21" }]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$900_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "535:9:21", "type": "" },
                          { "name": "dataEnd", "nodeType": "YulTypedName", "src": "546:7:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "value0", "nodeType": "YulTypedName", "src": "558:6:21", "type": "" },
                          { "name": "value1", "nodeType": "YulTypedName", "src": "566:6:21", "type": "" },
                          { "name": "value2", "nodeType": "YulTypedName", "src": "574:6:21", "type": "" },
                          { "name": "value3", "nodeType": "YulTypedName", "src": "582:6:21", "type": "" },
                          { "name": "value4", "nodeType": "YulTypedName", "src": "590:6:21", "type": "" },
                          { "name": "value5", "nodeType": "YulTypedName", "src": "598:6:21", "type": "" }
                        ],
                        "src": "386:1102:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1717:879:21",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1763:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1772:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1775:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "1765:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1765:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1765:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "1738:7:21" },
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "1747:9:21" }
                                    ],
                                    "functionName": { "name": "sub", "nodeType": "YulIdentifier", "src": "1734:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1734:23:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1759:2:21",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": { "name": "slt", "nodeType": "YulIdentifier", "src": "1730:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1730:32:21"
                              },
                              "nodeType": "YulIf",
                              "src": "1727:52:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1788:37:21",
                              "value": {
                                "arguments": [{ "name": "headStart", "nodeType": "YulIdentifier", "src": "1815:9:21" }],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "1802:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1802:23:21"
                              },
                              "variables": [
                                { "name": "offset", "nodeType": "YulTypedName", "src": "1792:6:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1834:28:21",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1844:18:21",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              },
                              "variables": [
                                { "name": "_1", "nodeType": "YulTypedName", "src": "1838:2:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1889:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1898:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1901:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "1891:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1891:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1891:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "offset", "nodeType": "YulIdentifier", "src": "1877:6:21" },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "1885:2:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "1874:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1874:14:21"
                              },
                              "nodeType": "YulIf",
                              "src": "1871:34:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1914:96:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "1982:9:21" },
                                      { "name": "offset", "nodeType": "YulIdentifier", "src": "1993:6:21" }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "1978:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1978:22:21"
                                  },
                                  { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "2002:7:21" }
                                ],
                                "functionName": {
                                  "name": "abi_decode_array_address_dyn_calldata",
                                  "nodeType": "YulIdentifier",
                                  "src": "1940:37:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1940:70:21"
                              },
                              "variables": [
                                { "name": "value0_1", "nodeType": "YulTypedName", "src": "1918:8:21", "type": "" },
                                { "name": "value1_1", "nodeType": "YulTypedName", "src": "1928:8:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2019:18:21",
                              "value": { "name": "value0_1", "nodeType": "YulIdentifier", "src": "2029:8:21" },
                              "variableNames": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "2019:6:21" }]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2046:18:21",
                              "value": { "name": "value1_1", "nodeType": "YulIdentifier", "src": "2056:8:21" },
                              "variableNames": [{ "name": "value1", "nodeType": "YulIdentifier", "src": "2046:6:21" }]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2073:48:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "2106:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2117:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "2102:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2102:18:21"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "2089:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2089:32:21"
                              },
                              "variables": [
                                { "name": "offset_1", "nodeType": "YulTypedName", "src": "2077:8:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2150:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2159:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2162:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "2152:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2152:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2152:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "offset_1", "nodeType": "YulIdentifier", "src": "2136:8:21" },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "2146:2:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "2133:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "2133:16:21"
                              },
                              "nodeType": "YulIf",
                              "src": "2130:36:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2175:98:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "2243:9:21" },
                                      { "name": "offset_1", "nodeType": "YulIdentifier", "src": "2254:8:21" }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "2239:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2239:24:21"
                                  },
                                  { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "2265:7:21" }
                                ],
                                "functionName": {
                                  "name": "abi_decode_array_address_dyn_calldata",
                                  "nodeType": "YulIdentifier",
                                  "src": "2201:37:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2201:72:21"
                              },
                              "variables": [
                                { "name": "value2_1", "nodeType": "YulTypedName", "src": "2179:8:21", "type": "" },
                                { "name": "value3_1", "nodeType": "YulTypedName", "src": "2189:8:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2282:18:21",
                              "value": { "name": "value2_1", "nodeType": "YulIdentifier", "src": "2292:8:21" },
                              "variableNames": [{ "name": "value2", "nodeType": "YulIdentifier", "src": "2282:6:21" }]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2309:18:21",
                              "value": { "name": "value3_1", "nodeType": "YulIdentifier", "src": "2319:8:21" },
                              "variableNames": [{ "name": "value3", "nodeType": "YulIdentifier", "src": "2309:6:21" }]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2336:48:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "2369:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2380:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "2365:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2365:18:21"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "2352:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2352:32:21"
                              },
                              "variables": [
                                { "name": "offset_2", "nodeType": "YulTypedName", "src": "2340:8:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2413:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2422:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2425:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "2415:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2415:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2415:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "offset_2", "nodeType": "YulIdentifier", "src": "2399:8:21" },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "2409:2:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "2396:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "2396:16:21"
                              },
                              "nodeType": "YulIf",
                              "src": "2393:36:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2438:98:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "2506:9:21" },
                                      { "name": "offset_2", "nodeType": "YulIdentifier", "src": "2517:8:21" }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "2502:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2502:24:21"
                                  },
                                  { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "2528:7:21" }
                                ],
                                "functionName": {
                                  "name": "abi_decode_array_address_dyn_calldata",
                                  "nodeType": "YulIdentifier",
                                  "src": "2464:37:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2464:72:21"
                              },
                              "variables": [
                                { "name": "value4_1", "nodeType": "YulTypedName", "src": "2442:8:21", "type": "" },
                                { "name": "value5_1", "nodeType": "YulTypedName", "src": "2452:8:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2545:18:21",
                              "value": { "name": "value4_1", "nodeType": "YulIdentifier", "src": "2555:8:21" },
                              "variableNames": [{ "name": "value4", "nodeType": "YulIdentifier", "src": "2545:6:21" }]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2572:18:21",
                              "value": { "name": "value5_1", "nodeType": "YulIdentifier", "src": "2582:8:21" },
                              "variableNames": [{ "name": "value5", "nodeType": "YulIdentifier", "src": "2572:6:21" }]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$819_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "1643:9:21", "type": "" },
                          { "name": "dataEnd", "nodeType": "YulTypedName", "src": "1654:7:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "value0", "nodeType": "YulTypedName", "src": "1666:6:21", "type": "" },
                          { "name": "value1", "nodeType": "YulTypedName", "src": "1674:6:21", "type": "" },
                          { "name": "value2", "nodeType": "YulTypedName", "src": "1682:6:21", "type": "" },
                          { "name": "value3", "nodeType": "YulTypedName", "src": "1690:6:21", "type": "" },
                          { "name": "value4", "nodeType": "YulTypedName", "src": "1698:6:21", "type": "" },
                          { "name": "value5", "nodeType": "YulTypedName", "src": "1706:6:21", "type": "" }
                        ],
                        "src": "1493:1103:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "2766:616:21",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2812:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2821:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2824:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "2814:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2814:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2814:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "2787:7:21" },
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "2796:9:21" }
                                    ],
                                    "functionName": { "name": "sub", "nodeType": "YulIdentifier", "src": "2783:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2783:23:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2808:2:21",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": { "name": "slt", "nodeType": "YulIdentifier", "src": "2779:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "2779:32:21"
                              },
                              "nodeType": "YulIf",
                              "src": "2776:52:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2837:37:21",
                              "value": {
                                "arguments": [{ "name": "headStart", "nodeType": "YulIdentifier", "src": "2864:9:21" }],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "2851:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2851:23:21"
                              },
                              "variables": [
                                { "name": "offset", "nodeType": "YulTypedName", "src": "2841:6:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2883:28:21",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2893:18:21",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              },
                              "variables": [
                                { "name": "_1", "nodeType": "YulTypedName", "src": "2887:2:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2938:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2947:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2950:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "2940:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2940:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2940:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "offset", "nodeType": "YulIdentifier", "src": "2926:6:21" },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "2934:2:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "2923:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "2923:14:21"
                              },
                              "nodeType": "YulIf",
                              "src": "2920:34:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2963:96:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "3031:9:21" },
                                      { "name": "offset", "nodeType": "YulIdentifier", "src": "3042:6:21" }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "3027:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3027:22:21"
                                  },
                                  { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "3051:7:21" }
                                ],
                                "functionName": {
                                  "name": "abi_decode_array_address_dyn_calldata",
                                  "nodeType": "YulIdentifier",
                                  "src": "2989:37:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2989:70:21"
                              },
                              "variables": [
                                { "name": "value0_1", "nodeType": "YulTypedName", "src": "2967:8:21", "type": "" },
                                { "name": "value1_1", "nodeType": "YulTypedName", "src": "2977:8:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "3068:18:21",
                              "value": { "name": "value0_1", "nodeType": "YulIdentifier", "src": "3078:8:21" },
                              "variableNames": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "3068:6:21" }]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "3095:18:21",
                              "value": { "name": "value1_1", "nodeType": "YulIdentifier", "src": "3105:8:21" },
                              "variableNames": [{ "name": "value1", "nodeType": "YulIdentifier", "src": "3095:6:21" }]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3122:48:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "3155:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3166:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "3151:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3151:18:21"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "3138:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3138:32:21"
                              },
                              "variables": [
                                { "name": "offset_1", "nodeType": "YulTypedName", "src": "3126:8:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "3199:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3208:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3211:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "3201:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3201:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3201:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "offset_1", "nodeType": "YulIdentifier", "src": "3185:8:21" },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "3195:2:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "3182:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "3182:16:21"
                              },
                              "nodeType": "YulIf",
                              "src": "3179:36:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3224:98:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "3292:9:21" },
                                      { "name": "offset_1", "nodeType": "YulIdentifier", "src": "3303:8:21" }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "3288:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3288:24:21"
                                  },
                                  { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "3314:7:21" }
                                ],
                                "functionName": {
                                  "name": "abi_decode_array_address_dyn_calldata",
                                  "nodeType": "YulIdentifier",
                                  "src": "3250:37:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3250:72:21"
                              },
                              "variables": [
                                { "name": "value2_1", "nodeType": "YulTypedName", "src": "3228:8:21", "type": "" },
                                { "name": "value3_1", "nodeType": "YulTypedName", "src": "3238:8:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "3331:18:21",
                              "value": { "name": "value2_1", "nodeType": "YulIdentifier", "src": "3341:8:21" },
                              "variableNames": [{ "name": "value2", "nodeType": "YulIdentifier", "src": "3331:6:21" }]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "3358:18:21",
                              "value": { "name": "value3_1", "nodeType": "YulIdentifier", "src": "3368:8:21" },
                              "variableNames": [{ "name": "value3", "nodeType": "YulIdentifier", "src": "3358:6:21" }]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "2708:9:21", "type": "" },
                          { "name": "dataEnd", "nodeType": "YulTypedName", "src": "2719:7:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "value0", "nodeType": "YulTypedName", "src": "2731:6:21", "type": "" },
                          { "name": "value1", "nodeType": "YulTypedName", "src": "2739:6:21", "type": "" },
                          { "name": "value2", "nodeType": "YulTypedName", "src": "2747:6:21", "type": "" },
                          { "name": "value3", "nodeType": "YulTypedName", "src": "2755:6:21", "type": "" }
                        ],
                        "src": "2601:781:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "3561:179:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "3578:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3589:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "3571:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "3571:21:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3571:21:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "3612:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3623:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "3608:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3608:18:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3628:2:21",
                                    "type": "",
                                    "value": "29"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "3601:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "3601:30:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3601:30:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "3651:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3662:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "3647:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3647:18:21"
                                  },
                                  {
                                    "hexValue": "5265636f766572793a20696e636f6e73697374656e7420617272617973",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "3667:31:21",
                                    "type": "",
                                    "value": "Recovery: inconsistent arrays"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "3640:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "3640:59:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3640:59:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "3708:26:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "3720:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3731:2:21",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "3716:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "3716:18:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "3708:4:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_12227dcd596297e685bdc66ab01e81b5228df9a6bdd1fe7960df703f31587551__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "3538:9:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "3552:4:21", "type": "" }
                        ],
                        "src": "3387:353:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "3777:152:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3794:1:21",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3797:77:21",
                                    "type": "",
                                    "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "3787:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "3787:88:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3787:88:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3891:1:21",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3894:4:21",
                                    "type": "",
                                    "value": "0x32"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "3884:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "3884:15:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3884:15:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3915:1:21",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3918:4:21",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": { "name": "revert", "nodeType": "YulIdentifier", "src": "3908:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "3908:15:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3908:15:21"
                            }
                          ]
                        },
                        "name": "panic_error_0x32",
                        "nodeType": "YulFunctionDefinition",
                        "src": "3745:184:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "3979:109:21",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "4066:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "4075:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "4078:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "4068:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4068:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "4068:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "value", "nodeType": "YulIdentifier", "src": "4002:5:21" },
                                      {
                                        "arguments": [
                                          { "name": "value", "nodeType": "YulIdentifier", "src": "4013:5:21" },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "4020:42:21",
                                            "type": "",
                                            "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "4009:3:21"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "4009:54:21"
                                      }
                                    ],
                                    "functionName": { "name": "eq", "nodeType": "YulIdentifier", "src": "3999:2:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3999:65:21"
                                  }
                                ],
                                "functionName": { "name": "iszero", "nodeType": "YulIdentifier", "src": "3992:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "3992:73:21"
                              },
                              "nodeType": "YulIf",
                              "src": "3989:93:21"
                            }
                          ]
                        },
                        "name": "validator_revert_address",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [{ "name": "value", "nodeType": "YulTypedName", "src": "3968:5:21", "type": "" }],
                        "src": "3934:154:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "4163:177:21",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "4209:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "4218:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "4221:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "4211:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4211:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "4211:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "4184:7:21" },
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "4193:9:21" }
                                    ],
                                    "functionName": { "name": "sub", "nodeType": "YulIdentifier", "src": "4180:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4180:23:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4205:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "slt", "nodeType": "YulIdentifier", "src": "4176:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "4176:32:21"
                              },
                              "nodeType": "YulIf",
                              "src": "4173:52:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4234:36:21",
                              "value": {
                                "arguments": [{ "name": "headStart", "nodeType": "YulIdentifier", "src": "4260:9:21" }],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "4247:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4247:23:21"
                              },
                              "variables": [
                                { "name": "value", "nodeType": "YulTypedName", "src": "4238:5:21", "type": "" }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [{ "name": "value", "nodeType": "YulIdentifier", "src": "4304:5:21" }],
                                "functionName": {
                                  "name": "validator_revert_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "4279:24:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4279:31:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4279:31:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "4319:15:21",
                              "value": { "name": "value", "nodeType": "YulIdentifier", "src": "4329:5:21" },
                              "variableNames": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "4319:6:21" }]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_address",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "4129:9:21", "type": "" },
                          { "name": "dataEnd", "nodeType": "YulTypedName", "src": "4140:7:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "value0", "nodeType": "YulTypedName", "src": "4152:6:21", "type": "" }
                        ],
                        "src": "4093:247:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "4429:177:21",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "4475:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "4484:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "4487:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "4477:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4477:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "4477:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "4450:7:21" },
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "4459:9:21" }
                                    ],
                                    "functionName": { "name": "sub", "nodeType": "YulIdentifier", "src": "4446:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4446:23:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4471:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "slt", "nodeType": "YulIdentifier", "src": "4442:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "4442:32:21"
                              },
                              "nodeType": "YulIf",
                              "src": "4439:52:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4500:36:21",
                              "value": {
                                "arguments": [{ "name": "headStart", "nodeType": "YulIdentifier", "src": "4526:9:21" }],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "4513:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4513:23:21"
                              },
                              "variables": [
                                { "name": "value", "nodeType": "YulTypedName", "src": "4504:5:21", "type": "" }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [{ "name": "value", "nodeType": "YulIdentifier", "src": "4570:5:21" }],
                                "functionName": {
                                  "name": "validator_revert_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "4545:24:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4545:31:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4545:31:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "4585:15:21",
                              "value": { "name": "value", "nodeType": "YulIdentifier", "src": "4595:5:21" },
                              "variableNames": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "4585:6:21" }]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_contract$_IERC20_$900",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "4395:9:21", "type": "" },
                          { "name": "dataEnd", "nodeType": "YulTypedName", "src": "4406:7:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "value0", "nodeType": "YulTypedName", "src": "4418:6:21", "type": "" }
                        ],
                        "src": "4345:261:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "4696:177:21",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "4742:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "4751:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "4754:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "4744:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4744:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "4744:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "4717:7:21" },
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "4726:9:21" }
                                    ],
                                    "functionName": { "name": "sub", "nodeType": "YulIdentifier", "src": "4713:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4713:23:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4738:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "slt", "nodeType": "YulIdentifier", "src": "4709:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "4709:32:21"
                              },
                              "nodeType": "YulIf",
                              "src": "4706:52:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4767:36:21",
                              "value": {
                                "arguments": [{ "name": "headStart", "nodeType": "YulIdentifier", "src": "4793:9:21" }],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "4780:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4780:23:21"
                              },
                              "variables": [
                                { "name": "value", "nodeType": "YulTypedName", "src": "4771:5:21", "type": "" }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [{ "name": "value", "nodeType": "YulIdentifier", "src": "4837:5:21" }],
                                "functionName": {
                                  "name": "validator_revert_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "4812:24:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4812:31:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4812:31:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "4852:15:21",
                              "value": { "name": "value", "nodeType": "YulIdentifier", "src": "4862:5:21" },
                              "variableNames": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "4852:6:21" }]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_contract$_IERC721_$819",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "4662:9:21", "type": "" },
                          { "name": "dataEnd", "nodeType": "YulTypedName", "src": "4673:7:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "value0", "nodeType": "YulTypedName", "src": "4685:6:21", "type": "" }
                        ],
                        "src": "4611:262:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "5035:241:21",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "5045:26:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "5057:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5068:2:21",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "5053:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "5053:18:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "5045:4:21" }]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "5080:52:21",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5090:42:21",
                                "type": "",
                                "value": "0xffffffffffffffffffffffffffffffffffffffff"
                              },
                              "variables": [
                                { "name": "_1", "nodeType": "YulTypedName", "src": "5084:2:21", "type": "" }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "5148:9:21" },
                                  {
                                    "arguments": [
                                      { "name": "value0", "nodeType": "YulIdentifier", "src": "5163:6:21" },
                                      { "name": "_1", "nodeType": "YulIdentifier", "src": "5171:2:21" }
                                    ],
                                    "functionName": { "name": "and", "nodeType": "YulIdentifier", "src": "5159:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5159:15:21"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "5141:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "5141:34:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "5141:34:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "5195:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5206:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "5191:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5191:18:21"
                                  },
                                  {
                                    "arguments": [
                                      { "name": "value1", "nodeType": "YulIdentifier", "src": "5215:6:21" },
                                      { "name": "_1", "nodeType": "YulIdentifier", "src": "5223:2:21" }
                                    ],
                                    "functionName": { "name": "and", "nodeType": "YulIdentifier", "src": "5211:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5211:15:21"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "5184:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "5184:43:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "5184:43:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "5247:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5258:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "5243:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5243:18:21"
                                  },
                                  { "name": "value2", "nodeType": "YulIdentifier", "src": "5263:6:21" }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "5236:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "5236:34:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "5236:34:21"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "4988:9:21", "type": "" },
                          { "name": "value2", "nodeType": "YulTypedName", "src": "4999:6:21", "type": "" },
                          { "name": "value1", "nodeType": "YulTypedName", "src": "5007:6:21", "type": "" },
                          { "name": "value0", "nodeType": "YulTypedName", "src": "5015:6:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "5026:4:21", "type": "" }
                        ],
                        "src": "4878:398:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "5359:177:21",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "5405:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "5414:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "5417:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "5407:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5407:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "5407:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "5380:7:21" },
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "5389:9:21" }
                                    ],
                                    "functionName": { "name": "sub", "nodeType": "YulIdentifier", "src": "5376:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5376:23:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5401:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "slt", "nodeType": "YulIdentifier", "src": "5372:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "5372:32:21"
                              },
                              "nodeType": "YulIf",
                              "src": "5369:52:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "5430:36:21",
                              "value": {
                                "arguments": [{ "name": "headStart", "nodeType": "YulIdentifier", "src": "5456:9:21" }],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "5443:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5443:23:21"
                              },
                              "variables": [
                                { "name": "value", "nodeType": "YulTypedName", "src": "5434:5:21", "type": "" }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [{ "name": "value", "nodeType": "YulIdentifier", "src": "5500:5:21" }],
                                "functionName": {
                                  "name": "validator_revert_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "5475:24:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5475:31:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "5475:31:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "5515:15:21",
                              "value": { "name": "value", "nodeType": "YulIdentifier", "src": "5525:5:21" },
                              "variableNames": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "5515:6:21" }]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_address_payable",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "5325:9:21", "type": "" },
                          { "name": "dataEnd", "nodeType": "YulTypedName", "src": "5336:7:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "value0", "nodeType": "YulTypedName", "src": "5348:6:21", "type": "" }
                        ],
                        "src": "5281:255:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "5590:233:21",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "5600:17:21",
                              "value": {
                                "arguments": [
                                  { "name": "x", "nodeType": "YulIdentifier", "src": "5612:1:21" },
                                  { "name": "y", "nodeType": "YulIdentifier", "src": "5615:1:21" }
                                ],
                                "functionName": { "name": "sub", "nodeType": "YulIdentifier", "src": "5608:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "5608:9:21"
                              },
                              "variableNames": [{ "name": "diff", "nodeType": "YulIdentifier", "src": "5600:4:21" }]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "5649:168:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "5670:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "5673:77:21",
                                          "type": "",
                                          "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "5663:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5663:88:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "5663:88:21"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "5771:1:21",
                                          "type": "",
                                          "value": "4"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "5774:4:21",
                                          "type": "",
                                          "value": "0x11"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "5764:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5764:15:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "5764:15:21"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "5799:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "5802:4:21",
                                          "type": "",
                                          "value": "0x24"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "5792:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5792:15:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "5792:15:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "diff", "nodeType": "YulIdentifier", "src": "5632:4:21" },
                                  { "name": "x", "nodeType": "YulIdentifier", "src": "5638:1:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "5629:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "5629:11:21"
                              },
                              "nodeType": "YulIf",
                              "src": "5626:191:21"
                            }
                          ]
                        },
                        "name": "checked_sub_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "x", "nodeType": "YulTypedName", "src": "5572:1:21", "type": "" },
                          { "name": "y", "nodeType": "YulTypedName", "src": "5575:1:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "diff", "nodeType": "YulTypedName", "src": "5581:4:21", "type": "" }
                        ],
                        "src": "5541:282:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "6002:174:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "6019:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6030:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "6012:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "6012:21:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6012:21:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "6053:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6064:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "6049:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6049:18:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6069:2:21",
                                    "type": "",
                                    "value": "24"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "6042:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "6042:30:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6042:30:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "6092:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6103:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "6088:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6088:18:21"
                                  },
                                  {
                                    "hexValue": "4f776e6572736869703a206e6f7420746865206f776e6572",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "6108:26:21",
                                    "type": "",
                                    "value": "Ownership: not the owner"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "6081:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "6081:54:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6081:54:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "6144:26:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "6156:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6167:2:21",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "6152:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "6152:18:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "6144:4:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "5979:9:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "5993:4:21", "type": "" }
                        ],
                        "src": "5828:348:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "6310:168:21",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "6320:26:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "6332:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6343:2:21",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "6328:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "6328:18:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "6320:4:21" }]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "6362:9:21" },
                                  {
                                    "arguments": [
                                      { "name": "value0", "nodeType": "YulIdentifier", "src": "6377:6:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6385:42:21",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": { "name": "and", "nodeType": "YulIdentifier", "src": "6373:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6373:55:21"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "6355:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "6355:74:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6355:74:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "6449:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6460:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "6445:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6445:18:21"
                                  },
                                  { "name": "value1", "nodeType": "YulIdentifier", "src": "6465:6:21" }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "6438:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "6438:34:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6438:34:21"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "6271:9:21", "type": "" },
                          { "name": "value1", "nodeType": "YulTypedName", "src": "6282:6:21", "type": "" },
                          { "name": "value0", "nodeType": "YulTypedName", "src": "6290:6:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "6301:4:21", "type": "" }
                        ],
                        "src": "6181:297:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "6657:179:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "6674:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6685:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "6667:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "6667:21:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6667:21:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "6708:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6719:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "6704:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6704:18:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6724:2:21",
                                    "type": "",
                                    "value": "29"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "6697:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "6697:30:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6697:30:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "6747:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6758:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "6743:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6743:18:21"
                                  },
                                  {
                                    "hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "6763:31:21",
                                    "type": "",
                                    "value": "Address: insufficient balance"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "6736:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "6736:59:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6736:59:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "6804:26:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "6816:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6827:2:21",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "6812:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "6812:18:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "6804:4:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "6634:9:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "6648:4:21", "type": "" }
                        ],
                        "src": "6483:353:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "7032:14:21",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "7034:10:21",
                              "value": { "name": "pos", "nodeType": "YulIdentifier", "src": "7041:3:21" },
                              "variableNames": [{ "name": "end", "nodeType": "YulIdentifier", "src": "7034:3:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [{ "name": "pos", "nodeType": "YulTypedName", "src": "7016:3:21", "type": "" }],
                        "returnVariables": [
                          { "name": "end", "nodeType": "YulTypedName", "src": "7024:3:21", "type": "" }
                        ],
                        "src": "6841:205:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "7225:248:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "7242:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7253:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "7235:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "7235:21:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "7235:21:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "7276:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7287:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "7272:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7272:18:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7292:2:21",
                                    "type": "",
                                    "value": "58"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "7265:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "7265:30:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "7265:30:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "7315:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7326:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "7311:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7311:18:21"
                                  },
                                  {
                                    "hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c2072",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "7331:34:21",
                                    "type": "",
                                    "value": "Address: unable to send value, r"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "7304:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "7304:62:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "7304:62:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "7386:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7397:2:21",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "7382:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7382:18:21"
                                  },
                                  {
                                    "hexValue": "6563697069656e74206d61792068617665207265766572746564",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "7402:28:21",
                                    "type": "",
                                    "value": "ecipient may have reverted"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "7375:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "7375:56:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "7375:56:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "7440:27:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "7452:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7463:3:21",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "7448:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "7448:19:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "7440:4:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "7202:9:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "7216:4:21", "type": "" }
                        ],
                        "src": "7051:422:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "7556:199:21",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "7602:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "7611:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "7614:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "7604:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "7604:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "7604:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "7577:7:21" },
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "7586:9:21" }
                                    ],
                                    "functionName": { "name": "sub", "nodeType": "YulIdentifier", "src": "7573:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7573:23:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7598:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "slt", "nodeType": "YulIdentifier", "src": "7569:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "7569:32:21"
                              },
                              "nodeType": "YulIf",
                              "src": "7566:52:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "7627:29:21",
                              "value": {
                                "arguments": [{ "name": "headStart", "nodeType": "YulIdentifier", "src": "7646:9:21" }],
                                "functionName": { "name": "mload", "nodeType": "YulIdentifier", "src": "7640:5:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "7640:16:21"
                              },
                              "variables": [
                                { "name": "value", "nodeType": "YulTypedName", "src": "7631:5:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "7709:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "7718:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "7721:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "7711:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "7711:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "7711:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "value", "nodeType": "YulIdentifier", "src": "7678:5:21" },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              { "name": "value", "nodeType": "YulIdentifier", "src": "7699:5:21" }
                                            ],
                                            "functionName": {
                                              "name": "iszero",
                                              "nodeType": "YulIdentifier",
                                              "src": "7692:6:21"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "7692:13:21"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "7685:6:21"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "7685:21:21"
                                      }
                                    ],
                                    "functionName": { "name": "eq", "nodeType": "YulIdentifier", "src": "7675:2:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7675:32:21"
                                  }
                                ],
                                "functionName": { "name": "iszero", "nodeType": "YulIdentifier", "src": "7668:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "7668:40:21"
                              },
                              "nodeType": "YulIf",
                              "src": "7665:60:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "7734:15:21",
                              "value": { "name": "value", "nodeType": "YulIdentifier", "src": "7744:5:21" },
                              "variableNames": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "7734:6:21" }]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_bool_fromMemory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "7522:9:21", "type": "" },
                          { "name": "dataEnd", "nodeType": "YulTypedName", "src": "7533:7:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "value0", "nodeType": "YulTypedName", "src": "7545:6:21", "type": "" }
                        ],
                        "src": "7478:277:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "7934:232:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "7951:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7962:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "7944:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "7944:21:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "7944:21:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "7985:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7996:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "7981:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7981:18:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8001:2:21",
                                    "type": "",
                                    "value": "42"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "7974:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "7974:30:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "7974:30:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "8024:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8035:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "8020:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8020:18:21"
                                  },
                                  {
                                    "hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "8040:34:21",
                                    "type": "",
                                    "value": "SafeERC20: ERC20 operation did n"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "8013:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "8013:62:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8013:62:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "8095:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8106:2:21",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "8091:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8091:18:21"
                                  },
                                  {
                                    "hexValue": "6f742073756363656564",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "8111:12:21",
                                    "type": "",
                                    "value": "ot succeed"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "8084:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "8084:40:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8084:40:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "8133:27:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "8145:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8156:3:21",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "8141:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "8141:19:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "8133:4:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "7911:9:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "7925:4:21", "type": "" }
                        ],
                        "src": "7760:406:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "8345:228:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "8362:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8373:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "8355:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "8355:21:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8355:21:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "8396:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8407:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "8392:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8392:18:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8412:2:21",
                                    "type": "",
                                    "value": "38"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "8385:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "8385:30:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8385:30:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "8435:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8446:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "8431:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8431:18:21"
                                  },
                                  {
                                    "hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "8451:34:21",
                                    "type": "",
                                    "value": "Address: insufficient balance fo"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "8424:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "8424:62:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8424:62:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "8506:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8517:2:21",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "8502:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8502:18:21"
                                  },
                                  {
                                    "hexValue": "722063616c6c",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "8522:8:21",
                                    "type": "",
                                    "value": "r call"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "8495:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "8495:36:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8495:36:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "8540:27:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "8552:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8563:3:21",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "8548:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "8548:19:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "8540:4:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "8322:9:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "8336:4:21", "type": "" }
                        ],
                        "src": "8171:402:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "8644:184:21",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "8654:10:21",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8663:1:21",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [{ "name": "i", "nodeType": "YulTypedName", "src": "8658:1:21", "type": "" }]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "8723:63:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            { "name": "dst", "nodeType": "YulIdentifier", "src": "8748:3:21" },
                                            { "name": "i", "nodeType": "YulIdentifier", "src": "8753:1:21" }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "8744:3:21"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "8744:11:21"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                { "name": "src", "nodeType": "YulIdentifier", "src": "8767:3:21" },
                                                { "name": "i", "nodeType": "YulIdentifier", "src": "8772:1:21" }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nodeType": "YulIdentifier",
                                                "src": "8763:3:21"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "8763:11:21"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mload",
                                            "nodeType": "YulIdentifier",
                                            "src": "8757:5:21"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "8757:18:21"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "8737:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8737:39:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "8737:39:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "i", "nodeType": "YulIdentifier", "src": "8684:1:21" },
                                  { "name": "length", "nodeType": "YulIdentifier", "src": "8687:6:21" }
                                ],
                                "functionName": { "name": "lt", "nodeType": "YulIdentifier", "src": "8681:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "8681:13:21"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "8695:19:21",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "8697:15:21",
                                    "value": {
                                      "arguments": [
                                        { "name": "i", "nodeType": "YulIdentifier", "src": "8706:1:21" },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "8709:2:21",
                                          "type": "",
                                          "value": "32"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "8702:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8702:10:21"
                                    },
                                    "variableNames": [{ "name": "i", "nodeType": "YulIdentifier", "src": "8697:1:21" }]
                                  }
                                ]
                              },
                              "pre": { "nodeType": "YulBlock", "src": "8677:3:21", "statements": [] },
                              "src": "8673:113:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "dst", "nodeType": "YulIdentifier", "src": "8806:3:21" },
                                      { "name": "length", "nodeType": "YulIdentifier", "src": "8811:6:21" }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "8802:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8802:16:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8820:1:21",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "8795:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "8795:27:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8795:27:21"
                            }
                          ]
                        },
                        "name": "copy_memory_to_memory_with_cleanup",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "src", "nodeType": "YulTypedName", "src": "8622:3:21", "type": "" },
                          { "name": "dst", "nodeType": "YulTypedName", "src": "8627:3:21", "type": "" },
                          { "name": "length", "nodeType": "YulTypedName", "src": "8632:6:21", "type": "" }
                        ],
                        "src": "8578:250:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "8970:150:21",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "8980:27:21",
                              "value": {
                                "arguments": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "9000:6:21" }],
                                "functionName": { "name": "mload", "nodeType": "YulIdentifier", "src": "8994:5:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "8994:13:21"
                              },
                              "variables": [
                                { "name": "length", "nodeType": "YulTypedName", "src": "8984:6:21", "type": "" }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "value0", "nodeType": "YulIdentifier", "src": "9055:6:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9063:4:21",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "9051:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9051:17:21"
                                  },
                                  { "name": "pos", "nodeType": "YulIdentifier", "src": "9070:3:21" },
                                  { "name": "length", "nodeType": "YulIdentifier", "src": "9075:6:21" }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nodeType": "YulIdentifier",
                                  "src": "9016:34:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9016:66:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9016:66:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "9091:23:21",
                              "value": {
                                "arguments": [
                                  { "name": "pos", "nodeType": "YulIdentifier", "src": "9102:3:21" },
                                  { "name": "length", "nodeType": "YulIdentifier", "src": "9107:6:21" }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "9098:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "9098:16:21"
                              },
                              "variableNames": [{ "name": "end", "nodeType": "YulIdentifier", "src": "9091:3:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "pos", "nodeType": "YulTypedName", "src": "8946:3:21", "type": "" },
                          { "name": "value0", "nodeType": "YulTypedName", "src": "8951:6:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "end", "nodeType": "YulTypedName", "src": "8962:3:21", "type": "" }
                        ],
                        "src": "8833:287:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "9299:179:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "9316:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9327:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "9309:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "9309:21:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9309:21:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "9350:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9361:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "9346:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9346:18:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9366:2:21",
                                    "type": "",
                                    "value": "29"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "9339:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "9339:30:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9339:30:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "9389:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9400:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "9385:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9385:18:21"
                                  },
                                  {
                                    "hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "9405:31:21",
                                    "type": "",
                                    "value": "Address: call to non-contract"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "9378:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "9378:59:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9378:59:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "9446:26:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "9458:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9469:2:21",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "9454:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "9454:18:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "9446:4:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "9276:9:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "9290:4:21", "type": "" }
                        ],
                        "src": "9125:353:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "9604:334:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "9621:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9632:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "9614:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "9614:21:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9614:21:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "9644:27:21",
                              "value": {
                                "arguments": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "9664:6:21" }],
                                "functionName": { "name": "mload", "nodeType": "YulIdentifier", "src": "9658:5:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "9658:13:21"
                              },
                              "variables": [
                                { "name": "length", "nodeType": "YulTypedName", "src": "9648:6:21", "type": "" }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "9691:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9702:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "9687:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9687:18:21"
                                  },
                                  { "name": "length", "nodeType": "YulIdentifier", "src": "9707:6:21" }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "9680:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "9680:34:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9680:34:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "value0", "nodeType": "YulIdentifier", "src": "9762:6:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9770:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "9758:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9758:15:21"
                                  },
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "9779:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9790:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "9775:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9775:18:21"
                                  },
                                  { "name": "length", "nodeType": "YulIdentifier", "src": "9795:6:21" }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nodeType": "YulIdentifier",
                                  "src": "9723:34:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9723:79:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9723:79:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "9811:121:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "9827:9:21" },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              { "name": "length", "nodeType": "YulIdentifier", "src": "9846:6:21" },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "9854:2:21",
                                                "type": "",
                                                "value": "31"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "9842:3:21"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "9842:15:21"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "9859:66:21",
                                            "type": "",
                                            "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "9838:3:21"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "9838:88:21"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "9823:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9823:104:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9929:2:21",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "9819:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "9819:113:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "9811:4:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "9573:9:21", "type": "" },
                          { "name": "value0", "nodeType": "YulTypedName", "src": "9584:6:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "9595:4:21", "type": "" }
                        ],
                        "src": "9483:455:21"
                      }
                    ]
                  },
                  "contents": "{\n    { }\n    function abi_decode_array_address_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$900_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$819_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_encode_tuple_t_stringliteral_12227dcd596297e685bdc66ab01e81b5228df9a6bdd1fe7960df703f31587551__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Recovery: inconsistent arrays\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_contract$_IERC20_$900(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_contract$_IERC721_$819(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_decode_tuple_t_address_payable(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"Ownership: not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: insufficient balance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 58)\n        mstore(add(headStart, 64), \"Address: unable to send value, r\")\n        mstore(add(headStart, 96), \"ecipient may have reverted\")\n        tail := add(headStart, 128)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 64)\n    }\n}",
                  "id": 21,
                  "language": "Yul",
                  "name": "#utility.yul"
                }
              ],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b50600436106100415760003560e01c806373c8a95814610046578063c3666c361461005b578063f7ba94bd1461006e575b600080fd5b610059610054366004610a4e565b610081565b005b610059610069366004610a4e565b6101b1565b61005961007c366004610ae8565b610354565b610094335b61008e610440565b90610474565b8483811480156100a357508082145b61010e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5265636f766572793a20696e636f6e73697374656e742061727261797300000060448201526064015b60405180910390fd5b60005b8181146101a75761019f88888381811061012d5761012d610b54565b90506020020160208101906101429190610ba8565b85858481811061015457610154610b54565b9050602002013588888581811061016d5761016d610b54565b90506020020160208101906101829190610ba8565b73ffffffffffffffffffffffffffffffffffffffff1691906104fb565b600101610111565b5050505050505050565b6101ba33610086565b8483811480156101c957508082145b61022f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5265636f766572793a20696e636f6e73697374656e74206172726179730000006044820152606401610105565b60005b8181146101a75785858281811061024b5761024b610b54565b90506020020160208101906102609190610ba8565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd308a8a8581811061028e5761028e610b54565b90506020020160208101906102a39190610ba8565b8787868181106102b5576102b5610b54565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b15801561033157600080fd5b505af1158015610345573d6000803e3d6000fd5b50505050806001019050610232565b61035d33610086565b828181146103c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5265636f766572793a20696e636f6e73697374656e74206172726179730000006044820152606401610105565b60005b818114610438576104308484838181106103e6576103e6610b54565b905060200201358787848181106103ff576103ff610b54565b90506020020160208101906104149190610ba8565b73ffffffffffffffffffffffffffffffffffffffff169061058d565b6001016103ca565b505050505050565b60008061046e60017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd610bcc565b92915050565b815473ffffffffffffffffffffffffffffffffffffffff8281169116146104f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f776e6572736869703a206e6f7420746865206f776e657200000000000000006044820152606401610105565b5050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526105889084906106e7565b505050565b804710156105f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610105565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114610651576040519150601f19603f3d011682016040523d82523d6000602084013e610656565b606091505b5050905080610588576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610105565b6000610749826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166107f39092919063ffffffff16565b80519091501561058857808060200190518101906107679190610c06565b610588576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610105565b6060610802848460008561080a565b949350505050565b60608247101561089c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610105565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516108c59190610c4c565b60006040518083038185875af1925050503d8060008114610902576040519150601f19603f3d011682016040523d82523d6000602084013e610907565b606091505b509150915061091887838387610923565b979650505050505050565b606083156109b95782516000036109b25773ffffffffffffffffffffffffffffffffffffffff85163b6109b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610105565b5081610802565b61080283838151156109ce5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101059190610c68565b60008083601f840112610a1457600080fd5b50813567ffffffffffffffff811115610a2c57600080fd5b6020830191508360208260051b8501011115610a4757600080fd5b9250929050565b60008060008060008060608789031215610a6757600080fd5b863567ffffffffffffffff80821115610a7f57600080fd5b610a8b8a838b01610a02565b90985096506020890135915080821115610aa457600080fd5b610ab08a838b01610a02565b90965094506040890135915080821115610ac957600080fd5b50610ad689828a01610a02565b979a9699509497509295939492505050565b60008060008060408587031215610afe57600080fd5b843567ffffffffffffffff80821115610b1657600080fd5b610b2288838901610a02565b90965094506020870135915080821115610b3b57600080fd5b50610b4887828801610a02565b95989497509550505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610ba557600080fd5b50565b600060208284031215610bba57600080fd5b8135610bc581610b83565b9392505050565b8181038181111561046e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060208284031215610c1857600080fd5b81518015158114610bc557600080fd5b60005b83811015610c43578181015183820152602001610c2b565b50506000910152565b60008251610c5e818460208701610c28565b9190910192915050565b6020815260008251806020840152610c87816040850160208701610c28565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea26469706673582212206ced8f5cf2c471ed1b5cb59f2660a86f4d6e0e232856debef5e1d92b92b6c81464736f6c63430008110033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x73C8A958 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0xC3666C36 EQ PUSH2 0x5B JUMPI DUP1 PUSH4 0xF7BA94BD EQ PUSH2 0x6E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x59 PUSH2 0x54 CALLDATASIZE PUSH1 0x4 PUSH2 0xA4E JUMP JUMPDEST PUSH2 0x81 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x59 PUSH2 0x69 CALLDATASIZE PUSH1 0x4 PUSH2 0xA4E JUMP JUMPDEST PUSH2 0x1B1 JUMP JUMPDEST PUSH2 0x59 PUSH2 0x7C CALLDATASIZE PUSH1 0x4 PUSH2 0xAE8 JUMP JUMPDEST PUSH2 0x354 JUMP JUMPDEST PUSH2 0x94 CALLER JUMPDEST PUSH2 0x8E PUSH2 0x440 JUMP JUMPDEST SWAP1 PUSH2 0x474 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ DUP1 ISZERO PUSH2 0xA3 JUMPI POP DUP1 DUP3 EQ JUMPDEST PUSH2 0x10E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265636F766572793A20696E636F6E73697374656E7420617272617973000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x1A7 JUMPI PUSH2 0x19F DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x12D JUMPI PUSH2 0x12D PUSH2 0xB54 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x142 SWAP2 SWAP1 PUSH2 0xBA8 JUMP JUMPDEST DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x154 JUMPI PUSH2 0x154 PUSH2 0xB54 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x16D JUMPI PUSH2 0x16D PUSH2 0xB54 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x182 SWAP2 SWAP1 PUSH2 0xBA8 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 SWAP1 PUSH2 0x4FB JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x111 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1BA CALLER PUSH2 0x86 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ DUP1 ISZERO PUSH2 0x1C9 JUMPI POP DUP1 DUP3 EQ JUMPDEST PUSH2 0x22F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265636F766572793A20696E636F6E73697374656E7420617272617973000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x105 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x1A7 JUMPI DUP6 DUP6 DUP3 DUP2 DUP2 LT PUSH2 0x24B JUMPI PUSH2 0x24B PUSH2 0xB54 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x260 SWAP2 SWAP1 PUSH2 0xBA8 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD ADDRESS DUP11 DUP11 DUP6 DUP2 DUP2 LT PUSH2 0x28E JUMPI PUSH2 0x28E PUSH2 0xB54 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x2A3 SWAP2 SWAP1 PUSH2 0xBA8 JUMP JUMPDEST DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0x2B5 JUMPI PUSH2 0x2B5 PUSH2 0xB54 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP9 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP4 AND PUSH1 0x24 DUP6 ADD MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x331 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x345 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x232 JUMP JUMPDEST PUSH2 0x35D CALLER PUSH2 0x86 JUMP JUMPDEST DUP3 DUP2 DUP2 EQ PUSH2 0x3C7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265636F766572793A20696E636F6E73697374656E7420617272617973000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x105 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x438 JUMPI PUSH2 0x430 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x3E6 JUMPI PUSH2 0x3E6 PUSH2 0xB54 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0x3FF JUMPI PUSH2 0x3FF PUSH2 0xB54 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x414 SWAP2 SWAP1 PUSH2 0xBA8 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x58D JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x3CA JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x46E PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0xBCC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x4F7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E6572736869703A206E6F7420746865206F776E65720000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x105 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x588 SWAP1 DUP5 SWAP1 PUSH2 0x6E7 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0x5F7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x105 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x651 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x656 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x588 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20756E61626C6520746F2073656E642076616C75652C2072 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6563697069656E74206D61792068617665207265766572746564000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x105 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x749 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x7F3 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x588 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x767 SWAP2 SWAP1 PUSH2 0xC06 JUMP JUMPDEST PUSH2 0x588 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x105 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x802 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x80A JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x89C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x105 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x8C5 SWAP2 SWAP1 PUSH2 0xC4C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x902 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x907 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x918 DUP8 DUP4 DUP4 DUP8 PUSH2 0x923 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x9B9 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x9B2 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND EXTCODESIZE PUSH2 0x9B2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x105 JUMP JUMPDEST POP DUP2 PUSH2 0x802 JUMP JUMPDEST PUSH2 0x802 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x9CE JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x105 SWAP2 SWAP1 PUSH2 0xC68 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xA14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA2C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xA47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0xA67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xA7F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA8B DUP11 DUP4 DUP12 ADD PUSH2 0xA02 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xAA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAB0 DUP11 DUP4 DUP12 ADD PUSH2 0xA02 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xAC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAD6 DUP10 DUP3 DUP11 ADD PUSH2 0xA02 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xAFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xB16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB22 DUP9 DUP4 DUP10 ADD PUSH2 0xA02 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xB3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB48 DUP8 DUP3 DUP9 ADD PUSH2 0xA02 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xBA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xBC5 DUP2 PUSH2 0xB83 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x46E JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xBC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xC43 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xC2B JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xC5E DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xC28 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xC87 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0xC28 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH13 0xED8F5CF2C471ED1B5CB59F2660 0xA8 PUSH16 0x4D6E0E232856DEBEF5E1D92B92B6C814 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ",
              "sourceMap": "782:3970:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2975:512;;;;;;:::i;:::-;;:::i;:::-;;4209:541;;;;;;:::i;:::-;;:::i;1812:450::-;;;;;;:::i;:::-;;:::i;2975:512::-;3108:70;719:10:17;3165:12:10;3108:33;:31;:33::i;:::-;:56;;:70::i;:::-;3205:8;3238:23;;;:51;;;;-1:-1:-1;3265:24:10;;;3238:51;3230:93;;;;;;;3589:2:21;3230:93:10;;;3571:21:21;3628:2;3608:18;;;3601:30;3667:31;3647:18;;;3640:59;3716:18;;3230:93:10;;;;;;;;;3362:9;3357:114;3378:6;3373:1;:11;3357:114;;3409:47;3432:8;;3441:1;3432:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;3445:7;;3453:1;3445:10;;;;;;;:::i;:::-;;;;;;;3409:6;;3416:1;3409:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:22;;;:47;:22;:47::i;:::-;3386:3;;3357:114;;;;3098:389;2975:512;;;;;;:::o;4209:541::-;4348:70;719:10:17;4405:12:10;640:96:17;4348:70:10;4445:8;4478:26;;;:55;;;;-1:-1:-1;4508:25:10;;;4478:55;4470:97;;;;;;;3589:2:21;4470:97:10;;;3571:21:21;3628:2;3608:18;;;3601:30;3667:31;3647:18;;;3640:59;3716:18;;4470:97:10;3387:353:21;4470:97:10;4606:9;4601:133;4622:6;4617:1;:11;4601:133;;4653:9;;4663:1;4653:12;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:25;;;4687:4;4694:8;;4703:1;4694:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;4707:8;;4716:1;4707:11;;;;;;;:::i;:::-;4653:66;;;;;;;;;;5090:42:21;5159:15;;;4653:66:10;;;5141:34:21;5211:15;;;;5191:18;;;5184:43;-1:-1:-1;4707:11:10;;;;;;5243:18:21;;;5236:34;5053:18;;4653:66:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4630:3;;;;;4601:133;;1812:450;1924:70;719:10:17;1981:12:10;640:96:17;1924:70:10;2021:8;2054:24;;;2046:66;;;;;;;3589:2:21;2046:66:10;;;3571:21:21;3628:2;3608:18;;;3601:30;3667:31;3647:18;;;3640:59;3716:18;;2046:66:10;3387:353:21;2046:66:10;2151:9;2146:100;2167:6;2162:1;:11;2146:100;;2198:33;2220:7;;2228:1;2220:10;;;;;;;:::i;:::-;;;;;;;2198:8;;2207:1;2198:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:21;;;;:33::i;:::-;2175:3;;2146:100;;;;1914:348;1812:450;;;;:::o;3707:174:3:-;3748:16;;601:71;671:1;609:58;601:71;:::i;:::-;593:80;3707:174;-1:-1:-1;;3707:174:3:o;3540:161::-;3650:15;;;3639:26;;;3650:15;;3639:26;3631:63;;;;;;;6030:2:21;3631:63:3;;;6012:21:21;6069:2;6049:18;;;6042:30;6108:26;6088:18;;;6081:54;6152:18;;3631:63:3;5828:348:21;3631:63:3;3540:161;;:::o;763:205:15:-;902:58;;;6385:42:21;6373:55;;902:58:15;;;6355:74:21;6445:18;;;;6438:34;;;902:58:15;;;;;;;;;;6328:18:21;;;;902:58:15;;;;;;;;;;925:23;902:58;;;875:86;;895:5;;875:19;:86::i;:::-;763:205;;;:::o;2412:312:16:-;2526:6;2501:21;:31;;2493:73;;;;;;;6685:2:21;2493:73:16;;;6667:21:21;6724:2;6704:18;;;6697:30;6763:31;6743:18;;;6736:59;6812:18;;2493:73:16;6483:353:21;2493:73:16;2578:12;2596:9;:14;;2618:6;2596:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2577:52;;;2647:7;2639:78;;;;;;;7253:2:21;2639:78:16;;;7235:21:21;7292:2;7272:18;;;7265:30;7331:34;7311:18;;;7304:62;7402:28;7382:18;;;7375:56;7448:19;;2639:78:16;7051:422:21;3747:706:15;4166:23;4192:69;4220:4;4192:69;;;;;;;;;;;;;;;;;4200:5;4192:27;;;;:69;;;;;:::i;:::-;4275:17;;4166:95;;-1:-1:-1;4275:21:15;4271:176;;4370:10;4359:30;;;;;;;;;;;;:::i;:::-;4351:85;;;;;;;7962:2:21;4351:85:15;;;7944:21:21;8001:2;7981:18;;;7974:30;8040:34;8020:18;;;8013:62;8111:12;8091:18;;;8084:40;8141:19;;4351:85:15;7760:406:21;3873:223:16;4006:12;4037:52;4059:6;4067:4;4073:1;4076:12;4037:21;:52::i;:::-;4030:59;3873:223;-1:-1:-1;;;;3873:223:16:o;4960:446::-;5125:12;5182:5;5157:21;:30;;5149:81;;;;;;;8373:2:21;5149:81:16;;;8355:21:21;8412:2;8392:18;;;8385:30;8451:34;8431:18;;;8424:62;8522:8;8502:18;;;8495:36;8548:19;;5149:81:16;8171:402:21;5149:81:16;5241:12;5255:23;5282:6;:11;;5301:5;5308:4;5282:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5240:73;;;;5330:69;5357:6;5365:7;5374:10;5386:12;5330:26;:69::i;:::-;5323:76;4960:446;-1:-1:-1;;;;;;;4960:446:16:o;7466:628::-;7646:12;7674:7;7670:418;;;7701:10;:17;7722:1;7701:22;7697:286;;1465:19;;;;7908:60;;;;;;;9327:2:21;7908:60:16;;;9309:21:21;9366:2;9346:18;;;9339:30;9405:31;9385:18;;;9378:59;9454:18;;7908:60:16;9125:353:21;7908:60:16;-1:-1:-1;8003:10:16;7996:17;;7670:418;8044:33;8052:10;8064:12;8775:17;;:21;8771:379;;9003:10;8997:17;9059:15;9046:10;9042:2;9038:19;9031:44;8771:379;9126:12;9119:20;;;;;;;;;;;:::i;14:367:21:-;77:8;87:6;141:3;134:4;126:6;122:17;118:27;108:55;;159:1;156;149:12;108:55;-1:-1:-1;182:20:21;;225:18;214:30;;211:50;;;257:1;254;247:12;211:50;294:4;286:6;282:17;270:29;;354:3;347:4;337:6;334:1;330:14;322:6;318:27;314:38;311:47;308:67;;;371:1;368;361:12;308:67;14:367;;;;;:::o;386:1102::-;558:6;566;574;582;590;598;651:2;639:9;630:7;626:23;622:32;619:52;;;667:1;664;657:12;619:52;707:9;694:23;736:18;777:2;769:6;766:14;763:34;;;793:1;790;783:12;763:34;832:70;894:7;885:6;874:9;870:22;832:70;:::i;:::-;921:8;;-1:-1:-1;806:96:21;-1:-1:-1;1009:2:21;994:18;;981:32;;-1:-1:-1;1025:16:21;;;1022:36;;;1054:1;1051;1044:12;1022:36;1093:72;1157:7;1146:8;1135:9;1131:24;1093:72;:::i;:::-;1184:8;;-1:-1:-1;1067:98:21;-1:-1:-1;1272:2:21;1257:18;;1244:32;;-1:-1:-1;1288:16:21;;;1285:36;;;1317:1;1314;1307:12;1285:36;;1356:72;1420:7;1409:8;1398:9;1394:24;1356:72;:::i;:::-;386:1102;;;;-1:-1:-1;386:1102:21;;-1:-1:-1;386:1102:21;;1447:8;;386:1102;-1:-1:-1;;;386:1102:21:o;2601:781::-;2731:6;2739;2747;2755;2808:2;2796:9;2787:7;2783:23;2779:32;2776:52;;;2824:1;2821;2814:12;2776:52;2864:9;2851:23;2893:18;2934:2;2926:6;2923:14;2920:34;;;2950:1;2947;2940:12;2920:34;2989:70;3051:7;3042:6;3031:9;3027:22;2989:70;:::i;:::-;3078:8;;-1:-1:-1;2963:96:21;-1:-1:-1;3166:2:21;3151:18;;3138:32;;-1:-1:-1;3182:16:21;;;3179:36;;;3211:1;3208;3201:12;3179:36;;3250:72;3314:7;3303:8;3292:9;3288:24;3250:72;:::i;:::-;2601:781;;;;-1:-1:-1;3341:8:21;-1:-1:-1;;;;2601:781:21:o;3745:184::-;3797:77;3794:1;3787:88;3894:4;3891:1;3884:15;3918:4;3915:1;3908:15;3934:154;4020:42;4013:5;4009:54;4002:5;3999:65;3989:93;;4078:1;4075;4068:12;3989:93;3934:154;:::o;4093:247::-;4152:6;4205:2;4193:9;4184:7;4180:23;4176:32;4173:52;;;4221:1;4218;4211:12;4173:52;4260:9;4247:23;4279:31;4304:5;4279:31;:::i;:::-;4329:5;4093:247;-1:-1:-1;;;4093:247:21:o;5541:282::-;5608:9;;;5629:11;;;5626:191;;;5673:77;5670:1;5663:88;5774:4;5771:1;5764:15;5802:4;5799:1;5792:15;7478:277;7545:6;7598:2;7586:9;7577:7;7573:23;7569:32;7566:52;;;7614:1;7611;7604:12;7566:52;7646:9;7640:16;7699:5;7692:13;7685:21;7678:5;7675:32;7665:60;;7721:1;7718;7711:12;8578:250;8663:1;8673:113;8687:6;8684:1;8681:13;8673:113;;;8763:11;;;8757:18;8744:11;;;8737:39;8709:2;8702:10;8673:113;;;-1:-1:-1;;8820:1:21;8802:16;;8795:27;8578:250::o;8833:287::-;8962:3;9000:6;8994:13;9016:66;9075:6;9070:3;9063:4;9055:6;9051:17;9016:66;:::i;:::-;9098:16;;;;;8833:287;-1:-1:-1;;8833:287:21:o;9483:455::-;9632:2;9621:9;9614:21;9595:4;9664:6;9658:13;9707:6;9702:2;9691:9;9687:18;9680:34;9723:79;9795:6;9790:2;9779:9;9775:18;9770:2;9762:6;9758:15;9723:79;:::i;:::-;9854:2;9842:15;9859:66;9838:88;9823:104;;;;9929:2;9819:113;;9483:455;-1:-1:-1;;9483:455:21:o"
            },
            "gasEstimates": {
              "creation": { "codeDepositCost": "662200", "executionCost": "696", "totalCost": "662896" },
              "external": {
                "recoverERC20s(address[],address[],uint256[])": "infinite",
                "recoverERC721s(address[],address[],uint256[])": "infinite",
                "recoverETH(address[],uint256[])": "infinite"
              }
            },
            "methodIdentifiers": {
              "recoverERC20s(address[],address[],uint256[])": "73c8a958",
              "recoverERC721s(address[],address[],uint256[])": "c3666c36",
              "recoverETH(address[],uint256[])": "f7ba94bd"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC721[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).\",\"kind\":\"dev\",\"methods\":{\"recoverERC20s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\",\"tokens\":\"the list of ERC20 token addresses.\"}},\"recoverERC721s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"contracts\":\"the list of ERC721 contract addresses.\",\"tokenIds\":\"the list of token ids to transfer.\"}},\"recoverETH(address[],uint256[])\":{\"details\":\"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\"}}},\"title\":\"Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"recoverERC20s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverERC721s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverETH(address[],uint256[])\":{\"notice\":\"Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":\"TokenRecoveryBase\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8c069442d3de596ee13824f700ef4d640e1429aeaa6b82bfd919f177c656fb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\ncontract TokenRecoveryBase is Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        require(length == amounts.length, \\\"Recovery: inconsistent arrays\\\");\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                accounts[i].sendValue(amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        require(length == tokens.length && length == amounts.length, \\\"Recovery: inconsistent arrays\\\");\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                tokens[i].safeTransfer(accounts[i], amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        require(length == contracts.length && length == tokenIds.length, \\\"Recovery: inconsistent arrays\\\");\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                contracts[i].transferFrom(address(this), accounts[i], tokenIds[i]);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd26d7268e7cdfc11150ec6ffb1f3552b541f65972012e2ecacaa9a58c4bf4152\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0x1b9d3522fab7ad81b4757fa0ce919f4320f08249546b3e3bd79da7cf12d55cee\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": { "storage": [], "types": null },
          "userdoc": {
            "kind": "user",
            "methods": {
              "recoverERC20s(address[],address[],uint256[])": {
                "notice": "Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts."
              },
              "recoverERC721s(address[],address[],uint256[])": {
                "notice": "Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts."
              },
              "recoverETH(address[],uint256[])": {
                "notice": "Extract ETH tokens which were accidentally sent to the contract to a list of accounts."
              }
            },
            "version": 1
          }
        }
      },
      "@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol": {
        "IERC721": {
          "abi": [
            {
              "inputs": [
                { "internalType": "address", "name": "to", "type": "address" },
                { "internalType": "uint256", "name": "tokenId", "type": "uint256" }
              ],
              "name": "approve",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }],
              "name": "balanceOf",
              "outputs": [{ "internalType": "uint256", "name": "balance", "type": "uint256" }],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }],
              "name": "getApproved",
              "outputs": [{ "internalType": "address", "name": "approved", "type": "address" }],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                { "internalType": "address", "name": "owner", "type": "address" },
                { "internalType": "address", "name": "operator", "type": "address" }
              ],
              "name": "isApprovedForAll",
              "outputs": [{ "internalType": "bool", "name": "approvedForAll", "type": "bool" }],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }],
              "name": "ownerOf",
              "outputs": [{ "internalType": "address", "name": "tokenOwner", "type": "address" }],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                { "internalType": "address", "name": "from", "type": "address" },
                { "internalType": "address", "name": "to", "type": "address" },
                { "internalType": "uint256", "name": "tokenId", "type": "uint256" }
              ],
              "name": "safeTransferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                { "internalType": "address", "name": "from", "type": "address" },
                { "internalType": "address", "name": "to", "type": "address" },
                { "internalType": "uint256", "name": "tokenId", "type": "uint256" },
                { "internalType": "bytes", "name": "data", "type": "bytes" }
              ],
              "name": "safeTransferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                { "internalType": "address", "name": "operator", "type": "address" },
                { "internalType": "bool", "name": "approved", "type": "bool" }
              ],
              "name": "setApprovalForAll",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                { "internalType": "address", "name": "from", "type": "address" },
                { "internalType": "address", "name": "to", "type": "address" },
                { "internalType": "uint256", "name": "tokenId", "type": "uint256" }
              ],
              "name": "transferFrom",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "See https://eips.ethereum.org/EIPS/eip-721This interface only contains the standard functions. See IERC721Events for the events.Note: The ERC-165 identifier for this interface is 0x80ac58cd.",
            "kind": "dev",
            "methods": {
              "approve(address,uint256)": {
                "details": "Note: There can only be one approved address per token at a given time.Note: A token approval gets reset when this token is transferred, including a self-transfer.Reverts if `tokenId` does not exist.Reverts if `to` is the token owner.Reverts if the sender is not the token owner and has not been approved by the token owner.Emits an {Approval} event.",
                "params": {
                  "to": "The address to approve, or the zero address to remove any existing approval.",
                  "tokenId": "The token identifier to give approval for."
                }
              },
              "balanceOf(address)": {
                "details": "Reverts if `owner` is the zero address.",
                "params": { "owner": "The address to query the balance of." },
                "returns": { "balance": "The amount owned by the owner." }
              },
              "getApproved(uint256)": {
                "details": "Reverts if `tokenId` does not exist.",
                "params": { "tokenId": "The token identifier to query the approval of." },
                "returns": {
                  "approved": "The approved address for the token identifier, or the zero address if no approval is set."
                }
              },
              "isApprovedForAll(address,address)": {
                "params": {
                  "operator": "The address which receives the approval for all tokens.",
                  "owner": "The address which gives the approval for all tokens."
                },
                "returns": { "approvedForAll": "Whether the operator is approved for all tokens by the owner." }
              },
              "ownerOf(uint256)": {
                "details": "Reverts if `tokenId` does not exist.",
                "params": { "tokenId": "The token identifier to query the owner of." },
                "returns": { "tokenOwner": "The owner of the token identifier." }
              },
              "safeTransferFrom(address,address,uint256)": {
                "details": "Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.",
                "params": {
                  "from": "The current token owner.",
                  "to": "The recipient of the token transfer.",
                  "tokenId": "The identifier of the token to transfer."
                }
              },
              "safeTransferFrom(address,address,uint256,bytes)": {
                "details": "Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.",
                "params": {
                  "data": "Optional data to send along to a receiver contract.",
                  "from": "The current token owner.",
                  "to": "The recipient of the token transfer.",
                  "tokenId": "The identifier of the token to transfer."
                }
              },
              "setApprovalForAll(address,bool)": {
                "details": "Reverts if the sender is the same as `operator`.Emits an {ApprovalForAll} event.",
                "params": {
                  "approved": "True to set an approval for all tokens, false to unset it.",
                  "operator": "The address to approve for all tokens."
                }
              },
              "transferFrom(address,address,uint256)": {
                "details": "Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Emits a {Transfer} event.",
                "params": {
                  "from": "The current token owner.",
                  "to": "The recipient of the token transfer. Self-transfers are possible.",
                  "tokenId": "The identifier of the token to transfer."
                }
              }
            },
            "title": "ERC721 Non-Fungible Token Standard, basic interface (functions).",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "getApproved(uint256)": "081812fc",
              "isApprovedForAll(address,address)": "e985e9c5",
              "ownerOf(uint256)": "6352211e",
              "safeTransferFrom(address,address,uint256)": "42842e0e",
              "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
              "setApprovalForAll(address,bool)": "a22cb465",
              "transferFrom(address,address,uint256)": "23b872dd"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"approvedForAll\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721This interface only contains the standard functions. See IERC721Events for the events.Note: The ERC-165 identifier for this interface is 0x80ac58cd.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Note: There can only be one approved address per token at a given time.Note: A token approval gets reset when this token is transferred, including a self-transfer.Reverts if `tokenId` does not exist.Reverts if `to` is the token owner.Reverts if the sender is not the token owner and has not been approved by the token owner.Emits an {Approval} event.\",\"params\":{\"to\":\"The address to approve, or the zero address to remove any existing approval.\",\"tokenId\":\"The token identifier to give approval for.\"}},\"balanceOf(address)\":{\"details\":\"Reverts if `owner` is the zero address.\",\"params\":{\"owner\":\"The address to query the balance of.\"},\"returns\":{\"balance\":\"The amount owned by the owner.\"}},\"getApproved(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier to query the approval of.\"},\"returns\":{\"approved\":\"The approved address for the token identifier, or the zero address if no approval is set.\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"The address which receives the approval for all tokens.\",\"owner\":\"The address which gives the approval for all tokens.\"},\"returns\":{\"approvedForAll\":\"Whether the operator is approved for all tokens by the owner.\"}},\"ownerOf(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier to query the owner of.\"},\"returns\":{\"tokenOwner\":\"The owner of the token identifier.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.\",\"params\":{\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer.\",\"tokenId\":\"The identifier of the token to transfer.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer.\",\"tokenId\":\"The identifier of the token to transfer.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Reverts if the sender is the same as `operator`.Emits an {ApprovalForAll} event.\",\"params\":{\"approved\":\"True to set an approval for all tokens, false to unset it.\",\"operator\":\"The address to approve for all tokens.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Emits a {Transfer} event.\",\"params\":{\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer. Self-transfers are possible.\",\"tokenId\":\"The identifier of the token to transfer.\"}}},\"title\":\"ERC721 Non-Fungible Token Standard, basic interface (functions).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Sets or unsets an approval to transfer a single token on behalf of its owner.\"},\"balanceOf(address)\":{\"notice\":\"Gets the balance of an address.\"},\"getApproved(uint256)\":{\"notice\":\"Gets the approved address for a token.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Gets whether an operator is approved for all tokens by an owner.\"},\"ownerOf(uint256)\":{\"notice\":\"Gets the owner of a token.\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Safely transfers the ownership of a token to a recipient.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Safely transfers the ownership of a token to a recipient.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Sets or unsets an approval to transfer all tokens on behalf of their owner.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Unsafely transfers the ownership of a token to a recipient.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0x1b9d3522fab7ad81b4757fa0ce919f4320f08249546b3e3bd79da7cf12d55cee\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": { "storage": [], "types": null },
          "userdoc": {
            "kind": "user",
            "methods": {
              "approve(address,uint256)": {
                "notice": "Sets or unsets an approval to transfer a single token on behalf of its owner."
              },
              "balanceOf(address)": { "notice": "Gets the balance of an address." },
              "getApproved(uint256)": { "notice": "Gets the approved address for a token." },
              "isApprovedForAll(address,address)": {
                "notice": "Gets whether an operator is approved for all tokens by an owner."
              },
              "ownerOf(uint256)": { "notice": "Gets the owner of a token." },
              "safeTransferFrom(address,address,uint256)": {
                "notice": "Safely transfers the ownership of a token to a recipient."
              },
              "safeTransferFrom(address,address,uint256,bytes)": {
                "notice": "Safely transfers the ownership of a token to a recipient."
              },
              "setApprovalForAll(address,bool)": {
                "notice": "Sets or unsets an approval to transfer all tokens on behalf of their owner."
              },
              "transferFrom(address,address,uint256)": {
                "notice": "Unsafely transfers the ownership of a token to a recipient."
              }
            },
            "version": 1
          }
        }
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
        "IERC20": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                { "indexed": true, "internalType": "address", "name": "owner", "type": "address" },
                { "indexed": true, "internalType": "address", "name": "spender", "type": "address" },
                { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                { "indexed": true, "internalType": "address", "name": "from", "type": "address" },
                { "indexed": true, "internalType": "address", "name": "to", "type": "address" },
                { "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256" }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                { "internalType": "address", "name": "owner", "type": "address" },
                { "internalType": "address", "name": "spender", "type": "address" }
              ],
              "name": "allowance",
              "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                { "internalType": "address", "name": "spender", "type": "address" },
                { "internalType": "uint256", "name": "amount", "type": "uint256" }
              ],
              "name": "approve",
              "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [{ "internalType": "address", "name": "account", "type": "address" }],
              "name": "balanceOf",
              "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                { "internalType": "address", "name": "to", "type": "address" },
                { "internalType": "uint256", "name": "amount", "type": "uint256" }
              ],
              "name": "transfer",
              "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                { "internalType": "address", "name": "from", "type": "address" },
                { "internalType": "address", "name": "to", "type": "address" },
                { "internalType": "uint256", "name": "amount", "type": "uint256" }
              ],
              "name": "transferFrom",
              "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Interface of the ERC20 standard as defined in the EIP.",
            "events": {
              "Approval(address,address,uint256)": {
                "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
              },
              "Transfer(address,address,uint256)": {
                "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
              }
            },
            "kind": "dev",
            "methods": {
              "allowance(address,address)": {
                "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
              },
              "approve(address,uint256)": {
                "details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
              },
              "balanceOf(address)": { "details": "Returns the amount of tokens owned by `account`." },
              "totalSupply()": { "details": "Returns the amount of tokens in existence." },
              "transfer(address,uint256)": {
                "details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
              },
              "transferFrom(address,address,uint256)": {
                "details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "allowance(address,address)": "dd62ed3e",
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "totalSupply()": "18160ddd",
              "transfer(address,uint256)": "a9059cbb",
              "transferFrom(address,address,uint256)": "23b872dd"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": { "storage": [], "types": null },
          "userdoc": { "kind": "user", "methods": {}, "version": 1 }
        }
      },
      "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
        "IERC20Permit": {
          "abi": [
            {
              "inputs": [],
              "name": "DOMAIN_SEPARATOR",
              "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32" }],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }],
              "name": "nonces",
              "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                { "internalType": "address", "name": "owner", "type": "address" },
                { "internalType": "address", "name": "spender", "type": "address" },
                { "internalType": "uint256", "name": "value", "type": "uint256" },
                { "internalType": "uint256", "name": "deadline", "type": "uint256" },
                { "internalType": "uint8", "name": "v", "type": "uint8" },
                { "internalType": "bytes32", "name": "r", "type": "bytes32" },
                { "internalType": "bytes32", "name": "s", "type": "bytes32" }
              ],
              "name": "permit",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.",
            "kind": "dev",
            "methods": {
              "DOMAIN_SEPARATOR()": {
                "details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
              },
              "nonces(address)": {
                "details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
              },
              "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
                "details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "DOMAIN_SEPARATOR()": "3644e515",
              "nonces(address)": "7ecebe00",
              "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": { "storage": [], "types": null },
          "userdoc": { "kind": "user", "methods": {}, "version": 1 }
        }
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
        "SafeERC20": {
          "abi": [],
          "devdoc": {
            "details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
            "kind": "dev",
            "methods": {},
            "title": "SafeERC20",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220338169e238ba4a4ebaf71af8e8f69cbf1a56a53f7de9532c6181ecd81ceab73264736f6c63430008110033",
              "opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLER DUP2 PUSH10 0xE238BA4A4EBAF71AF8E8 0xF6 SWAP13 0xBF BYTE JUMP 0xA5 EXTCODEHASH PUSH30 0xE9532C6181ECD81CEAB73264736F6C634300081100330000000000000000 ",
              "sourceMap": "707:3748:15:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;707:3748:15;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220338169e238ba4a4ebaf71af8e8f69cbf1a56a53f7de9532c6181ecd81ceab73264736f6c63430008110033",
              "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLER DUP2 PUSH10 0xE238BA4A4EBAF71AF8E8 0xF6 SWAP13 0xBF BYTE JUMP 0xA5 EXTCODEHASH PUSH30 0xE9532C6181ECD81CEAB73264736F6C634300081100330000000000000000 ",
              "sourceMap": "707:3748:15:-:0;;;;;;;;"
            },
            "gasEstimates": {
              "creation": { "codeDepositCost": "17200", "executionCost": "103", "totalCost": "17303" },
              "internal": {
                "_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
                "safeApprove(contract IERC20,address,uint256)": "infinite",
                "safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
                "safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
                "safePermit(contract IERC20Permit,address,address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
                "safeTransfer(contract IERC20,address,uint256)": "infinite",
                "safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": { "storage": [], "types": null },
          "userdoc": { "kind": "user", "methods": {}, "version": 1 }
        }
      },
      "@openzeppelin/contracts/utils/Address.sol": {
        "Address": {
          "abi": [],
          "devdoc": {
            "details": "Collection of functions related to the address type",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208a70cc892a52df79b6673c76fd34ce38f89930c43bec5d782912d709ff33a68264736f6c63430008110033",
              "opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP11 PUSH17 0xCC892A52DF79B6673C76FD34CE38F89930 0xC4 EXTCODESIZE 0xEC 0x5D PUSH25 0x2912D709FF33A68264736F6C63430008110033000000000000 ",
              "sourceMap": "194:8964:16:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:8964:16;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208a70cc892a52df79b6673c76fd34ce38f89930c43bec5d782912d709ff33a68264736f6c63430008110033",
              "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP11 PUSH17 0xCC892A52DF79B6673C76FD34CE38F89930 0xC4 EXTCODESIZE 0xEC 0x5D PUSH25 0x2912D709FF33A68264736F6C63430008110033000000000000 ",
              "sourceMap": "194:8964:16:-:0;;;;;;;;"
            },
            "gasEstimates": {
              "creation": { "codeDepositCost": "17200", "executionCost": "103", "totalCost": "17303" },
              "internal": {
                "_revert(bytes memory,string memory)": "infinite",
                "functionCall(address,bytes memory)": "infinite",
                "functionCall(address,bytes memory,string memory)": "infinite",
                "functionCallWithValue(address,bytes memory,uint256)": "infinite",
                "functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
                "functionDelegateCall(address,bytes memory)": "infinite",
                "functionDelegateCall(address,bytes memory,string memory)": "infinite",
                "functionStaticCall(address,bytes memory)": "infinite",
                "functionStaticCall(address,bytes memory,string memory)": "infinite",
                "isContract(address)": "infinite",
                "sendValue(address payable,uint256)": "infinite",
                "verifyCallResult(bool,bytes memory,string memory)": "infinite",
                "verifyCallResultFromTarget(address,bool,bytes memory,string memory)": "infinite"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": { "storage": [], "types": null },
          "userdoc": { "kind": "user", "methods": {}, "version": 1 }
        }
      },
      "@openzeppelin/contracts/utils/Context.sol": {
        "Context": {
          "abi": [],
          "devdoc": {
            "details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": { "storage": [], "types": null },
          "userdoc": { "kind": "user", "methods": {}, "version": 1 }
        }
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol": {
        "StorageSlot": {
          "abi": [],
          "devdoc": {
            "details": "Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ``` contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122048943d89a9c380877cdb36f19933d9e717f8366d34dba98db8ca933cdf1e291064736f6c63430008110033",
              "opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BASEFEE SWAP5 RETURNDATASIZE DUP10 0xA9 0xC3 DUP1 DUP8 PUSH29 0xDB36F19933D9E717F8366D34DBA98DB8CA933CDF1E291064736F6C6343 STOP ADDMOD GT STOP CALLER ",
              "sourceMap": "1279:1391:18:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1279:1391:18;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122048943d89a9c380877cdb36f19933d9e717f8366d34dba98db8ca933cdf1e291064736f6c63430008110033",
              "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BASEFEE SWAP5 RETURNDATASIZE DUP10 0xA9 0xC3 DUP1 DUP8 PUSH29 0xDB36F19933D9E717F8366D34DBA98DB8CA933CDF1E291064736F6C6343 STOP ADDMOD GT STOP CALLER ",
              "sourceMap": "1279:1391:18:-:0;;;;;;;;"
            },
            "gasEstimates": {
              "creation": { "codeDepositCost": "17200", "executionCost": "103", "totalCost": "17303" },
              "internal": {
                "getAddressSlot(bytes32)": "infinite",
                "getBooleanSlot(bytes32)": "infinite",
                "getBytes32Slot(bytes32)": "infinite",
                "getUint256Slot(bytes32)": "infinite"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ``` contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": { "storage": [], "types": null },
          "userdoc": { "kind": "user", "methods": {}, "version": 1 }
        }
      },
      "contracts/GasStation.sol": {
        "OpenCampusGasStation": {
          "abi": [
            {
              "inputs": [{ "internalType": "address payable[]", "name": "gasPumps", "type": "address[]" }],
              "stateMutability": "payable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                { "indexed": true, "internalType": "address payable[]", "name": "oldGasPumps", "type": "address[]" },
                { "indexed": true, "internalType": "address payable[]", "name": "newGasPumps", "type": "address[]" }
              ],
              "name": "GasPumpsSet",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                { "indexed": true, "internalType": "address", "name": "oldOwner", "type": "address" },
                { "indexed": true, "internalType": "address", "name": "newOwner", "type": "address" }
              ],
              "name": "OwnerSet",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                { "indexed": true, "internalType": "address", "name": "previousOwner", "type": "address" },
                { "indexed": true, "internalType": "address", "name": "newOwner", "type": "address" }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            { "inputs": [], "name": "charge", "outputs": [], "stateMutability": "payable", "type": "function" },
            {
              "inputs": [{ "internalType": "address payable[]", "name": "addrs", "type": "address[]" }],
              "name": "charge",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "getGasPumps",
              "outputs": [{ "internalType": "address payable[]", "name": "", "type": "address[]" }],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [{ "internalType": "address", "name": "", "type": "address" }],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
              "name": "pumps",
              "outputs": [{ "internalType": "address payable", "name": "", "type": "address" }],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                { "internalType": "address[]", "name": "accounts", "type": "address[]" },
                { "internalType": "contract IERC20[]", "name": "tokens", "type": "address[]" },
                { "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }
              ],
              "name": "recoverERC20s",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                { "internalType": "address[]", "name": "accounts", "type": "address[]" },
                { "internalType": "contract IERC721[]", "name": "contracts", "type": "address[]" },
                { "internalType": "uint256[]", "name": "tokenIds", "type": "uint256[]" }
              ],
              "name": "recoverERC721s",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                { "internalType": "address payable[]", "name": "accounts", "type": "address[]" },
                { "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }
              ],
              "name": "recoverETH",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [{ "internalType": "address payable[]", "name": "newGasPumps", "type": "address[]" }],
              "name": "setGasPumps",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [{ "internalType": "bytes4", "name": "interfaceId", "type": "bytes4" }],
              "name": "supportsInterface",
              "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [{ "internalType": "address", "name": "newOwner", "type": "address" }],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {
              "owner()": { "returns": { "_0": "The address of the contract owner." } },
              "recoverERC20s(address[],address[],uint256[])": {
                "details": "Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.",
                "params": {
                  "accounts": "the list of accounts to transfer the tokens to.",
                  "amounts": "the list of token amounts to transfer.",
                  "tokens": "the list of ERC20 token addresses."
                }
              },
              "recoverERC721s(address[],address[],uint256[])": {
                "details": "Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.",
                "params": {
                  "accounts": "the list of accounts to transfer the tokens to.",
                  "contracts": "the list of ERC721 contract addresses.",
                  "tokenIds": "the list of token ids to transfer."
                }
              },
              "recoverETH(address[],uint256[])": {
                "details": "Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.",
                "params": {
                  "accounts": "the list of accounts to transfer the tokens to.",
                  "amounts": "the list of token amounts to transfer."
                }
              },
              "supportsInterface(bytes4)": {
                "details": "Note: This function call must use less than 30 000 gas.",
                "params": { "interfaceId": "the interface identifier to test." },
                "returns": {
                  "_0": "True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."
                }
              },
              "transferOwnership(address)": {
                "details": "Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.",
                "params": {
                  "newOwner": "The address of the new contract owner. Using the zero address means renouncing ownership."
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "@_1705": { "entryPoint": null, "id": 1705, "parameterSlots": 1, "returnSlots": 0 },
                "@_31": { "entryPoint": null, "id": 31, "parameterSlots": 1, "returnSlots": 0 },
                "@constructorInit_200": { "entryPoint": 162, "id": 200, "parameterSlots": 2, "returnSlots": 0 },
                "@layout_306": { "entryPoint": 108, "id": 306, "parameterSlots": 0, "returnSlots": 1 },
                "@layout_448": { "entryPoint": 702, "id": 448, "parameterSlots": 0, "returnSlots": 1 },
                "@owner_276": { "entryPoint": 940, "id": 276, "parameterSlots": 1, "returnSlots": 1 },
                "@owner_63": { "entryPoint": 891, "id": 63, "parameterSlots": 0, "returnSlots": 1 },
                "@setGasPumps_1746": { "entryPoint": 309, "id": 1746, "parameterSlots": 1, "returnSlots": 0 },
                "@setSupportedInterface_402": { "entryPoint": 750, "id": 402, "parameterSlots": 3, "returnSlots": 0 },
                "abi_decode_address_payable_fromMemory": {
                  "entryPoint": 1104,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_array$_t_address_payable_$dyn_memory_ptr_fromMemory": {
                  "entryPoint": 1133,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_array$_t_address_payable_$dyn_memory_ptr__to_t_array$_t_address_payable_$dyn_memory_ptr__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 1387,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_array$_t_address_payable_$dyn_storage__to_t_array$_t_address_payable_$dyn_memory_ptr__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 1452,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_2d10247a65709fdb3c0696b0ed760a0c246e12f8c496efb56291dd2fe3b0275d__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "checked_sub_t_uint256": { "entryPoint": 1365, "id": null, "parameterSlots": 2, "returnSlots": 1 },
                "increment_t_uint256": { "entryPoint": 1534, "id": null, "parameterSlots": 1, "returnSlots": 1 },
                "panic_error_0x11": { "entryPoint": 1343, "id": null, "parameterSlots": 0, "returnSlots": 0 },
                "panic_error_0x32": { "entryPoint": 1512, "id": null, "parameterSlots": 0, "returnSlots": 0 },
                "panic_error_0x41": { "entryPoint": 1082, "id": null, "parameterSlots": 0, "returnSlots": 0 }
              },
              "generatedSources": [
                {
                  "ast": {
                    "nodeType": "YulBlock",
                    "src": "0:3931:21",
                    "statements": [
                      { "nodeType": "YulBlock", "src": "6:3:21", "statements": [] },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "46:95:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "63:1:21",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "70:3:21",
                                        "type": "",
                                        "value": "224"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "75:10:21",
                                        "type": "",
                                        "value": "0x4e487b71"
                                      }
                                    ],
                                    "functionName": { "name": "shl", "nodeType": "YulIdentifier", "src": "66:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "66:20:21"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "56:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "56:31:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "56:31:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "103:1:21",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "106:4:21",
                                    "type": "",
                                    "value": "0x41"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "96:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "96:15:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "96:15:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "127:1:21",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "130:4:21",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": { "name": "revert", "nodeType": "YulIdentifier", "src": "120:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "120:15:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "120:15:21"
                            }
                          ]
                        },
                        "name": "panic_error_0x41",
                        "nodeType": "YulFunctionDefinition",
                        "src": "14:127:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "214:117:21",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "224:22:21",
                              "value": {
                                "arguments": [{ "name": "offset", "nodeType": "YulIdentifier", "src": "239:6:21" }],
                                "functionName": { "name": "mload", "nodeType": "YulIdentifier", "src": "233:5:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "233:13:21"
                              },
                              "variableNames": [{ "name": "value", "nodeType": "YulIdentifier", "src": "224:5:21" }]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "309:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "318:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "321:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "311:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "311:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "311:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "value", "nodeType": "YulIdentifier", "src": "268:5:21" },
                                      {
                                        "arguments": [
                                          { "name": "value", "nodeType": "YulIdentifier", "src": "279:5:21" },
                                          {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "294:3:21",
                                                    "type": "",
                                                    "value": "160"
                                                  },
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "299:1:21",
                                                    "type": "",
                                                    "value": "1"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "shl",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "290:3:21"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "290:11:21"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "303:1:21",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sub",
                                              "nodeType": "YulIdentifier",
                                              "src": "286:3:21"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "286:19:21"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "275:3:21"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "275:31:21"
                                      }
                                    ],
                                    "functionName": { "name": "eq", "nodeType": "YulIdentifier", "src": "265:2:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "265:42:21"
                                  }
                                ],
                                "functionName": { "name": "iszero", "nodeType": "YulIdentifier", "src": "258:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "258:50:21"
                              },
                              "nodeType": "YulIf",
                              "src": "255:70:21"
                            }
                          ]
                        },
                        "name": "abi_decode_address_payable_fromMemory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [{ "name": "offset", "nodeType": "YulTypedName", "src": "193:6:21", "type": "" }],
                        "returnVariables": [
                          { "name": "value", "nodeType": "YulTypedName", "src": "204:5:21", "type": "" }
                        ],
                        "src": "146:185:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "450:1031:21",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "460:12:21",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "470:2:21",
                                "type": "",
                                "value": "32"
                              },
                              "variables": [{ "name": "_1", "nodeType": "YulTypedName", "src": "464:2:21", "type": "" }]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "517:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "526:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "529:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "519:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "519:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "519:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "492:7:21" },
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "501:9:21" }
                                    ],
                                    "functionName": { "name": "sub", "nodeType": "YulIdentifier", "src": "488:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "488:23:21"
                                  },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "513:2:21" }
                                ],
                                "functionName": { "name": "slt", "nodeType": "YulIdentifier", "src": "484:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "484:32:21"
                              },
                              "nodeType": "YulIf",
                              "src": "481:52:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "542:30:21",
                              "value": {
                                "arguments": [{ "name": "headStart", "nodeType": "YulIdentifier", "src": "562:9:21" }],
                                "functionName": { "name": "mload", "nodeType": "YulIdentifier", "src": "556:5:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "556:16:21"
                              },
                              "variables": [
                                { "name": "offset", "nodeType": "YulTypedName", "src": "546:6:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "581:28:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "599:2:21",
                                        "type": "",
                                        "value": "64"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "603:1:21",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": { "name": "shl", "nodeType": "YulIdentifier", "src": "595:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "595:10:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "607:1:21",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": { "name": "sub", "nodeType": "YulIdentifier", "src": "591:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "591:18:21"
                              },
                              "variables": [{ "name": "_2", "nodeType": "YulTypedName", "src": "585:2:21", "type": "" }]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "636:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "645:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "648:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "638:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "638:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "638:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "offset", "nodeType": "YulIdentifier", "src": "624:6:21" },
                                  { "name": "_2", "nodeType": "YulIdentifier", "src": "632:2:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "621:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "621:14:21"
                              },
                              "nodeType": "YulIf",
                              "src": "618:34:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "661:32:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "675:9:21" },
                                  { "name": "offset", "nodeType": "YulIdentifier", "src": "686:6:21" }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "671:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "671:22:21"
                              },
                              "variables": [{ "name": "_3", "nodeType": "YulTypedName", "src": "665:2:21", "type": "" }]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "741:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "750:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "753:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "743:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "743:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "743:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          { "name": "_3", "nodeType": "YulIdentifier", "src": "720:2:21" },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "724:4:21",
                                            "type": "",
                                            "value": "0x1f"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "716:3:21"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "716:13:21"
                                      },
                                      { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "731:7:21" }
                                    ],
                                    "functionName": { "name": "slt", "nodeType": "YulIdentifier", "src": "712:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "712:27:21"
                                  }
                                ],
                                "functionName": { "name": "iszero", "nodeType": "YulIdentifier", "src": "705:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "705:35:21"
                              },
                              "nodeType": "YulIf",
                              "src": "702:55:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "766:19:21",
                              "value": {
                                "arguments": [{ "name": "_3", "nodeType": "YulIdentifier", "src": "782:2:21" }],
                                "functionName": { "name": "mload", "nodeType": "YulIdentifier", "src": "776:5:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "776:9:21"
                              },
                              "variables": [{ "name": "_4", "nodeType": "YulTypedName", "src": "770:2:21", "type": "" }]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "808:22:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x41",
                                        "nodeType": "YulIdentifier",
                                        "src": "810:16:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "810:18:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "810:18:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "_4", "nodeType": "YulIdentifier", "src": "800:2:21" },
                                  { "name": "_2", "nodeType": "YulIdentifier", "src": "804:2:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "797:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "797:10:21"
                              },
                              "nodeType": "YulIf",
                              "src": "794:36:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "839:20:21",
                              "value": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "853:1:21",
                                    "type": "",
                                    "value": "5"
                                  },
                                  { "name": "_4", "nodeType": "YulIdentifier", "src": "856:2:21" }
                                ],
                                "functionName": { "name": "shl", "nodeType": "YulIdentifier", "src": "849:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "849:10:21"
                              },
                              "variables": [{ "name": "_5", "nodeType": "YulTypedName", "src": "843:2:21", "type": "" }]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "868:23:21",
                              "value": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "888:2:21",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": { "name": "mload", "nodeType": "YulIdentifier", "src": "882:5:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "882:9:21"
                              },
                              "variables": [
                                { "name": "memPtr", "nodeType": "YulTypedName", "src": "872:6:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "900:56:21",
                              "value": {
                                "arguments": [
                                  { "name": "memPtr", "nodeType": "YulIdentifier", "src": "922:6:21" },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          { "name": "_5", "nodeType": "YulIdentifier", "src": "938:2:21" },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "942:2:21",
                                            "type": "",
                                            "value": "63"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "934:3:21"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "934:11:21"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "951:2:21",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "947:3:21"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "947:7:21"
                                      }
                                    ],
                                    "functionName": { "name": "and", "nodeType": "YulIdentifier", "src": "930:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "930:25:21"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "918:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "918:38:21"
                              },
                              "variables": [
                                { "name": "newFreePtr", "nodeType": "YulTypedName", "src": "904:10:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1015:22:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x41",
                                        "nodeType": "YulIdentifier",
                                        "src": "1017:16:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1017:18:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1017:18:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "newFreePtr", "nodeType": "YulIdentifier", "src": "974:10:21" },
                                      { "name": "_2", "nodeType": "YulIdentifier", "src": "986:2:21" }
                                    ],
                                    "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "971:2:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "971:18:21"
                                  },
                                  {
                                    "arguments": [
                                      { "name": "newFreePtr", "nodeType": "YulIdentifier", "src": "994:10:21" },
                                      { "name": "memPtr", "nodeType": "YulIdentifier", "src": "1006:6:21" }
                                    ],
                                    "functionName": { "name": "lt", "nodeType": "YulIdentifier", "src": "991:2:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "991:22:21"
                                  }
                                ],
                                "functionName": { "name": "or", "nodeType": "YulIdentifier", "src": "968:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "968:46:21"
                              },
                              "nodeType": "YulIf",
                              "src": "965:72:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1053:2:21",
                                    "type": "",
                                    "value": "64"
                                  },
                                  { "name": "newFreePtr", "nodeType": "YulIdentifier", "src": "1057:10:21" }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "1046:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1046:22:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1046:22:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1077:17:21",
                              "value": { "name": "memPtr", "nodeType": "YulIdentifier", "src": "1088:6:21" },
                              "variables": [
                                { "name": "dst", "nodeType": "YulTypedName", "src": "1081:3:21", "type": "" }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "memPtr", "nodeType": "YulIdentifier", "src": "1110:6:21" },
                                  { "name": "_4", "nodeType": "YulIdentifier", "src": "1118:2:21" }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "1103:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1103:18:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1103:18:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1130:22:21",
                              "value": {
                                "arguments": [
                                  { "name": "memPtr", "nodeType": "YulIdentifier", "src": "1141:6:21" },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "1149:2:21" }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "1137:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1137:15:21"
                              },
                              "variableNames": [{ "name": "dst", "nodeType": "YulIdentifier", "src": "1130:3:21" }]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1161:34:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "_3", "nodeType": "YulIdentifier", "src": "1183:2:21" },
                                      { "name": "_5", "nodeType": "YulIdentifier", "src": "1187:2:21" }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "1179:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1179:11:21"
                                  },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "1192:2:21" }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "1175:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1175:20:21"
                              },
                              "variables": [
                                { "name": "srcEnd", "nodeType": "YulTypedName", "src": "1165:6:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1227:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1236:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1239:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "1229:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1229:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1229:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "srcEnd", "nodeType": "YulIdentifier", "src": "1210:6:21" },
                                  { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "1218:7:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "1207:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1207:19:21"
                              },
                              "nodeType": "YulIf",
                              "src": "1204:39:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1252:22:21",
                              "value": {
                                "arguments": [
                                  { "name": "_3", "nodeType": "YulIdentifier", "src": "1267:2:21" },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "1271:2:21" }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "1263:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1263:11:21"
                              },
                              "variables": [
                                { "name": "src", "nodeType": "YulTypedName", "src": "1256:3:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1339:111:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        { "name": "dst", "nodeType": "YulIdentifier", "src": "1360:3:21" },
                                        {
                                          "arguments": [
                                            { "name": "src", "nodeType": "YulIdentifier", "src": "1403:3:21" }
                                          ],
                                          "functionName": {
                                            "name": "abi_decode_address_payable_fromMemory",
                                            "nodeType": "YulIdentifier",
                                            "src": "1365:37:21"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "1365:42:21"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "1353:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1353:55:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1353:55:21"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "1421:19:21",
                                    "value": {
                                      "arguments": [
                                        { "name": "dst", "nodeType": "YulIdentifier", "src": "1432:3:21" },
                                        { "name": "_1", "nodeType": "YulIdentifier", "src": "1437:2:21" }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "1428:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1428:12:21"
                                    },
                                    "variableNames": [
                                      { "name": "dst", "nodeType": "YulIdentifier", "src": "1421:3:21" }
                                    ]
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "src", "nodeType": "YulIdentifier", "src": "1294:3:21" },
                                  { "name": "srcEnd", "nodeType": "YulIdentifier", "src": "1299:6:21" }
                                ],
                                "functionName": { "name": "lt", "nodeType": "YulIdentifier", "src": "1291:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1291:15:21"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "1307:23:21",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "1309:19:21",
                                    "value": {
                                      "arguments": [
                                        { "name": "src", "nodeType": "YulIdentifier", "src": "1320:3:21" },
                                        { "name": "_1", "nodeType": "YulIdentifier", "src": "1325:2:21" }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "1316:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1316:12:21"
                                    },
                                    "variableNames": [
                                      { "name": "src", "nodeType": "YulIdentifier", "src": "1309:3:21" }
                                    ]
                                  }
                                ]
                              },
                              "pre": { "nodeType": "YulBlock", "src": "1287:3:21", "statements": [] },
                              "src": "1283:167:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1459:16:21",
                              "value": { "name": "memPtr", "nodeType": "YulIdentifier", "src": "1469:6:21" },
                              "variableNames": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "1459:6:21" }]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_array$_t_address_payable_$dyn_memory_ptr_fromMemory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "416:9:21", "type": "" },
                          { "name": "dataEnd", "nodeType": "YulTypedName", "src": "427:7:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "value0", "nodeType": "YulTypedName", "src": "439:6:21", "type": "" }
                        ],
                        "src": "336:1145:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1518:95:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1535:1:21",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1542:3:21",
                                        "type": "",
                                        "value": "224"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1547:10:21",
                                        "type": "",
                                        "value": "0x4e487b71"
                                      }
                                    ],
                                    "functionName": { "name": "shl", "nodeType": "YulIdentifier", "src": "1538:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1538:20:21"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "1528:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1528:31:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1528:31:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1575:1:21",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1578:4:21",
                                    "type": "",
                                    "value": "0x11"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "1568:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1568:15:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1568:15:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1599:1:21",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1602:4:21",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": { "name": "revert", "nodeType": "YulIdentifier", "src": "1592:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1592:15:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1592:15:21"
                            }
                          ]
                        },
                        "name": "panic_error_0x11",
                        "nodeType": "YulFunctionDefinition",
                        "src": "1486:127:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1667:79:21",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "1677:17:21",
                              "value": {
                                "arguments": [
                                  { "name": "x", "nodeType": "YulIdentifier", "src": "1689:1:21" },
                                  { "name": "y", "nodeType": "YulIdentifier", "src": "1692:1:21" }
                                ],
                                "functionName": { "name": "sub", "nodeType": "YulIdentifier", "src": "1685:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1685:9:21"
                              },
                              "variableNames": [{ "name": "diff", "nodeType": "YulIdentifier", "src": "1677:4:21" }]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1718:22:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nodeType": "YulIdentifier",
                                        "src": "1720:16:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1720:18:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1720:18:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "diff", "nodeType": "YulIdentifier", "src": "1709:4:21" },
                                  { "name": "x", "nodeType": "YulIdentifier", "src": "1715:1:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "1706:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1706:11:21"
                              },
                              "nodeType": "YulIf",
                              "src": "1703:37:21"
                            }
                          ]
                        },
                        "name": "checked_sub_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "x", "nodeType": "YulTypedName", "src": "1649:1:21", "type": "" },
                          { "name": "y", "nodeType": "YulTypedName", "src": "1652:1:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "diff", "nodeType": "YulTypedName", "src": "1658:4:21", "type": "" }
                        ],
                        "src": "1618:128:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1925:169:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "1942:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1953:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "1935:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1935:21:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1935:21:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "1976:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1987:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "1972:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1972:18:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1992:2:21",
                                    "type": "",
                                    "value": "19"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "1965:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1965:30:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1965:30:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "2015:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2026:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "2011:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2011:18:21"
                                  },
                                  {
                                    "hexValue": "43616c6c6572206973206e6f74206f776e6572",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "2031:21:21",
                                    "type": "",
                                    "value": "Caller is not owner"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "2004:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "2004:49:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "2004:49:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2062:26:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "2074:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2085:2:21",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "2070:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "2070:18:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "2062:4:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_2d10247a65709fdb3c0696b0ed760a0c246e12f8c496efb56291dd2fe3b0275d__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "1902:9:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "1916:4:21", "type": "" }
                        ],
                        "src": "1751:343:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "2284:400:21",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2294:16:21",
                              "value": { "name": "pos", "nodeType": "YulIdentifier", "src": "2307:3:21" },
                              "variables": [
                                { "name": "pos_1", "nodeType": "YulTypedName", "src": "2298:5:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2319:27:21",
                              "value": {
                                "arguments": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "2339:6:21" }],
                                "functionName": { "name": "mload", "nodeType": "YulIdentifier", "src": "2333:5:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "2333:13:21"
                              },
                              "variables": [
                                { "name": "length", "nodeType": "YulTypedName", "src": "2323:6:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2355:12:21",
                              "value": { "name": "pos", "nodeType": "YulIdentifier", "src": "2364:3:21" },
                              "variableNames": [{ "name": "pos_1", "nodeType": "YulIdentifier", "src": "2355:5:21" }]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2376:14:21",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2386:4:21",
                                "type": "",
                                "value": "0x20"
                              },
                              "variables": [
                                { "name": "_1", "nodeType": "YulTypedName", "src": "2380:2:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2399:29:21",
                              "value": {
                                "arguments": [
                                  { "name": "value0", "nodeType": "YulIdentifier", "src": "2417:6:21" },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "2425:2:21" }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "2413:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "2413:15:21"
                              },
                              "variables": [
                                { "name": "srcPtr", "nodeType": "YulTypedName", "src": "2403:6:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2437:10:21",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2446:1:21",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [{ "name": "i", "nodeType": "YulTypedName", "src": "2441:1:21", "type": "" }]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2505:152:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        { "name": "pos_1", "nodeType": "YulIdentifier", "src": "2526:5:21" },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                { "name": "srcPtr", "nodeType": "YulIdentifier", "src": "2543:6:21" }
                                              ],
                                              "functionName": {
                                                "name": "mload",
                                                "nodeType": "YulIdentifier",
                                                "src": "2537:5:21"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "2537:13:21"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "arguments": [
                                                    {
                                                      "kind": "number",
                                                      "nodeType": "YulLiteral",
                                                      "src": "2560:3:21",
                                                      "type": "",
                                                      "value": "160"
                                                    },
                                                    {
                                                      "kind": "number",
                                                      "nodeType": "YulLiteral",
                                                      "src": "2565:1:21",
                                                      "type": "",
                                                      "value": "1"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "shl",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2556:3:21"
                                                  },
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "2556:11:21"
                                                },
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "2569:1:21",
                                                  "type": "",
                                                  "value": "1"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "sub",
                                                "nodeType": "YulIdentifier",
                                                "src": "2552:3:21"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "2552:19:21"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "and",
                                            "nodeType": "YulIdentifier",
                                            "src": "2533:3:21"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "2533:39:21"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "2519:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2519:54:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2519:54:21"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "2586:23:21",
                                    "value": {
                                      "arguments": [
                                        { "name": "pos_1", "nodeType": "YulIdentifier", "src": "2599:5:21" },
                                        { "name": "_1", "nodeType": "YulIdentifier", "src": "2606:2:21" }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "2595:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2595:14:21"
                                    },
                                    "variableNames": [
                                      { "name": "pos_1", "nodeType": "YulIdentifier", "src": "2586:5:21" }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "2622:25:21",
                                    "value": {
                                      "arguments": [
                                        { "name": "srcPtr", "nodeType": "YulIdentifier", "src": "2636:6:21" },
                                        { "name": "_1", "nodeType": "YulIdentifier", "src": "2644:2:21" }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "2632:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2632:15:21"
                                    },
                                    "variableNames": [
                                      { "name": "srcPtr", "nodeType": "YulIdentifier", "src": "2622:6:21" }
                                    ]
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "i", "nodeType": "YulIdentifier", "src": "2467:1:21" },
                                  { "name": "length", "nodeType": "YulIdentifier", "src": "2470:6:21" }
                                ],
                                "functionName": { "name": "lt", "nodeType": "YulIdentifier", "src": "2464:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "2464:13:21"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "2478:18:21",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "2480:14:21",
                                    "value": {
                                      "arguments": [
                                        { "name": "i", "nodeType": "YulIdentifier", "src": "2489:1:21" },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2492:1:21",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "2485:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2485:9:21"
                                    },
                                    "variableNames": [{ "name": "i", "nodeType": "YulIdentifier", "src": "2480:1:21" }]
                                  }
                                ]
                              },
                              "pre": { "nodeType": "YulBlock", "src": "2460:3:21", "statements": [] },
                              "src": "2456:201:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2666:12:21",
                              "value": { "name": "pos_1", "nodeType": "YulIdentifier", "src": "2673:5:21" },
                              "variableNames": [{ "name": "end", "nodeType": "YulIdentifier", "src": "2666:3:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_array$_t_address_payable_$dyn_memory_ptr__to_t_array$_t_address_payable_$dyn_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "pos", "nodeType": "YulTypedName", "src": "2260:3:21", "type": "" },
                          { "name": "value0", "nodeType": "YulTypedName", "src": "2265:6:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "end", "nodeType": "YulTypedName", "src": "2276:3:21", "type": "" }
                        ],
                        "src": "2099:585:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "2871:426:21",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2881:16:21",
                              "value": { "name": "pos", "nodeType": "YulIdentifier", "src": "2894:3:21" },
                              "variables": [
                                { "name": "pos_1", "nodeType": "YulTypedName", "src": "2885:5:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2906:27:21",
                              "value": {
                                "arguments": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "2926:6:21" }],
                                "functionName": { "name": "sload", "nodeType": "YulIdentifier", "src": "2920:5:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "2920:13:21"
                              },
                              "variables": [
                                { "name": "length", "nodeType": "YulTypedName", "src": "2910:6:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2942:12:21",
                              "value": { "name": "pos", "nodeType": "YulIdentifier", "src": "2951:3:21" },
                              "variableNames": [{ "name": "pos_1", "nodeType": "YulIdentifier", "src": "2942:5:21" }]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2970:1:21",
                                    "type": "",
                                    "value": "0"
                                  },
                                  { "name": "value0", "nodeType": "YulIdentifier", "src": "2973:6:21" }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "2963:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "2963:17:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "2963:17:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2989:14:21",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2999:4:21",
                                "type": "",
                                "value": "0x20"
                              },
                              "variables": [
                                { "name": "_1", "nodeType": "YulTypedName", "src": "2993:2:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3012:30:21",
                              "value": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3036:1:21",
                                    "type": "",
                                    "value": "0"
                                  },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "3039:2:21" }
                                ],
                                "functionName": {
                                  "name": "keccak256",
                                  "nodeType": "YulIdentifier",
                                  "src": "3026:9:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3026:16:21"
                              },
                              "variables": [
                                { "name": "srcPtr", "nodeType": "YulTypedName", "src": "3016:6:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3051:10:21",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3060:1:21",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [{ "name": "i", "nodeType": "YulTypedName", "src": "3055:1:21", "type": "" }]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "3119:151:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        { "name": "pos_1", "nodeType": "YulIdentifier", "src": "3140:5:21" },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                { "name": "srcPtr", "nodeType": "YulIdentifier", "src": "3157:6:21" }
                                              ],
                                              "functionName": {
                                                "name": "sload",
                                                "nodeType": "YulIdentifier",
                                                "src": "3151:5:21"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "3151:13:21"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "arguments": [
                                                    {
                                                      "kind": "number",
                                                      "nodeType": "YulLiteral",
                                                      "src": "3174:3:21",
                                                      "type": "",
                                                      "value": "160"
                                                    },
                                                    {
                                                      "kind": "number",
                                                      "nodeType": "YulLiteral",
                                                      "src": "3179:1:21",
                                                      "type": "",
                                                      "value": "1"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "shl",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "3170:3:21"
                                                  },
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "3170:11:21"
                                                },
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "3183:1:21",
                                                  "type": "",
                                                  "value": "1"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "sub",
                                                "nodeType": "YulIdentifier",
                                                "src": "3166:3:21"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "3166:19:21"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "and",
                                            "nodeType": "YulIdentifier",
                                            "src": "3147:3:21"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "3147:39:21"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "3133:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3133:54:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3133:54:21"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "3200:23:21",
                                    "value": {
                                      "arguments": [
                                        { "name": "pos_1", "nodeType": "YulIdentifier", "src": "3213:5:21" },
                                        { "name": "_1", "nodeType": "YulIdentifier", "src": "3220:2:21" }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "3209:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3209:14:21"
                                    },
                                    "variableNames": [
                                      { "name": "pos_1", "nodeType": "YulIdentifier", "src": "3200:5:21" }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "3236:24:21",
                                    "value": {
                                      "arguments": [
                                        { "name": "srcPtr", "nodeType": "YulIdentifier", "src": "3250:6:21" },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3258:1:21",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "3246:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3246:14:21"
                                    },
                                    "variableNames": [
                                      { "name": "srcPtr", "nodeType": "YulIdentifier", "src": "3236:6:21" }
                                    ]
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "i", "nodeType": "YulIdentifier", "src": "3081:1:21" },
                                  { "name": "length", "nodeType": "YulIdentifier", "src": "3084:6:21" }
                                ],
                                "functionName": { "name": "lt", "nodeType": "YulIdentifier", "src": "3078:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "3078:13:21"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "3092:18:21",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "3094:14:21",
                                    "value": {
                                      "arguments": [
                                        { "name": "i", "nodeType": "YulIdentifier", "src": "3103:1:21" },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3106:1:21",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "3099:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3099:9:21"
                                    },
                                    "variableNames": [{ "name": "i", "nodeType": "YulIdentifier", "src": "3094:1:21" }]
                                  }
                                ]
                              },
                              "pre": { "nodeType": "YulBlock", "src": "3074:3:21", "statements": [] },
                              "src": "3070:200:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "3279:12:21",
                              "value": { "name": "pos_1", "nodeType": "YulIdentifier", "src": "3286:5:21" },
                              "variableNames": [{ "name": "end", "nodeType": "YulIdentifier", "src": "3279:3:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_array$_t_address_payable_$dyn_storage__to_t_array$_t_address_payable_$dyn_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "pos", "nodeType": "YulTypedName", "src": "2847:3:21", "type": "" },
                          { "name": "value0", "nodeType": "YulTypedName", "src": "2852:6:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "end", "nodeType": "YulTypedName", "src": "2863:3:21", "type": "" }
                        ],
                        "src": "2689:608:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "3334:95:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3351:1:21",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3358:3:21",
                                        "type": "",
                                        "value": "224"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3363:10:21",
                                        "type": "",
                                        "value": "0x4e487b71"
                                      }
                                    ],
                                    "functionName": { "name": "shl", "nodeType": "YulIdentifier", "src": "3354:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3354:20:21"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "3344:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "3344:31:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3344:31:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3391:1:21",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3394:4:21",
                                    "type": "",
                                    "value": "0x32"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "3384:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "3384:15:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3384:15:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3415:1:21",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3418:4:21",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": { "name": "revert", "nodeType": "YulIdentifier", "src": "3408:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "3408:15:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3408:15:21"
                            }
                          ]
                        },
                        "name": "panic_error_0x32",
                        "nodeType": "YulFunctionDefinition",
                        "src": "3302:127:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "3481:88:21",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "3512:22:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nodeType": "YulIdentifier",
                                        "src": "3514:16:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3514:18:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3514:18:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "value", "nodeType": "YulIdentifier", "src": "3497:5:21" },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3508:1:21",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": { "name": "not", "nodeType": "YulIdentifier", "src": "3504:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3504:6:21"
                                  }
                                ],
                                "functionName": { "name": "eq", "nodeType": "YulIdentifier", "src": "3494:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "3494:17:21"
                              },
                              "nodeType": "YulIf",
                              "src": "3491:43:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "3543:20:21",
                              "value": {
                                "arguments": [
                                  { "name": "value", "nodeType": "YulIdentifier", "src": "3554:5:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3561:1:21",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "3550:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "3550:13:21"
                              },
                              "variableNames": [{ "name": "ret", "nodeType": "YulIdentifier", "src": "3543:3:21" }]
                            }
                          ]
                        },
                        "name": "increment_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [{ "name": "value", "nodeType": "YulTypedName", "src": "3463:5:21", "type": "" }],
                        "returnVariables": [
                          { "name": "ret", "nodeType": "YulTypedName", "src": "3473:3:21", "type": "" }
                        ],
                        "src": "3434:135:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "3748:181:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "3765:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3776:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "3758:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "3758:21:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3758:21:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "3799:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3810:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "3795:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3795:18:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3815:2:21",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "3788:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "3788:30:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3788:30:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "3838:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3849:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "3834:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3834:18:21"
                                  },
                                  {
                                    "hexValue": "496e74657266616365446574656374696f6e3a2077726f6e672076616c7565",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "3854:33:21",
                                    "type": "",
                                    "value": "InterfaceDetection: wrong value"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "3827:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "3827:61:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3827:61:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "3897:26:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "3909:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3920:2:21",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "3905:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "3905:18:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "3897:4:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "3725:9:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "3739:4:21", "type": "" }
                        ],
                        "src": "3574:355:21"
                      }
                    ]
                  },
                  "contents": "{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_address_payable_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_address_payable_$dyn_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        let _1 := 32\n        if slt(sub(dataEnd, headStart), _1) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := mload(_3)\n        if gt(_4, _2) { panic_error_0x41() }\n        let _5 := shl(5, _4)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(_5, 63), not(31)))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        let dst := memPtr\n        mstore(memPtr, _4)\n        dst := add(memPtr, _1)\n        let srcEnd := add(add(_3, _5), _1)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_3, _1)\n        for { } lt(src, srcEnd) { src := add(src, _1) }\n        {\n            mstore(dst, abi_decode_address_payable_fromMemory(src))\n            dst := add(dst, _1)\n        }\n        value0 := memPtr\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_2d10247a65709fdb3c0696b0ed760a0c246e12f8c496efb56291dd2fe3b0275d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 19)\n        mstore(add(headStart, 64), \"Caller is not owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_array$_t_address_payable_$dyn_memory_ptr__to_t_array$_t_address_payable_$dyn_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let pos_1 := pos\n        let length := mload(value0)\n        pos_1 := pos\n        let _1 := 0x20\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos_1, and(mload(srcPtr), sub(shl(160, 1), 1)))\n            pos_1 := add(pos_1, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos_1\n    }\n    function abi_encode_tuple_packed_t_array$_t_address_payable_$dyn_storage__to_t_array$_t_address_payable_$dyn_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let pos_1 := pos\n        let length := sload(value0)\n        pos_1 := pos\n        mstore(0, value0)\n        let _1 := 0x20\n        let srcPtr := keccak256(0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos_1, and(sload(srcPtr), sub(shl(160, 1), 1)))\n            pos_1 := add(pos_1, _1)\n            srcPtr := add(srcPtr, 1)\n        }\n        end := pos_1\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"InterfaceDetection: wrong value\")\n        tail := add(headStart, 96)\n    }\n}",
                  "id": 21,
                  "language": "Yul",
                  "name": "#utility.yul"
                }
              ],
              "linkReferences": {},
              "object": "",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH3 0x22BE CODESIZE SUB DUP1 PUSH3 0x22BE DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x26 SWAP2 PUSH3 0x46D JUMP JUMPDEST CALLER PUSH3 0x55 DUP2 PUSH3 0x41 PUSH3 0x6C PUSH1 0x20 SHL PUSH3 0xB69 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0xA2 PUSH1 0x20 SHL PUSH3 0xB97 OR SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST POP PUSH3 0x61 DUP2 PUSH3 0x135 JUMP JUMPDEST POP CALLVALUE PUSH1 0x2 SSTORE PUSH3 0x61A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x9C PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH3 0x555 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH3 0xF9 JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH3 0x131 PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH3 0x11C PUSH3 0x2BE PUSH1 0x20 SHL PUSH3 0xC54 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x2EE PUSH1 0x20 SHL PUSH3 0xC82 OR SWAP1 SWAP3 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH3 0x13F PUSH3 0x37B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH3 0x1A5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616C6C6572206973206E6F74206F776E657200000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x1B5 SWAP2 SWAP1 PUSH3 0x56B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 PUSH1 0x40 MLOAD PUSH3 0x1CE SWAP2 SWAP1 PUSH3 0x5AC JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB DUP2 KECCAK256 SWAP1 PUSH32 0x6D86FA282077CBB7E8DFB1E46D681667447B404489DB833611F44AC272A3D64E SWAP1 PUSH1 0x0 SWAP1 LOG3 DUP1 MLOAD PUSH3 0x213 SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x3B9 JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST PUSH1 0x0 SLOAD DUP2 LT ISZERO PUSH3 0x131 JUMPI PUSH1 0x0 DUP2 DUP2 SLOAD DUP2 LT PUSH3 0x238 JUMPI PUSH3 0x238 PUSH3 0x5E8 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 KECCAK256 ADD SLOAD DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH1 0x1 SWAP2 DUP2 SWAP1 DUP6 SWAP1 DUP2 LT PUSH3 0x269 JUMPI PUSH3 0x269 PUSH3 0x5E8 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP2 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP5 MSTORE SWAP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP3 SWAP1 SWAP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 PUSH3 0x2B5 DUP2 PUSH3 0x5FE JUMP JUMPDEST SWAP2 POP POP PUSH3 0x217 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x9C PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH3 0x555 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH3 0x34D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E74657266616365446574656374696F6E3A2077726F6E672076616C756500 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x19C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH3 0x3A7 PUSH3 0x396 PUSH3 0x6C PUSH1 0x20 SHL PUSH3 0xB69 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x3AC PUSH1 0x20 SHL PUSH3 0x86D OR PUSH1 0x20 SHR JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH3 0x411 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x411 JUMPI DUP3 MLOAD DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND OR DUP3 SSTORE PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH3 0x3DA JUMP JUMPDEST POP PUSH3 0x41F SWAP3 SWAP2 POP PUSH3 0x423 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x41F JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x424 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x468 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x481 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x499 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x4AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH3 0x4C3 JUMPI PUSH3 0x4C3 PUSH3 0x43A JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH1 0x1F NOT PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH3 0x4EB JUMPI PUSH3 0x4EB PUSH3 0x43A JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP9 DUP4 GT ISZERO PUSH3 0x50A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH3 0x533 JUMPI PUSH3 0x523 DUP6 PUSH3 0x450 JUMP JUMPDEST DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP6 ADD SWAP3 PUSH3 0x50F JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0x9C JUMPI PUSH3 0x9C PUSH3 0x53F JUMP JUMPDEST DUP2 MLOAD PUSH1 0x0 SWAP1 DUP3 SWAP1 PUSH1 0x20 DUP1 DUP7 ADD DUP5 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x5A0 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE SWAP4 DUP3 ADD SWAP4 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH3 0x579 JUMP JUMPDEST POP SWAP3 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 SLOAD DUP4 SWAP2 POP DUP5 PUSH1 0x0 MSTORE PUSH1 0x20 DUP1 PUSH1 0x0 KECCAK256 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x5A0 JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE SWAP4 DUP3 ADD SWAP4 PUSH1 0x1 SWAP2 DUP3 ADD SWAP2 ADD PUSH3 0x5C1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH3 0x613 JUMPI PUSH3 0x613 PUSH3 0x53F JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH2 0x1C94 DUP1 PUSH3 0x62A PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xBC JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x89CD7A7B GT PUSH2 0x74 JUMPI DUP1 PUSH4 0xC3666C36 GT PUSH2 0x4E JUMPI DUP1 PUSH4 0xC3666C36 EQ PUSH2 0x1CF JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1EF JUMPI DUP1 PUSH4 0xF7BA94BD EQ PUSH2 0x20F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x89CD7A7B EQ PUSH2 0x153 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x175 JUMPI DUP1 PUSH4 0xADDDC767 EQ PUSH2 0x1AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x55161913 GT PUSH2 0xA5 JUMPI DUP1 PUSH4 0x55161913 EQ PUSH2 0x118 JUMPI DUP1 PUSH4 0x73C8A958 EQ PUSH2 0x120 JUMPI DUP1 PUSH4 0x77D17DB2 EQ PUSH2 0x140 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xC1 JUMPI DUP1 PUSH4 0x27BD8FF1 EQ PUSH2 0xF6 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE1 PUSH2 0xDC CALLDATASIZE PUSH1 0x4 PUSH2 0x16B2 JUMP JUMPDEST PUSH2 0x22F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x102 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x116 PUSH2 0x111 CALLDATASIZE PUSH1 0x4 PUSH2 0x175C JUMP JUMPDEST PUSH2 0x249 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x116 PUSH2 0x429 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x116 PUSH2 0x13B CALLDATASIZE PUSH1 0x4 PUSH2 0x188B JUMP JUMPDEST PUSH2 0x53D JUMP JUMPDEST PUSH2 0x116 PUSH2 0x14E CALLDATASIZE PUSH1 0x4 PUSH2 0x175C JUMP JUMPDEST PUSH2 0x668 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x15F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x168 PUSH2 0x7F1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xED SWAP2 SWAP1 PUSH2 0x1925 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x181 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18A PUSH2 0x860 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xED JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18A PUSH2 0x1CA CALLDATASIZE PUSH1 0x4 PUSH2 0x197F JUMP JUMPDEST PUSH2 0x88C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x116 PUSH2 0x1EA CALLDATASIZE PUSH1 0x4 PUSH2 0x188B JUMP JUMPDEST PUSH2 0x8C3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x116 PUSH2 0x20A CALLDATASIZE PUSH1 0x4 PUSH2 0x1998 JUMP JUMPDEST PUSH2 0xA66 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x21B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x116 PUSH2 0x22A CALLDATASIZE PUSH1 0x4 PUSH2 0x19B5 JUMP JUMPDEST PUSH2 0xA7D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x243 DUP3 PUSH2 0x23D PUSH2 0xC54 JUMP JUMPDEST SWAP1 PUSH2 0xD8E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x251 PUSH2 0x860 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2EA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616C6C6572206973206E6F74206F776E657200000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH2 0x2F8 SWAP2 SWAP1 PUSH2 0x1A21 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 PUSH1 0x40 MLOAD PUSH2 0x30F SWAP2 SWAP1 PUSH2 0x1A6D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB DUP2 KECCAK256 SWAP1 PUSH32 0x6D86FA282077CBB7E8DFB1E46D681667447B404489DB833611F44AC272A3D64E SWAP1 PUSH1 0x0 SWAP1 LOG3 DUP1 MLOAD PUSH2 0x352 SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x1613 JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST PUSH1 0x0 SLOAD DUP2 LT ISZERO PUSH2 0x425 JUMPI PUSH1 0x0 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x373 JUMPI PUSH2 0x373 PUSH2 0x1AB4 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 KECCAK256 ADD SLOAD DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP2 PUSH1 0x1 SWAP2 DUP2 SWAP1 DUP6 SWAP1 DUP2 LT PUSH2 0x3AE JUMPI PUSH2 0x3AE PUSH2 0x1AB4 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP2 SWAP1 SWAP2 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND DUP5 MSTORE SWAP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP3 SWAP1 SWAP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 PUSH2 0x41D DUP2 PUSH2 0x1B12 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x356 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x492 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F206761732070756D70730000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2E1 JUMP JUMPDEST CALLVALUE PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x4A4 SWAP2 SWAP1 PUSH2 0x1B4A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP1 SLOAD PUSH2 0x4B7 SWAP1 CALLVALUE PUSH2 0x1B5D JUMP JUMPDEST SWAP1 POP PUSH2 0x2710 DUP2 GT PUSH2 0x4C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x0 SLOAD DUP2 LT ISZERO PUSH2 0x425 JUMPI DUP2 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x4E6 SWAP2 SWAP1 PUSH2 0x1B98 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x52B PUSH1 0x0 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x503 JUMPI PUSH2 0x503 PUSH2 0x1AB4 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH2 0xE68 JUMP JUMPDEST DUP1 PUSH2 0x535 DUP2 PUSH2 0x1B12 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x4CA JUMP JUMPDEST PUSH2 0x550 CALLER JUMPDEST PUSH2 0x54A PUSH2 0xB69 JUMP JUMPDEST SWAP1 PUSH2 0xF61 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ DUP1 ISZERO PUSH2 0x55F JUMPI POP DUP1 DUP3 EQ JUMPDEST PUSH2 0x5C5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265636F766572793A20696E636F6E73697374656E7420617272617973000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2E1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x65E JUMPI PUSH2 0x656 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x5E4 JUMPI PUSH2 0x5E4 PUSH2 0x1AB4 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x5F9 SWAP2 SWAP1 PUSH2 0x1998 JUMP JUMPDEST DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x60B JUMPI PUSH2 0x60B PUSH2 0x1AB4 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x624 JUMPI PUSH2 0x624 PUSH2 0x1AB4 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x639 SWAP2 SWAP1 PUSH2 0x1998 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 SWAP1 PUSH2 0xFE4 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x5C8 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x6D1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F206761732070756D70730000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2E1 JUMP JUMPDEST CALLVALUE PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x6E3 SWAP2 SWAP1 PUSH2 0x1B4A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP DUP1 MLOAD PUSH1 0x2 SLOAD PUSH1 0x0 SWAP2 PUSH2 0x6F9 SWAP2 PUSH2 0x1B5D JUMP JUMPDEST SWAP1 POP PUSH8 0x16345785D8A0000 DUP2 GT PUSH2 0x792 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420656E6F7567682066756E647320666F7220616C6C2077616C6C657473 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x20746F2062652066696C6C656400000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2E1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x7EC JUMPI DUP2 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x7B0 SWAP2 SWAP1 PUSH2 0x1B98 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x7DA DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x7CC JUMPI PUSH2 0x7CC PUSH2 0x1AB4 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 PUSH2 0xE68 JUMP JUMPDEST DUP1 PUSH2 0x7E4 DUP2 PUSH2 0x1B12 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x795 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x856 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x82B JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x887 PUSH2 0x86D PUSH2 0xB69 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x89C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH2 0x8CC CALLER PUSH2 0x542 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ DUP1 ISZERO PUSH2 0x8DB JUMPI POP DUP1 DUP3 EQ JUMPDEST PUSH2 0x941 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265636F766572793A20696E636F6E73697374656E7420617272617973000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2E1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x65E JUMPI DUP6 DUP6 DUP3 DUP2 DUP2 LT PUSH2 0x95D JUMPI PUSH2 0x95D PUSH2 0x1AB4 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x972 SWAP2 SWAP1 PUSH2 0x1998 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD ADDRESS DUP11 DUP11 DUP6 DUP2 DUP2 LT PUSH2 0x9A0 JUMPI PUSH2 0x9A0 PUSH2 0x1AB4 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x9B5 SWAP2 SWAP1 PUSH2 0x1998 JUMP JUMPDEST DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0x9C7 JUMPI PUSH2 0x9C7 PUSH2 0x1AB4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP9 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP4 AND PUSH1 0x24 DUP6 ADD MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA43 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA57 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x944 JUMP JUMPDEST PUSH2 0xA7A CALLER DUP3 PUSH2 0xA73 PUSH2 0xB69 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1071 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xA86 CALLER PUSH2 0x542 JUMP JUMPDEST DUP3 DUP2 DUP2 EQ PUSH2 0xAF0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265636F766572793A20696E636F6E73697374656E7420617272617973000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2E1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0xB61 JUMPI PUSH2 0xB59 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0xB0F JUMPI PUSH2 0xB0F PUSH2 0x1AB4 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0xB28 JUMPI PUSH2 0xB28 PUSH2 0x1AB4 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xB3D SWAP2 SWAP1 PUSH2 0x1998 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x119E JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xAF3 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x243 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x1B98 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0xC1F JUMPI DUP2 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH2 0x425 PUSH32 0x7F5828D000000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH2 0xC4D PUSH2 0xC54 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xC82 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x243 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x1B98 JUMP JUMPDEST PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xD2A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E74657266616365446574656374696F6E3A2077726F6E672076616C756500 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2E1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xDDE JUMPI POP PUSH1 0x0 PUSH2 0x243 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xE2F JUMPI POP PUSH1 0x1 PUSH2 0x243 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 AND EQ PUSH2 0xF1E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x41646472657373206E6F742070617274206F6620746865204761732053746174 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x696F6E2000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2E1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 DUP3 ISZERO PUSH2 0x8FC MUL SWAP1 DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x7EC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x425 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E6572736869703A206E6F7420746865206F776E65720000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2E1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x7EC SWAP1 DUP5 SWAP1 PUSH2 0x12F8 JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x10F6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E6572736869703A206E6F7420746865206F776E65720000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2E1 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1198 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0x1208 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2E1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1262 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1267 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x7EC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20756E61626C6520746F2073656E642076616C75652C2072 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6563697069656E74206D61792068617665207265766572746564000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2E1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x135A DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1404 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x7EC JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1378 SWAP2 SWAP1 PUSH2 0x1BAB JUMP JUMPDEST PUSH2 0x7EC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2E1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1413 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x141B JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x14AD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2E1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x14D6 SWAP2 SWAP1 PUSH2 0x1BF1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1513 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1518 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1529 DUP8 DUP4 DUP4 DUP8 PUSH2 0x1534 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x15CA JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x15C3 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND EXTCODESIZE PUSH2 0x15C3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2E1 JUMP JUMPDEST POP DUP2 PUSH2 0x1413 JUMP JUMPDEST PUSH2 0x1413 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x15DF JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2E1 SWAP2 SWAP1 PUSH2 0x1C0D JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x168D JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x168D JUMPI DUP3 MLOAD DUP3 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND OR DUP3 SSTORE PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x1633 JUMP JUMPDEST POP PUSH2 0x1699 SWAP3 SWAP2 POP PUSH2 0x169D JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x1699 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x169E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x16F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xA7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x1757 DUP2 PUSH2 0x172A JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x176F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1787 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x179B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x17AD JUMPI PUSH2 0x17AD PUSH2 0x16FB JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0x17F0 JUMPI PUSH2 0x17F0 PUSH2 0x16FB JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP9 DUP4 GT ISZERO PUSH2 0x180E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x1833 JUMPI PUSH2 0x1824 DUP6 PUSH2 0x174C JUMP JUMPDEST DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP6 ADD SWAP3 PUSH2 0x1813 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1851 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1869 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1884 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x18A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x18BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x18C8 DUP11 DUP4 DUP12 ADD PUSH2 0x183F JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x18E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x18ED DUP11 DUP4 DUP12 ADD PUSH2 0x183F JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1906 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1913 DUP10 DUP3 DUP11 ADD PUSH2 0x183F JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1973 JUMPI DUP4 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1941 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1991 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x16F4 DUP2 PUSH2 0x172A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x19CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x19E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19EF DUP9 DUP4 DUP10 ADD PUSH2 0x183F JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1A08 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A15 DUP8 DUP3 DUP9 ADD PUSH2 0x183F JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x0 SWAP1 DUP3 SWAP1 PUSH1 0x20 DUP1 DUP7 ADD DUP5 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1A61 JUMPI DUP2 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 MSTORE SWAP4 DUP3 ADD SWAP4 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1A2F JUMP JUMPDEST POP SWAP3 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 SLOAD DUP4 SWAP2 POP DUP5 PUSH1 0x0 MSTORE PUSH1 0x20 DUP1 PUSH1 0x0 KECCAK256 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1A61 JUMPI DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 MSTORE SWAP4 DUP3 ADD SWAP4 PUSH1 0x1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x1A82 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x1B43 JUMPI PUSH2 0x1B43 PUSH2 0x1AE3 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x243 JUMPI PUSH2 0x243 PUSH2 0x1AE3 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1B93 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x243 JUMPI PUSH2 0x243 PUSH2 0x1AE3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1BBD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x16F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1BE8 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1BD0 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1C03 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1BCD JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1C2C DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1BCD JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEA SIGNEXTEND 0xA6 0xD3 CHAINID TIMESTAMP SWAP15 NUMBER RETURNDATASIZE PUSH14 0x194E7028BCC781574E569EC14AB4 RETURNDATACOPY 0xB7 PUSH18 0x7A6043F61364736F6C634300081100330000 ",
              "sourceMap": "638:2711:19:-:0;;;1355:357;;;;;;;;;;;;;;;;;;:::i;:::-;1420:10;1007:63:0;1057:12;1007:33;:31;;;;;:33;;:::i;:::-;:49;;;;;;:63;;;;:::i;:::-;-1:-1:-1;1603:21:19::1;1615:8:::0;1603:11:::1;:21::i;:::-;-1:-1:-1::0;1649:9:19::1;1635:11;:23:::0;638:2711;;3707:174:3;3748:16;;601:71;671:1;609:58;601:71;:::i;:::-;593:80;3707:174;-1:-1:-1;;3707:174:3:o;1332:341::-;-1:-1:-1;;;;;1420:26:3;;;1416:152;;1462:30;;-1:-1:-1;;;;;;1462:30:3;-1:-1:-1;;;;;1462:30:3;;;;;;;1511:46;;-1:-1:-1;;1511:46:3;;-1:-1:-1;;1511:46:3;1416:152;1577:89;-1:-1:-1;;;1661:4:3;1577:34;:32;;;;;:34;;:::i;:::-;:56;;;;;;:89;;;;;:::i;:::-;1332:341;;:::o;1958:256:19:-;1150:7;:5;:7::i;:::-;-1:-1:-1;;;;;1136:21:19;:10;-1:-1:-1;;;;;1136:21:19;;1128:53;;;;-1:-1:-1;;;1128:53:19;;1953:2:21;1128:53:19;;;1935:21:21;1992:2;1972:18;;;1965:30;2031:21;2011:18;;;2004:49;2070:18;;1128:53:19;;;;;;;;;2066:11:::1;2047:31;;;;;;:::i;:::-;;;;;;;;2059:5;2047:31;;;;;;:::i;:::-;;::::0;;;;::::1;::::0;;;::::1;::::0;;;::::1;2088:19:::0;;::::1;::::0;:5:::1;::::0;:19:::1;::::0;::::1;::::0;::::1;:::i;:::-;;2123:6;2118:90;2137:5;:12:::0;2133:16;::::1;2118:90;;;2189:5;2195:1;2189:8;;;;;;;;:::i;:::-;;::::0;;;::::1;::::0;;::::1;::::0;2177;;-1:-1:-1;;;;;2189:8:19;;::::1;::::0;;;;;2183:1;;2177:8;::::1;;;;;:::i;:::-;;::::0;;;::::1;::::0;;;;;;::::1;::::0;-1:-1:-1;;;;;2177:8:19;;::::1;2170:16:::0;;;;::::1;::::0;;;;;;;;;;:27;;-1:-1:-1;;;;;;2170:27:19::1;::::0;;;::::1;::::0;;;::::1;::::0;;2151:3;::::1;::::0;::::1;:::i;:::-;;;;2118:90;;1613:174:6::0;1654:16;;287:79;365:1;295:66;287:79;:::i;670:246::-;-1:-1:-1;;;;;;;;;782:35:6;;;774:79;;;;-1:-1:-1;;;774:79:6;;3776:2:21;774:79:6;;;3758:21:21;3815:2;3795:18;;;3788:30;3854:33;3834:18;;;3827:61;3905:18;;774:79:6;3574:355:21;774:79:6;-1:-1:-1;;;;;;863:34:6;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;863:46:6;;;;;;;;;;670:246::o;709:129:1:-;764:7;790:41;:33;:31;;;;;:33;;:::i;:::-;:39;;;;;:41;;:::i;:::-;783:48;;709:129;:::o;3256:118:3:-;3352:15;-1:-1:-1;;;;;3352:15:3;;3256:118::o;638:2711:19:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;638:2711:19;-1:-1:-1;;;;;638:2711:19;;;;;;;;;;;-1:-1:-1;638:2711:19;;;;;;;-1:-1:-1;638:2711:19;;;-1:-1:-1;638:2711:19;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:127:21;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:185;233:13;;-1:-1:-1;;;;;275:31:21;;265:42;;255:70;;321:1;318;311:12;255:70;146:185;;;:::o;336:1145::-;439:6;470:2;513;501:9;492:7;488:23;484:32;481:52;;;529:1;526;519:12;481:52;556:16;;-1:-1:-1;;;;;621:14:21;;;618:34;;;648:1;645;638:12;618:34;686:6;675:9;671:22;661:32;;731:7;724:4;720:2;716:13;712:27;702:55;;753:1;750;743:12;702:55;782:2;776:9;804:2;800;797:10;794:36;;;810:18;;:::i;:::-;856:2;853:1;849:10;888:2;882:9;951:2;947:7;942:2;938;934:11;930:25;922:6;918:38;1006:6;994:10;991:22;986:2;974:10;971:18;968:46;965:72;;;1017:18;;:::i;:::-;1053:2;1046:22;1103:18;;;1137:15;;;;-1:-1:-1;1179:11:21;;;1175:20;;;1207:19;;;1204:39;;;1239:1;1236;1229:12;1204:39;1263:11;;;;1283:167;1299:6;1294:3;1291:15;1283:167;;;1365:42;1403:3;1365:42;:::i;:::-;1353:55;;1316:12;;;;1428;;;;1283:167;;;1469:6;336:1145;-1:-1:-1;;;;;;;;336:1145:21:o;1486:127::-;1547:10;1542:3;1538:20;1535:1;1528:31;1578:4;1575:1;1568:15;1602:4;1599:1;1592:15;1618:128;1685:9;;;1706:11;;;1703:37;;;1720:18;;:::i;2099:585::-;2333:13;;2276:3;;2307;;2386:4;2413:15;;;2276:3;2456:201;2470:6;2467:1;2464:13;2456:201;;;2537:13;;-1:-1:-1;;;;;2533:39:21;2519:54;;2595:14;;;;2632:15;;;;2569:1;2485:9;2456:201;;;-1:-1:-1;2673:5:21;;2099:585;-1:-1:-1;;;;;;2099:585:21:o;2689:608::-;2863:3;2894;2926:6;2920:13;2951:3;2942:12;;2973:6;2970:1;2963:17;2999:4;3039:2;3036:1;3026:16;3060:1;3070:200;3084:6;3081:1;3078:13;3070:200;;;3151:13;;-1:-1:-1;;;;;3147:39:21;3133:54;;3209:14;;;;3183:1;3246:14;;;;3099:9;3070:200;;3302:127;3363:10;3358:3;3354:20;3351:1;3344:31;3394:4;3391:1;3384:15;3418:4;3415:1;3408:15;3434:135;3473:3;3494:17;;;3491:43;;3514:18;;:::i;:::-;-1:-1:-1;3561:1:21;3550:13;;3434:135::o;3574:355::-;638:2711:19;;;;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "@_callOptionalReturn_1216": { "entryPoint": 4856, "id": 1216, "parameterSlots": 2, "returnSlots": 0 },
                "@_msgSender_1559": { "entryPoint": null, "id": 1559, "parameterSlots": 0, "returnSlots": 1 },
                "@_revert_1546": { "entryPoint": null, "id": 1546, "parameterSlots": 2, "returnSlots": 0 },
                "@charge_1804": { "entryPoint": 1065, "id": 1804, "parameterSlots": 0, "returnSlots": 0 },
                "@charge_1856": { "entryPoint": 1640, "id": 1856, "parameterSlots": 1, "returnSlots": 0 },
                "@constructorInit_200": { "entryPoint": 2967, "id": 200, "parameterSlots": 2, "returnSlots": 0 },
                "@enforceIsContractOwner_294": { "entryPoint": 3937, "id": 294, "parameterSlots": 2, "returnSlots": 0 },
                "@functionCallWithValue_1371": {
                  "entryPoint": 5147,
                  "id": 1371,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "@functionCall_1307": { "entryPoint": 5124, "id": 1307, "parameterSlots": 3, "returnSlots": 1 },
                "@getGasPumps_1755": { "entryPoint": 2033, "id": 1755, "parameterSlots": 0, "returnSlots": 1 },
                "@isContract_1235": { "entryPoint": null, "id": 1235, "parameterSlots": 1, "returnSlots": 1 },
                "@layout_306": { "entryPoint": 2921, "id": 306, "parameterSlots": 0, "returnSlots": 1 },
                "@layout_448": { "entryPoint": 3156, "id": 448, "parameterSlots": 0, "returnSlots": 1 },
                "@owner_276": { "entryPoint": null, "id": 276, "parameterSlots": 1, "returnSlots": 1 },
                "@owner_63": { "entryPoint": 2144, "id": 63, "parameterSlots": 0, "returnSlots": 1 },
                "@pumps_1640": { "entryPoint": 2188, "id": 1640, "parameterSlots": 0, "returnSlots": 0 },
                "@recoverERC20s_662": { "entryPoint": 1341, "id": 662, "parameterSlots": 6, "returnSlots": 0 },
                "@recoverERC721s_732": { "entryPoint": 2243, "id": 732, "parameterSlots": 6, "returnSlots": 0 },
                "@recoverETH_596": { "entryPoint": 2685, "id": 596, "parameterSlots": 4, "returnSlots": 0 },
                "@safeTransfer_968": { "entryPoint": 4068, "id": 968, "parameterSlots": 3, "returnSlots": 0 },
                "@sendValue_1269": { "entryPoint": 4510, "id": 1269, "parameterSlots": 2, "returnSlots": 0 },
                "@setGasPumps_1746": { "entryPoint": 585, "id": 1746, "parameterSlots": 1, "returnSlots": 0 },
                "@setSupportedInterface_402": { "entryPoint": 3202, "id": 402, "parameterSlots": 3, "returnSlots": 0 },
                "@supportsInterface_337": { "entryPoint": 559, "id": 337, "parameterSlots": 1, "returnSlots": 1 },
                "@supportsInterface_436": { "entryPoint": 3470, "id": 436, "parameterSlots": 2, "returnSlots": 1 },
                "@transferOwnership_263": { "entryPoint": 4209, "id": 263, "parameterSlots": 3, "returnSlots": 0 },
                "@transferOwnership_81": { "entryPoint": 2662, "id": 81, "parameterSlots": 1, "returnSlots": 0 },
                "@verifyCallResultFromTarget_1502": {
                  "entryPoint": 5428,
                  "id": 1502,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "@withdraw_1879": { "entryPoint": 3688, "id": 1879, "parameterSlots": 2, "returnSlots": 0 },
                "abi_decode_address_payable": { "entryPoint": 5964, "id": null, "parameterSlots": 1, "returnSlots": 1 },
                "abi_decode_array_address_dyn_calldata": {
                  "entryPoint": 6207,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_tuple_t_address": { "entryPoint": 6552, "id": null, "parameterSlots": 2, "returnSlots": 1 },
                "abi_decode_tuple_t_address_payable": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$900_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr": {
                  "entryPoint": 6283,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 6
                },
                "abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$819_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 6
                },
                "abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr": {
                  "entryPoint": 6581,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 4
                },
                "abi_decode_tuple_t_array$_t_address_payable_$dyn_memory_ptr": {
                  "entryPoint": 5980,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_bool_fromMemory": {
                  "entryPoint": 7083,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_bytes4": { "entryPoint": 5810, "id": null, "parameterSlots": 2, "returnSlots": 1 },
                "abi_decode_tuple_t_contract$_IERC20_$900": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_contract$_IERC721_$819": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_uint256": { "entryPoint": 6527, "id": null, "parameterSlots": 2, "returnSlots": 1 },
                "abi_encode_tuple_packed_t_array$_t_address_payable_$dyn_memory_ptr__to_t_array$_t_address_payable_$dyn_memory_ptr__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 6689,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_array$_t_address_payable_$dyn_storage__to_t_array$_t_address_payable_$dyn_memory_ptr__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 6765,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 7153,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_address_payable__to_t_address_payable__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_array$_t_address_payable_$dyn_memory_ptr__to_t_array$_t_address_payable_$dyn_memory_ptr__fromStack_reversed": {
                  "entryPoint": 6437,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": 7181,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_12227dcd596297e685bdc66ab01e81b5228df9a6bdd1fe7960df703f31587551__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_2d10247a65709fdb3c0696b0ed760a0c246e12f8c496efb56291dd2fe3b0275d__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_50f9407a4adcdf6ae12e0d869562d9d87ab7a621231d402d6cee2f0011d7245a__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_7e652ff6a488637940a02d29f8449254de8a14c7dab61e902488aa9b3477438f__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_c1abf30d4e27019b56298306476010b3f6ef9e55a9cfe90bcb5f6dc16e369b9d__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "checked_add_t_uint256": { "entryPoint": 6986, "id": null, "parameterSlots": 2, "returnSlots": 1 },
                "checked_div_t_uint256": { "entryPoint": 7005, "id": null, "parameterSlots": 2, "returnSlots": 1 },
                "checked_sub_t_uint256": { "entryPoint": 7064, "id": null, "parameterSlots": 2, "returnSlots": 1 },
                "copy_memory_to_memory_with_cleanup": {
                  "entryPoint": 7117,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "increment_t_uint256": { "entryPoint": 6930, "id": null, "parameterSlots": 1, "returnSlots": 1 },
                "panic_error_0x11": { "entryPoint": 6883, "id": null, "parameterSlots": 0, "returnSlots": 0 },
                "panic_error_0x32": { "entryPoint": 6836, "id": null, "parameterSlots": 0, "returnSlots": 0 },
                "panic_error_0x41": { "entryPoint": 5883, "id": null, "parameterSlots": 0, "returnSlots": 0 },
                "validator_revert_address_payable": {
                  "entryPoint": 5930,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                }
              },
              "generatedSources": [
                {
                  "ast": {
                    "nodeType": "YulBlock",
                    "src": "0:17180:21",
                    "statements": [
                      { "nodeType": "YulBlock", "src": "6:3:21", "statements": [] },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "83:263:21",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "129:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "138:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "141:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "131:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "131:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "131:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "104:7:21" },
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "113:9:21" }
                                    ],
                                    "functionName": { "name": "sub", "nodeType": "YulIdentifier", "src": "100:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "100:23:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "125:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "slt", "nodeType": "YulIdentifier", "src": "96:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "96:32:21"
                              },
                              "nodeType": "YulIf",
                              "src": "93:52:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "154:36:21",
                              "value": {
                                "arguments": [{ "name": "headStart", "nodeType": "YulIdentifier", "src": "180:9:21" }],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "167:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "167:23:21"
                              },
                              "variables": [
                                { "name": "value", "nodeType": "YulTypedName", "src": "158:5:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "300:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "309:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "312:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "302:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "302:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "302:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "value", "nodeType": "YulIdentifier", "src": "212:5:21" },
                                      {
                                        "arguments": [
                                          { "name": "value", "nodeType": "YulIdentifier", "src": "223:5:21" },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "230:66:21",
                                            "type": "",
                                            "value": "0xffffffff00000000000000000000000000000000000000000000000000000000"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "219:3:21"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "219:78:21"
                                      }
                                    ],
                                    "functionName": { "name": "eq", "nodeType": "YulIdentifier", "src": "209:2:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "209:89:21"
                                  }
                                ],
                                "functionName": { "name": "iszero", "nodeType": "YulIdentifier", "src": "202:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "202:97:21"
                              },
                              "nodeType": "YulIf",
                              "src": "199:117:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "325:15:21",
                              "value": { "name": "value", "nodeType": "YulIdentifier", "src": "335:5:21" },
                              "variableNames": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "325:6:21" }]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_bytes4",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "49:9:21", "type": "" },
                          { "name": "dataEnd", "nodeType": "YulTypedName", "src": "60:7:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "value0", "nodeType": "YulTypedName", "src": "72:6:21", "type": "" }
                        ],
                        "src": "14:332:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "446:92:21",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "456:26:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "468:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "479:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "464:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "464:18:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "456:4:21" }]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "498:9:21" },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          { "name": "value0", "nodeType": "YulIdentifier", "src": "523:6:21" }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "516:6:21"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "516:14:21"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "509:6:21"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "509:22:21"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "491:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "491:41:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "491:41:21"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "415:9:21", "type": "" },
                          { "name": "value0", "nodeType": "YulTypedName", "src": "426:6:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "437:4:21", "type": "" }
                        ],
                        "src": "351:187:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "575:152:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "592:1:21",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "595:77:21",
                                    "type": "",
                                    "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "585:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "585:88:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "585:88:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "689:1:21",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "692:4:21",
                                    "type": "",
                                    "value": "0x41"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "682:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "682:15:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "682:15:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "713:1:21",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "716:4:21",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": { "name": "revert", "nodeType": "YulIdentifier", "src": "706:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "706:15:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "706:15:21"
                            }
                          ]
                        },
                        "name": "panic_error_0x41",
                        "nodeType": "YulFunctionDefinition",
                        "src": "543:184:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "785:109:21",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "872:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "881:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "884:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "874:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "874:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "874:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "value", "nodeType": "YulIdentifier", "src": "808:5:21" },
                                      {
                                        "arguments": [
                                          { "name": "value", "nodeType": "YulIdentifier", "src": "819:5:21" },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "826:42:21",
                                            "type": "",
                                            "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "815:3:21"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "815:54:21"
                                      }
                                    ],
                                    "functionName": { "name": "eq", "nodeType": "YulIdentifier", "src": "805:2:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "805:65:21"
                                  }
                                ],
                                "functionName": { "name": "iszero", "nodeType": "YulIdentifier", "src": "798:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "798:73:21"
                              },
                              "nodeType": "YulIf",
                              "src": "795:93:21"
                            }
                          ]
                        },
                        "name": "validator_revert_address_payable",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [{ "name": "value", "nodeType": "YulTypedName", "src": "774:5:21", "type": "" }],
                        "src": "732:162:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "956:93:21",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "966:29:21",
                              "value": {
                                "arguments": [{ "name": "offset", "nodeType": "YulIdentifier", "src": "988:6:21" }],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "975:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "975:20:21"
                              },
                              "variableNames": [{ "name": "value", "nodeType": "YulIdentifier", "src": "966:5:21" }]
                            },
                            {
                              "expression": {
                                "arguments": [{ "name": "value", "nodeType": "YulIdentifier", "src": "1037:5:21" }],
                                "functionName": {
                                  "name": "validator_revert_address_payable",
                                  "nodeType": "YulIdentifier",
                                  "src": "1004:32:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1004:39:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1004:39:21"
                            }
                          ]
                        },
                        "name": "abi_decode_address_payable",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [{ "name": "offset", "nodeType": "YulTypedName", "src": "935:6:21", "type": "" }],
                        "returnVariables": [
                          { "name": "value", "nodeType": "YulTypedName", "src": "946:5:21", "type": "" }
                        ],
                        "src": "899:150:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1157:1093:21",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1167:12:21",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1177:2:21",
                                "type": "",
                                "value": "32"
                              },
                              "variables": [
                                { "name": "_1", "nodeType": "YulTypedName", "src": "1171:2:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1224:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1233:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1236:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "1226:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1226:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1226:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "1199:7:21" },
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "1208:9:21" }
                                    ],
                                    "functionName": { "name": "sub", "nodeType": "YulIdentifier", "src": "1195:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1195:23:21"
                                  },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "1220:2:21" }
                                ],
                                "functionName": { "name": "slt", "nodeType": "YulIdentifier", "src": "1191:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1191:32:21"
                              },
                              "nodeType": "YulIf",
                              "src": "1188:52:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1249:37:21",
                              "value": {
                                "arguments": [{ "name": "headStart", "nodeType": "YulIdentifier", "src": "1276:9:21" }],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "1263:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1263:23:21"
                              },
                              "variables": [
                                { "name": "offset", "nodeType": "YulTypedName", "src": "1253:6:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1295:28:21",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1305:18:21",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              },
                              "variables": [
                                { "name": "_2", "nodeType": "YulTypedName", "src": "1299:2:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1350:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1359:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1362:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "1352:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1352:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1352:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "offset", "nodeType": "YulIdentifier", "src": "1338:6:21" },
                                  { "name": "_2", "nodeType": "YulIdentifier", "src": "1346:2:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "1335:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1335:14:21"
                              },
                              "nodeType": "YulIf",
                              "src": "1332:34:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1375:32:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "1389:9:21" },
                                  { "name": "offset", "nodeType": "YulIdentifier", "src": "1400:6:21" }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "1385:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1385:22:21"
                              },
                              "variables": [
                                { "name": "_3", "nodeType": "YulTypedName", "src": "1379:2:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1455:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1464:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1467:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "1457:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1457:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1457:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          { "name": "_3", "nodeType": "YulIdentifier", "src": "1434:2:21" },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1438:4:21",
                                            "type": "",
                                            "value": "0x1f"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "1430:3:21"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1430:13:21"
                                      },
                                      { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "1445:7:21" }
                                    ],
                                    "functionName": { "name": "slt", "nodeType": "YulIdentifier", "src": "1426:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1426:27:21"
                                  }
                                ],
                                "functionName": { "name": "iszero", "nodeType": "YulIdentifier", "src": "1419:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1419:35:21"
                              },
                              "nodeType": "YulIf",
                              "src": "1416:55:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1480:26:21",
                              "value": {
                                "arguments": [{ "name": "_3", "nodeType": "YulIdentifier", "src": "1503:2:21" }],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "1490:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1490:16:21"
                              },
                              "variables": [
                                { "name": "_4", "nodeType": "YulTypedName", "src": "1484:2:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1529:22:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x41",
                                        "nodeType": "YulIdentifier",
                                        "src": "1531:16:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1531:18:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1531:18:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "_4", "nodeType": "YulIdentifier", "src": "1521:2:21" },
                                  { "name": "_2", "nodeType": "YulIdentifier", "src": "1525:2:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "1518:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1518:10:21"
                              },
                              "nodeType": "YulIf",
                              "src": "1515:36:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1560:20:21",
                              "value": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1574:1:21",
                                    "type": "",
                                    "value": "5"
                                  },
                                  { "name": "_4", "nodeType": "YulIdentifier", "src": "1577:2:21" }
                                ],
                                "functionName": { "name": "shl", "nodeType": "YulIdentifier", "src": "1570:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1570:10:21"
                              },
                              "variables": [
                                { "name": "_5", "nodeType": "YulTypedName", "src": "1564:2:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1589:23:21",
                              "value": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1609:2:21",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": { "name": "mload", "nodeType": "YulIdentifier", "src": "1603:5:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1603:9:21"
                              },
                              "variables": [
                                { "name": "memPtr", "nodeType": "YulTypedName", "src": "1593:6:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1621:115:21",
                              "value": {
                                "arguments": [
                                  { "name": "memPtr", "nodeType": "YulIdentifier", "src": "1643:6:21" },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          { "name": "_5", "nodeType": "YulIdentifier", "src": "1659:2:21" },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1663:2:21",
                                            "type": "",
                                            "value": "63"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "1655:3:21"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1655:11:21"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1668:66:21",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"
                                      }
                                    ],
                                    "functionName": { "name": "and", "nodeType": "YulIdentifier", "src": "1651:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1651:84:21"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "1639:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1639:97:21"
                              },
                              "variables": [
                                { "name": "newFreePtr", "nodeType": "YulTypedName", "src": "1625:10:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1795:22:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x41",
                                        "nodeType": "YulIdentifier",
                                        "src": "1797:16:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1797:18:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1797:18:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "newFreePtr", "nodeType": "YulIdentifier", "src": "1754:10:21" },
                                      { "name": "_2", "nodeType": "YulIdentifier", "src": "1766:2:21" }
                                    ],
                                    "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "1751:2:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1751:18:21"
                                  },
                                  {
                                    "arguments": [
                                      { "name": "newFreePtr", "nodeType": "YulIdentifier", "src": "1774:10:21" },
                                      { "name": "memPtr", "nodeType": "YulIdentifier", "src": "1786:6:21" }
                                    ],
                                    "functionName": { "name": "lt", "nodeType": "YulIdentifier", "src": "1771:2:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1771:22:21"
                                  }
                                ],
                                "functionName": { "name": "or", "nodeType": "YulIdentifier", "src": "1748:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1748:46:21"
                              },
                              "nodeType": "YulIf",
                              "src": "1745:72:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1833:2:21",
                                    "type": "",
                                    "value": "64"
                                  },
                                  { "name": "newFreePtr", "nodeType": "YulIdentifier", "src": "1837:10:21" }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "1826:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1826:22:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1826:22:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1857:17:21",
                              "value": { "name": "memPtr", "nodeType": "YulIdentifier", "src": "1868:6:21" },
                              "variables": [
                                { "name": "dst", "nodeType": "YulTypedName", "src": "1861:3:21", "type": "" }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "memPtr", "nodeType": "YulIdentifier", "src": "1890:6:21" },
                                  { "name": "_4", "nodeType": "YulIdentifier", "src": "1898:2:21" }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "1883:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1883:18:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1883:18:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1910:22:21",
                              "value": {
                                "arguments": [
                                  { "name": "memPtr", "nodeType": "YulIdentifier", "src": "1921:6:21" },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "1929:2:21" }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "1917:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1917:15:21"
                              },
                              "variableNames": [{ "name": "dst", "nodeType": "YulIdentifier", "src": "1910:3:21" }]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1941:34:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "_3", "nodeType": "YulIdentifier", "src": "1963:2:21" },
                                      { "name": "_5", "nodeType": "YulIdentifier", "src": "1967:2:21" }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "1959:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1959:11:21"
                                  },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "1972:2:21" }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "1955:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1955:20:21"
                              },
                              "variables": [
                                { "name": "srcEnd", "nodeType": "YulTypedName", "src": "1945:6:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2007:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2016:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2019:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "2009:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2009:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2009:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "srcEnd", "nodeType": "YulIdentifier", "src": "1990:6:21" },
                                  { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "1998:7:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "1987:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1987:19:21"
                              },
                              "nodeType": "YulIf",
                              "src": "1984:39:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2032:22:21",
                              "value": {
                                "arguments": [
                                  { "name": "_3", "nodeType": "YulIdentifier", "src": "2047:2:21" },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "2051:2:21" }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "2043:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "2043:11:21"
                              },
                              "variables": [
                                { "name": "src", "nodeType": "YulTypedName", "src": "2036:3:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2119:100:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        { "name": "dst", "nodeType": "YulIdentifier", "src": "2140:3:21" },
                                        {
                                          "arguments": [
                                            { "name": "src", "nodeType": "YulIdentifier", "src": "2172:3:21" }
                                          ],
                                          "functionName": {
                                            "name": "abi_decode_address_payable",
                                            "nodeType": "YulIdentifier",
                                            "src": "2145:26:21"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "2145:31:21"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "2133:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2133:44:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2133:44:21"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "2190:19:21",
                                    "value": {
                                      "arguments": [
                                        { "name": "dst", "nodeType": "YulIdentifier", "src": "2201:3:21" },
                                        { "name": "_1", "nodeType": "YulIdentifier", "src": "2206:2:21" }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "2197:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2197:12:21"
                                    },
                                    "variableNames": [
                                      { "name": "dst", "nodeType": "YulIdentifier", "src": "2190:3:21" }
                                    ]
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "src", "nodeType": "YulIdentifier", "src": "2074:3:21" },
                                  { "name": "srcEnd", "nodeType": "YulIdentifier", "src": "2079:6:21" }
                                ],
                                "functionName": { "name": "lt", "nodeType": "YulIdentifier", "src": "2071:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "2071:15:21"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "2087:23:21",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "2089:19:21",
                                    "value": {
                                      "arguments": [
                                        { "name": "src", "nodeType": "YulIdentifier", "src": "2100:3:21" },
                                        { "name": "_1", "nodeType": "YulIdentifier", "src": "2105:2:21" }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "2096:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2096:12:21"
                                    },
                                    "variableNames": [
                                      { "name": "src", "nodeType": "YulIdentifier", "src": "2089:3:21" }
                                    ]
                                  }
                                ]
                              },
                              "pre": { "nodeType": "YulBlock", "src": "2067:3:21", "statements": [] },
                              "src": "2063:156:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2228:16:21",
                              "value": { "name": "memPtr", "nodeType": "YulIdentifier", "src": "2238:6:21" },
                              "variableNames": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "2228:6:21" }]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_array$_t_address_payable_$dyn_memory_ptr",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "1123:9:21", "type": "" },
                          { "name": "dataEnd", "nodeType": "YulTypedName", "src": "1134:7:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "value0", "nodeType": "YulTypedName", "src": "1146:6:21", "type": "" }
                        ],
                        "src": "1054:1196:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "2339:283:21",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2388:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2397:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2400:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "2390:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2390:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2390:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          { "name": "offset", "nodeType": "YulIdentifier", "src": "2367:6:21" },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2375:4:21",
                                            "type": "",
                                            "value": "0x1f"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "2363:3:21"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2363:17:21"
                                      },
                                      { "name": "end", "nodeType": "YulIdentifier", "src": "2382:3:21" }
                                    ],
                                    "functionName": { "name": "slt", "nodeType": "YulIdentifier", "src": "2359:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2359:27:21"
                                  }
                                ],
                                "functionName": { "name": "iszero", "nodeType": "YulIdentifier", "src": "2352:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "2352:35:21"
                              },
                              "nodeType": "YulIf",
                              "src": "2349:55:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2413:30:21",
                              "value": {
                                "arguments": [{ "name": "offset", "nodeType": "YulIdentifier", "src": "2436:6:21" }],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "2423:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2423:20:21"
                              },
                              "variableNames": [{ "name": "length", "nodeType": "YulIdentifier", "src": "2413:6:21" }]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2486:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2495:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2498:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "2488:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2488:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2488:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "length", "nodeType": "YulIdentifier", "src": "2458:6:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2466:18:21",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "2455:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "2455:30:21"
                              },
                              "nodeType": "YulIf",
                              "src": "2452:50:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2511:29:21",
                              "value": {
                                "arguments": [
                                  { "name": "offset", "nodeType": "YulIdentifier", "src": "2527:6:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2535:4:21",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "2523:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "2523:17:21"
                              },
                              "variableNames": [{ "name": "arrayPos", "nodeType": "YulIdentifier", "src": "2511:8:21" }]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2600:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2609:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2612:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "2602:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2602:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2602:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          { "name": "offset", "nodeType": "YulIdentifier", "src": "2563:6:21" },
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "2575:1:21",
                                                "type": "",
                                                "value": "5"
                                              },
                                              { "name": "length", "nodeType": "YulIdentifier", "src": "2578:6:21" }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "2571:3:21"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2571:14:21"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "2559:3:21"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2559:27:21"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2588:4:21",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "2555:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2555:38:21"
                                  },
                                  { "name": "end", "nodeType": "YulIdentifier", "src": "2595:3:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "2552:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "2552:47:21"
                              },
                              "nodeType": "YulIf",
                              "src": "2549:67:21"
                            }
                          ]
                        },
                        "name": "abi_decode_array_address_dyn_calldata",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "offset", "nodeType": "YulTypedName", "src": "2302:6:21", "type": "" },
                          { "name": "end", "nodeType": "YulTypedName", "src": "2310:3:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "arrayPos", "nodeType": "YulTypedName", "src": "2318:8:21", "type": "" },
                          { "name": "length", "nodeType": "YulTypedName", "src": "2328:6:21", "type": "" }
                        ],
                        "src": "2255:367:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "2850:879:21",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2896:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2905:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2908:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "2898:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2898:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2898:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "2871:7:21" },
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "2880:9:21" }
                                    ],
                                    "functionName": { "name": "sub", "nodeType": "YulIdentifier", "src": "2867:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2867:23:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2892:2:21",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": { "name": "slt", "nodeType": "YulIdentifier", "src": "2863:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "2863:32:21"
                              },
                              "nodeType": "YulIf",
                              "src": "2860:52:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2921:37:21",
                              "value": {
                                "arguments": [{ "name": "headStart", "nodeType": "YulIdentifier", "src": "2948:9:21" }],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "2935:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2935:23:21"
                              },
                              "variables": [
                                { "name": "offset", "nodeType": "YulTypedName", "src": "2925:6:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2967:28:21",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2977:18:21",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              },
                              "variables": [
                                { "name": "_1", "nodeType": "YulTypedName", "src": "2971:2:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "3022:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3031:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3034:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "3024:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3024:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3024:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "offset", "nodeType": "YulIdentifier", "src": "3010:6:21" },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "3018:2:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "3007:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "3007:14:21"
                              },
                              "nodeType": "YulIf",
                              "src": "3004:34:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3047:96:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "3115:9:21" },
                                      { "name": "offset", "nodeType": "YulIdentifier", "src": "3126:6:21" }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "3111:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3111:22:21"
                                  },
                                  { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "3135:7:21" }
                                ],
                                "functionName": {
                                  "name": "abi_decode_array_address_dyn_calldata",
                                  "nodeType": "YulIdentifier",
                                  "src": "3073:37:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3073:70:21"
                              },
                              "variables": [
                                { "name": "value0_1", "nodeType": "YulTypedName", "src": "3051:8:21", "type": "" },
                                { "name": "value1_1", "nodeType": "YulTypedName", "src": "3061:8:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "3152:18:21",
                              "value": { "name": "value0_1", "nodeType": "YulIdentifier", "src": "3162:8:21" },
                              "variableNames": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "3152:6:21" }]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "3179:18:21",
                              "value": { "name": "value1_1", "nodeType": "YulIdentifier", "src": "3189:8:21" },
                              "variableNames": [{ "name": "value1", "nodeType": "YulIdentifier", "src": "3179:6:21" }]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3206:48:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "3239:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3250:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "3235:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3235:18:21"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "3222:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3222:32:21"
                              },
                              "variables": [
                                { "name": "offset_1", "nodeType": "YulTypedName", "src": "3210:8:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "3283:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3292:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3295:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "3285:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3285:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3285:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "offset_1", "nodeType": "YulIdentifier", "src": "3269:8:21" },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "3279:2:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "3266:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "3266:16:21"
                              },
                              "nodeType": "YulIf",
                              "src": "3263:36:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3308:98:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "3376:9:21" },
                                      { "name": "offset_1", "nodeType": "YulIdentifier", "src": "3387:8:21" }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "3372:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3372:24:21"
                                  },
                                  { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "3398:7:21" }
                                ],
                                "functionName": {
                                  "name": "abi_decode_array_address_dyn_calldata",
                                  "nodeType": "YulIdentifier",
                                  "src": "3334:37:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3334:72:21"
                              },
                              "variables": [
                                { "name": "value2_1", "nodeType": "YulTypedName", "src": "3312:8:21", "type": "" },
                                { "name": "value3_1", "nodeType": "YulTypedName", "src": "3322:8:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "3415:18:21",
                              "value": { "name": "value2_1", "nodeType": "YulIdentifier", "src": "3425:8:21" },
                              "variableNames": [{ "name": "value2", "nodeType": "YulIdentifier", "src": "3415:6:21" }]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "3442:18:21",
                              "value": { "name": "value3_1", "nodeType": "YulIdentifier", "src": "3452:8:21" },
                              "variableNames": [{ "name": "value3", "nodeType": "YulIdentifier", "src": "3442:6:21" }]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3469:48:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "3502:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3513:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "3498:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3498:18:21"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "3485:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3485:32:21"
                              },
                              "variables": [
                                { "name": "offset_2", "nodeType": "YulTypedName", "src": "3473:8:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "3546:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3555:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3558:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "3548:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3548:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3548:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "offset_2", "nodeType": "YulIdentifier", "src": "3532:8:21" },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "3542:2:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "3529:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "3529:16:21"
                              },
                              "nodeType": "YulIf",
                              "src": "3526:36:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3571:98:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "3639:9:21" },
                                      { "name": "offset_2", "nodeType": "YulIdentifier", "src": "3650:8:21" }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "3635:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3635:24:21"
                                  },
                                  { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "3661:7:21" }
                                ],
                                "functionName": {
                                  "name": "abi_decode_array_address_dyn_calldata",
                                  "nodeType": "YulIdentifier",
                                  "src": "3597:37:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3597:72:21"
                              },
                              "variables": [
                                { "name": "value4_1", "nodeType": "YulTypedName", "src": "3575:8:21", "type": "" },
                                { "name": "value5_1", "nodeType": "YulTypedName", "src": "3585:8:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "3678:18:21",
                              "value": { "name": "value4_1", "nodeType": "YulIdentifier", "src": "3688:8:21" },
                              "variableNames": [{ "name": "value4", "nodeType": "YulIdentifier", "src": "3678:6:21" }]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "3705:18:21",
                              "value": { "name": "value5_1", "nodeType": "YulIdentifier", "src": "3715:8:21" },
                              "variableNames": [{ "name": "value5", "nodeType": "YulIdentifier", "src": "3705:6:21" }]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$900_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "2776:9:21", "type": "" },
                          { "name": "dataEnd", "nodeType": "YulTypedName", "src": "2787:7:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "value0", "nodeType": "YulTypedName", "src": "2799:6:21", "type": "" },
                          { "name": "value1", "nodeType": "YulTypedName", "src": "2807:6:21", "type": "" },
                          { "name": "value2", "nodeType": "YulTypedName", "src": "2815:6:21", "type": "" },
                          { "name": "value3", "nodeType": "YulTypedName", "src": "2823:6:21", "type": "" },
                          { "name": "value4", "nodeType": "YulTypedName", "src": "2831:6:21", "type": "" },
                          { "name": "value5", "nodeType": "YulTypedName", "src": "2839:6:21", "type": "" }
                        ],
                        "src": "2627:1102:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "3901:530:21",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3911:12:21",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3921:2:21",
                                "type": "",
                                "value": "32"
                              },
                              "variables": [
                                { "name": "_1", "nodeType": "YulTypedName", "src": "3915:2:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3932:32:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "3950:9:21" },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "3961:2:21" }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "3946:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "3946:18:21"
                              },
                              "variables": [
                                { "name": "tail_1", "nodeType": "YulTypedName", "src": "3936:6:21", "type": "" }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "3980:9:21" },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "3991:2:21" }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "3973:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "3973:21:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3973:21:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4003:17:21",
                              "value": { "name": "tail_1", "nodeType": "YulIdentifier", "src": "4014:6:21" },
                              "variables": [
                                { "name": "pos", "nodeType": "YulTypedName", "src": "4007:3:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4029:27:21",
                              "value": {
                                "arguments": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "4049:6:21" }],
                                "functionName": { "name": "mload", "nodeType": "YulIdentifier", "src": "4043:5:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "4043:13:21"
                              },
                              "variables": [
                                { "name": "length", "nodeType": "YulTypedName", "src": "4033:6:21", "type": "" }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "tail_1", "nodeType": "YulIdentifier", "src": "4072:6:21" },
                                  { "name": "length", "nodeType": "YulIdentifier", "src": "4080:6:21" }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "4065:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "4065:22:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4065:22:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "4096:25:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "4107:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4118:2:21",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "4103:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "4103:18:21"
                              },
                              "variableNames": [{ "name": "pos", "nodeType": "YulIdentifier", "src": "4096:3:21" }]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4130:29:21",
                              "value": {
                                "arguments": [
                                  { "name": "value0", "nodeType": "YulIdentifier", "src": "4148:6:21" },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "4156:2:21" }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "4144:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "4144:15:21"
                              },
                              "variables": [
                                { "name": "srcPtr", "nodeType": "YulTypedName", "src": "4134:6:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4168:10:21",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4177:1:21",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [{ "name": "i", "nodeType": "YulTypedName", "src": "4172:1:21", "type": "" }]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "4236:169:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        { "name": "pos", "nodeType": "YulIdentifier", "src": "4257:3:21" },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                { "name": "srcPtr", "nodeType": "YulIdentifier", "src": "4272:6:21" }
                                              ],
                                              "functionName": {
                                                "name": "mload",
                                                "nodeType": "YulIdentifier",
                                                "src": "4266:5:21"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "4266:13:21"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "4281:42:21",
                                              "type": "",
                                              "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "and",
                                            "nodeType": "YulIdentifier",
                                            "src": "4262:3:21"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "4262:62:21"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "4250:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4250:75:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "4250:75:21"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "4338:19:21",
                                    "value": {
                                      "arguments": [
                                        { "name": "pos", "nodeType": "YulIdentifier", "src": "4349:3:21" },
                                        { "name": "_1", "nodeType": "YulIdentifier", "src": "4354:2:21" }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "4345:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4345:12:21"
                                    },
                                    "variableNames": [
                                      { "name": "pos", "nodeType": "YulIdentifier", "src": "4338:3:21" }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "4370:25:21",
                                    "value": {
                                      "arguments": [
                                        { "name": "srcPtr", "nodeType": "YulIdentifier", "src": "4384:6:21" },
                                        { "name": "_1", "nodeType": "YulIdentifier", "src": "4392:2:21" }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "4380:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4380:15:21"
                                    },
                                    "variableNames": [
                                      { "name": "srcPtr", "nodeType": "YulIdentifier", "src": "4370:6:21" }
                                    ]
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "i", "nodeType": "YulIdentifier", "src": "4198:1:21" },
                                  { "name": "length", "nodeType": "YulIdentifier", "src": "4201:6:21" }
                                ],
                                "functionName": { "name": "lt", "nodeType": "YulIdentifier", "src": "4195:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "4195:13:21"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "4209:18:21",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "4211:14:21",
                                    "value": {
                                      "arguments": [
                                        { "name": "i", "nodeType": "YulIdentifier", "src": "4220:1:21" },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "4223:1:21",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "4216:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4216:9:21"
                                    },
                                    "variableNames": [{ "name": "i", "nodeType": "YulIdentifier", "src": "4211:1:21" }]
                                  }
                                ]
                              },
                              "pre": { "nodeType": "YulBlock", "src": "4191:3:21", "statements": [] },
                              "src": "4187:218:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "4414:11:21",
                              "value": { "name": "pos", "nodeType": "YulIdentifier", "src": "4422:3:21" },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "4414:4:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_array$_t_address_payable_$dyn_memory_ptr__to_t_array$_t_address_payable_$dyn_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "3870:9:21", "type": "" },
                          { "name": "value0", "nodeType": "YulTypedName", "src": "3881:6:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "3892:4:21", "type": "" }
                        ],
                        "src": "3734:697:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "4537:125:21",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "4547:26:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "4559:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4570:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "4555:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "4555:18:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "4547:4:21" }]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "4589:9:21" },
                                  {
                                    "arguments": [
                                      { "name": "value0", "nodeType": "YulIdentifier", "src": "4604:6:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4612:42:21",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": { "name": "and", "nodeType": "YulIdentifier", "src": "4600:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4600:55:21"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "4582:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "4582:74:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4582:74:21"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "4506:9:21", "type": "" },
                          { "name": "value0", "nodeType": "YulTypedName", "src": "4517:6:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "4528:4:21", "type": "" }
                        ],
                        "src": "4436:226:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "4737:110:21",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "4783:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "4792:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "4795:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "4785:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4785:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "4785:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "4758:7:21" },
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "4767:9:21" }
                                    ],
                                    "functionName": { "name": "sub", "nodeType": "YulIdentifier", "src": "4754:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4754:23:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4779:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "slt", "nodeType": "YulIdentifier", "src": "4750:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "4750:32:21"
                              },
                              "nodeType": "YulIf",
                              "src": "4747:52:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "4808:33:21",
                              "value": {
                                "arguments": [{ "name": "headStart", "nodeType": "YulIdentifier", "src": "4831:9:21" }],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "4818:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4818:23:21"
                              },
                              "variableNames": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "4808:6:21" }]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "4703:9:21", "type": "" },
                          { "name": "dataEnd", "nodeType": "YulTypedName", "src": "4714:7:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "value0", "nodeType": "YulTypedName", "src": "4726:6:21", "type": "" }
                        ],
                        "src": "4667:180:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "4969:125:21",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "4979:26:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "4991:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5002:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "4987:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "4987:18:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "4979:4:21" }]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "5021:9:21" },
                                  {
                                    "arguments": [
                                      { "name": "value0", "nodeType": "YulIdentifier", "src": "5036:6:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5044:42:21",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": { "name": "and", "nodeType": "YulIdentifier", "src": "5032:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5032:55:21"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "5014:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "5014:74:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "5014:74:21"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_address_payable__to_t_address_payable__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "4938:9:21", "type": "" },
                          { "name": "value0", "nodeType": "YulTypedName", "src": "4949:6:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "4960:4:21", "type": "" }
                        ],
                        "src": "4852:242:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "5323:879:21",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "5369:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "5378:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "5381:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "5371:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5371:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "5371:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "5344:7:21" },
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "5353:9:21" }
                                    ],
                                    "functionName": { "name": "sub", "nodeType": "YulIdentifier", "src": "5340:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5340:23:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5365:2:21",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": { "name": "slt", "nodeType": "YulIdentifier", "src": "5336:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "5336:32:21"
                              },
                              "nodeType": "YulIf",
                              "src": "5333:52:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "5394:37:21",
                              "value": {
                                "arguments": [{ "name": "headStart", "nodeType": "YulIdentifier", "src": "5421:9:21" }],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "5408:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5408:23:21"
                              },
                              "variables": [
                                { "name": "offset", "nodeType": "YulTypedName", "src": "5398:6:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "5440:28:21",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5450:18:21",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              },
                              "variables": [
                                { "name": "_1", "nodeType": "YulTypedName", "src": "5444:2:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "5495:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "5504:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "5507:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "5497:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5497:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "5497:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "offset", "nodeType": "YulIdentifier", "src": "5483:6:21" },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "5491:2:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "5480:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "5480:14:21"
                              },
                              "nodeType": "YulIf",
                              "src": "5477:34:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "5520:96:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "5588:9:21" },
                                      { "name": "offset", "nodeType": "YulIdentifier", "src": "5599:6:21" }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "5584:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5584:22:21"
                                  },
                                  { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "5608:7:21" }
                                ],
                                "functionName": {
                                  "name": "abi_decode_array_address_dyn_calldata",
                                  "nodeType": "YulIdentifier",
                                  "src": "5546:37:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5546:70:21"
                              },
                              "variables": [
                                { "name": "value0_1", "nodeType": "YulTypedName", "src": "5524:8:21", "type": "" },
                                { "name": "value1_1", "nodeType": "YulTypedName", "src": "5534:8:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "5625:18:21",
                              "value": { "name": "value0_1", "nodeType": "YulIdentifier", "src": "5635:8:21" },
                              "variableNames": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "5625:6:21" }]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "5652:18:21",
                              "value": { "name": "value1_1", "nodeType": "YulIdentifier", "src": "5662:8:21" },
                              "variableNames": [{ "name": "value1", "nodeType": "YulIdentifier", "src": "5652:6:21" }]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "5679:48:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "5712:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5723:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "5708:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5708:18:21"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "5695:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5695:32:21"
                              },
                              "variables": [
                                { "name": "offset_1", "nodeType": "YulTypedName", "src": "5683:8:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "5756:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "5765:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "5768:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "5758:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5758:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "5758:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "offset_1", "nodeType": "YulIdentifier", "src": "5742:8:21" },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "5752:2:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "5739:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "5739:16:21"
                              },
                              "nodeType": "YulIf",
                              "src": "5736:36:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "5781:98:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "5849:9:21" },
                                      { "name": "offset_1", "nodeType": "YulIdentifier", "src": "5860:8:21" }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "5845:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5845:24:21"
                                  },
                                  { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "5871:7:21" }
                                ],
                                "functionName": {
                                  "name": "abi_decode_array_address_dyn_calldata",
                                  "nodeType": "YulIdentifier",
                                  "src": "5807:37:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5807:72:21"
                              },
                              "variables": [
                                { "name": "value2_1", "nodeType": "YulTypedName", "src": "5785:8:21", "type": "" },
                                { "name": "value3_1", "nodeType": "YulTypedName", "src": "5795:8:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "5888:18:21",
                              "value": { "name": "value2_1", "nodeType": "YulIdentifier", "src": "5898:8:21" },
                              "variableNames": [{ "name": "value2", "nodeType": "YulIdentifier", "src": "5888:6:21" }]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "5915:18:21",
                              "value": { "name": "value3_1", "nodeType": "YulIdentifier", "src": "5925:8:21" },
                              "variableNames": [{ "name": "value3", "nodeType": "YulIdentifier", "src": "5915:6:21" }]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "5942:48:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "5975:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5986:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "5971:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5971:18:21"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "5958:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5958:32:21"
                              },
                              "variables": [
                                { "name": "offset_2", "nodeType": "YulTypedName", "src": "5946:8:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "6019:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "6028:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "6031:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "6021:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "6021:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "6021:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "offset_2", "nodeType": "YulIdentifier", "src": "6005:8:21" },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "6015:2:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "6002:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "6002:16:21"
                              },
                              "nodeType": "YulIf",
                              "src": "5999:36:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "6044:98:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "6112:9:21" },
                                      { "name": "offset_2", "nodeType": "YulIdentifier", "src": "6123:8:21" }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "6108:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6108:24:21"
                                  },
                                  { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "6134:7:21" }
                                ],
                                "functionName": {
                                  "name": "abi_decode_array_address_dyn_calldata",
                                  "nodeType": "YulIdentifier",
                                  "src": "6070:37:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6070:72:21"
                              },
                              "variables": [
                                { "name": "value4_1", "nodeType": "YulTypedName", "src": "6048:8:21", "type": "" },
                                { "name": "value5_1", "nodeType": "YulTypedName", "src": "6058:8:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "6151:18:21",
                              "value": { "name": "value4_1", "nodeType": "YulIdentifier", "src": "6161:8:21" },
                              "variableNames": [{ "name": "value4", "nodeType": "YulIdentifier", "src": "6151:6:21" }]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "6178:18:21",
                              "value": { "name": "value5_1", "nodeType": "YulIdentifier", "src": "6188:8:21" },
                              "variableNames": [{ "name": "value5", "nodeType": "YulIdentifier", "src": "6178:6:21" }]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$819_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "5249:9:21", "type": "" },
                          { "name": "dataEnd", "nodeType": "YulTypedName", "src": "5260:7:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "value0", "nodeType": "YulTypedName", "src": "5272:6:21", "type": "" },
                          { "name": "value1", "nodeType": "YulTypedName", "src": "5280:6:21", "type": "" },
                          { "name": "value2", "nodeType": "YulTypedName", "src": "5288:6:21", "type": "" },
                          { "name": "value3", "nodeType": "YulTypedName", "src": "5296:6:21", "type": "" },
                          { "name": "value4", "nodeType": "YulTypedName", "src": "5304:6:21", "type": "" },
                          { "name": "value5", "nodeType": "YulTypedName", "src": "5312:6:21", "type": "" }
                        ],
                        "src": "5099:1103:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "6277:185:21",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "6323:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "6332:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "6335:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "6325:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "6325:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "6325:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "6298:7:21" },
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "6307:9:21" }
                                    ],
                                    "functionName": { "name": "sub", "nodeType": "YulIdentifier", "src": "6294:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6294:23:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6319:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "slt", "nodeType": "YulIdentifier", "src": "6290:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "6290:32:21"
                              },
                              "nodeType": "YulIf",
                              "src": "6287:52:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "6348:36:21",
                              "value": {
                                "arguments": [{ "name": "headStart", "nodeType": "YulIdentifier", "src": "6374:9:21" }],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "6361:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6361:23:21"
                              },
                              "variables": [
                                { "name": "value", "nodeType": "YulTypedName", "src": "6352:5:21", "type": "" }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [{ "name": "value", "nodeType": "YulIdentifier", "src": "6426:5:21" }],
                                "functionName": {
                                  "name": "validator_revert_address_payable",
                                  "nodeType": "YulIdentifier",
                                  "src": "6393:32:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6393:39:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6393:39:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "6441:15:21",
                              "value": { "name": "value", "nodeType": "YulIdentifier", "src": "6451:5:21" },
                              "variableNames": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "6441:6:21" }]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_address",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "6243:9:21", "type": "" },
                          { "name": "dataEnd", "nodeType": "YulTypedName", "src": "6254:7:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "value0", "nodeType": "YulTypedName", "src": "6266:6:21", "type": "" }
                        ],
                        "src": "6207:255:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "6632:616:21",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "6678:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "6687:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "6690:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "6680:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "6680:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "6680:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "6653:7:21" },
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "6662:9:21" }
                                    ],
                                    "functionName": { "name": "sub", "nodeType": "YulIdentifier", "src": "6649:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6649:23:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6674:2:21",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": { "name": "slt", "nodeType": "YulIdentifier", "src": "6645:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "6645:32:21"
                              },
                              "nodeType": "YulIf",
                              "src": "6642:52:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "6703:37:21",
                              "value": {
                                "arguments": [{ "name": "headStart", "nodeType": "YulIdentifier", "src": "6730:9:21" }],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "6717:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6717:23:21"
                              },
                              "variables": [
                                { "name": "offset", "nodeType": "YulTypedName", "src": "6707:6:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "6749:28:21",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6759:18:21",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              },
                              "variables": [
                                { "name": "_1", "nodeType": "YulTypedName", "src": "6753:2:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "6804:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "6813:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "6816:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "6806:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "6806:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "6806:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "offset", "nodeType": "YulIdentifier", "src": "6792:6:21" },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "6800:2:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "6789:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "6789:14:21"
                              },
                              "nodeType": "YulIf",
                              "src": "6786:34:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "6829:96:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "6897:9:21" },
                                      { "name": "offset", "nodeType": "YulIdentifier", "src": "6908:6:21" }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "6893:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6893:22:21"
                                  },
                                  { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "6917:7:21" }
                                ],
                                "functionName": {
                                  "name": "abi_decode_array_address_dyn_calldata",
                                  "nodeType": "YulIdentifier",
                                  "src": "6855:37:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6855:70:21"
                              },
                              "variables": [
                                { "name": "value0_1", "nodeType": "YulTypedName", "src": "6833:8:21", "type": "" },
                                { "name": "value1_1", "nodeType": "YulTypedName", "src": "6843:8:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "6934:18:21",
                              "value": { "name": "value0_1", "nodeType": "YulIdentifier", "src": "6944:8:21" },
                              "variableNames": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "6934:6:21" }]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "6961:18:21",
                              "value": { "name": "value1_1", "nodeType": "YulIdentifier", "src": "6971:8:21" },
                              "variableNames": [{ "name": "value1", "nodeType": "YulIdentifier", "src": "6961:6:21" }]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "6988:48:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "7021:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7032:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "7017:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7017:18:21"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "7004:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7004:32:21"
                              },
                              "variables": [
                                { "name": "offset_1", "nodeType": "YulTypedName", "src": "6992:8:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "7065:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "7074:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "7077:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "7067:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "7067:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "7067:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "offset_1", "nodeType": "YulIdentifier", "src": "7051:8:21" },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "7061:2:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "7048:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "7048:16:21"
                              },
                              "nodeType": "YulIf",
                              "src": "7045:36:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "7090:98:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "7158:9:21" },
                                      { "name": "offset_1", "nodeType": "YulIdentifier", "src": "7169:8:21" }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "7154:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7154:24:21"
                                  },
                                  { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "7180:7:21" }
                                ],
                                "functionName": {
                                  "name": "abi_decode_array_address_dyn_calldata",
                                  "nodeType": "YulIdentifier",
                                  "src": "7116:37:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7116:72:21"
                              },
                              "variables": [
                                { "name": "value2_1", "nodeType": "YulTypedName", "src": "7094:8:21", "type": "" },
                                { "name": "value3_1", "nodeType": "YulTypedName", "src": "7104:8:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "7197:18:21",
                              "value": { "name": "value2_1", "nodeType": "YulIdentifier", "src": "7207:8:21" },
                              "variableNames": [{ "name": "value2", "nodeType": "YulIdentifier", "src": "7197:6:21" }]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "7224:18:21",
                              "value": { "name": "value3_1", "nodeType": "YulIdentifier", "src": "7234:8:21" },
                              "variableNames": [{ "name": "value3", "nodeType": "YulIdentifier", "src": "7224:6:21" }]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "6574:9:21", "type": "" },
                          { "name": "dataEnd", "nodeType": "YulTypedName", "src": "6585:7:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "value0", "nodeType": "YulTypedName", "src": "6597:6:21", "type": "" },
                          { "name": "value1", "nodeType": "YulTypedName", "src": "6605:6:21", "type": "" },
                          { "name": "value2", "nodeType": "YulTypedName", "src": "6613:6:21", "type": "" },
                          { "name": "value3", "nodeType": "YulTypedName", "src": "6621:6:21", "type": "" }
                        ],
                        "src": "6467:781:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "7427:169:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "7444:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7455:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "7437:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "7437:21:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "7437:21:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "7478:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7489:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "7474:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7474:18:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7494:2:21",
                                    "type": "",
                                    "value": "19"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "7467:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "7467:30:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "7467:30:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "7517:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7528:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "7513:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7513:18:21"
                                  },
                                  {
                                    "hexValue": "43616c6c6572206973206e6f74206f776e6572",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "7533:21:21",
                                    "type": "",
                                    "value": "Caller is not owner"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "7506:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "7506:49:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "7506:49:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "7564:26:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "7576:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7587:2:21",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "7572:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "7572:18:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "7564:4:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_2d10247a65709fdb3c0696b0ed760a0c246e12f8c496efb56291dd2fe3b0275d__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "7404:9:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "7418:4:21", "type": "" }
                        ],
                        "src": "7253:343:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "7786:423:21",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "7796:16:21",
                              "value": { "name": "pos", "nodeType": "YulIdentifier", "src": "7809:3:21" },
                              "variables": [
                                { "name": "pos_1", "nodeType": "YulTypedName", "src": "7800:5:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "7821:27:21",
                              "value": {
                                "arguments": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "7841:6:21" }],
                                "functionName": { "name": "mload", "nodeType": "YulIdentifier", "src": "7835:5:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "7835:13:21"
                              },
                              "variables": [
                                { "name": "length", "nodeType": "YulTypedName", "src": "7825:6:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "7857:12:21",
                              "value": { "name": "pos", "nodeType": "YulIdentifier", "src": "7866:3:21" },
                              "variableNames": [{ "name": "pos_1", "nodeType": "YulIdentifier", "src": "7857:5:21" }]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "7878:14:21",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7888:4:21",
                                "type": "",
                                "value": "0x20"
                              },
                              "variables": [
                                { "name": "_1", "nodeType": "YulTypedName", "src": "7882:2:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "7901:29:21",
                              "value": {
                                "arguments": [
                                  { "name": "value0", "nodeType": "YulIdentifier", "src": "7919:6:21" },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "7927:2:21" }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "7915:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "7915:15:21"
                              },
                              "variables": [
                                { "name": "srcPtr", "nodeType": "YulTypedName", "src": "7905:6:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "7939:10:21",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7948:1:21",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [{ "name": "i", "nodeType": "YulTypedName", "src": "7943:1:21", "type": "" }]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "8007:175:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        { "name": "pos_1", "nodeType": "YulIdentifier", "src": "8028:5:21" },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                { "name": "srcPtr", "nodeType": "YulIdentifier", "src": "8045:6:21" }
                                              ],
                                              "functionName": {
                                                "name": "mload",
                                                "nodeType": "YulIdentifier",
                                                "src": "8039:5:21"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "8039:13:21"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "8054:42:21",
                                              "type": "",
                                              "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "and",
                                            "nodeType": "YulIdentifier",
                                            "src": "8035:3:21"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "8035:62:21"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "8021:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8021:77:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "8021:77:21"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "8111:23:21",
                                    "value": {
                                      "arguments": [
                                        { "name": "pos_1", "nodeType": "YulIdentifier", "src": "8124:5:21" },
                                        { "name": "_1", "nodeType": "YulIdentifier", "src": "8131:2:21" }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "8120:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8120:14:21"
                                    },
                                    "variableNames": [
                                      { "name": "pos_1", "nodeType": "YulIdentifier", "src": "8111:5:21" }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "8147:25:21",
                                    "value": {
                                      "arguments": [
                                        { "name": "srcPtr", "nodeType": "YulIdentifier", "src": "8161:6:21" },
                                        { "name": "_1", "nodeType": "YulIdentifier", "src": "8169:2:21" }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "8157:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8157:15:21"
                                    },
                                    "variableNames": [
                                      { "name": "srcPtr", "nodeType": "YulIdentifier", "src": "8147:6:21" }
                                    ]
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "i", "nodeType": "YulIdentifier", "src": "7969:1:21" },
                                  { "name": "length", "nodeType": "YulIdentifier", "src": "7972:6:21" }
                                ],
                                "functionName": { "name": "lt", "nodeType": "YulIdentifier", "src": "7966:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "7966:13:21"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "7980:18:21",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "7982:14:21",
                                    "value": {
                                      "arguments": [
                                        { "name": "i", "nodeType": "YulIdentifier", "src": "7991:1:21" },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "7994:1:21",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "7987:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "7987:9:21"
                                    },
                                    "variableNames": [{ "name": "i", "nodeType": "YulIdentifier", "src": "7982:1:21" }]
                                  }
                                ]
                              },
                              "pre": { "nodeType": "YulBlock", "src": "7962:3:21", "statements": [] },
                              "src": "7958:224:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "8191:12:21",
                              "value": { "name": "pos_1", "nodeType": "YulIdentifier", "src": "8198:5:21" },
                              "variableNames": [{ "name": "end", "nodeType": "YulIdentifier", "src": "8191:3:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_array$_t_address_payable_$dyn_memory_ptr__to_t_array$_t_address_payable_$dyn_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "pos", "nodeType": "YulTypedName", "src": "7762:3:21", "type": "" },
                          { "name": "value0", "nodeType": "YulTypedName", "src": "7767:6:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "end", "nodeType": "YulTypedName", "src": "7778:3:21", "type": "" }
                        ],
                        "src": "7601:608:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "8396:449:21",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "8406:16:21",
                              "value": { "name": "pos", "nodeType": "YulIdentifier", "src": "8419:3:21" },
                              "variables": [
                                { "name": "pos_1", "nodeType": "YulTypedName", "src": "8410:5:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "8431:27:21",
                              "value": {
                                "arguments": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "8451:6:21" }],
                                "functionName": { "name": "sload", "nodeType": "YulIdentifier", "src": "8445:5:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "8445:13:21"
                              },
                              "variables": [
                                { "name": "length", "nodeType": "YulTypedName", "src": "8435:6:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "8467:12:21",
                              "value": { "name": "pos", "nodeType": "YulIdentifier", "src": "8476:3:21" },
                              "variableNames": [{ "name": "pos_1", "nodeType": "YulIdentifier", "src": "8467:5:21" }]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8495:1:21",
                                    "type": "",
                                    "value": "0"
                                  },
                                  { "name": "value0", "nodeType": "YulIdentifier", "src": "8498:6:21" }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "8488:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "8488:17:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8488:17:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "8514:14:21",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8524:4:21",
                                "type": "",
                                "value": "0x20"
                              },
                              "variables": [
                                { "name": "_1", "nodeType": "YulTypedName", "src": "8518:2:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "8537:30:21",
                              "value": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8561:1:21",
                                    "type": "",
                                    "value": "0"
                                  },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "8564:2:21" }
                                ],
                                "functionName": {
                                  "name": "keccak256",
                                  "nodeType": "YulIdentifier",
                                  "src": "8551:9:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8551:16:21"
                              },
                              "variables": [
                                { "name": "srcPtr", "nodeType": "YulTypedName", "src": "8541:6:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "8576:10:21",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8585:1:21",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [{ "name": "i", "nodeType": "YulTypedName", "src": "8580:1:21", "type": "" }]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "8644:174:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        { "name": "pos_1", "nodeType": "YulIdentifier", "src": "8665:5:21" },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                { "name": "srcPtr", "nodeType": "YulIdentifier", "src": "8682:6:21" }
                                              ],
                                              "functionName": {
                                                "name": "sload",
                                                "nodeType": "YulIdentifier",
                                                "src": "8676:5:21"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "8676:13:21"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "8691:42:21",
                                              "type": "",
                                              "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "and",
                                            "nodeType": "YulIdentifier",
                                            "src": "8672:3:21"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "8672:62:21"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "8658:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8658:77:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "8658:77:21"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "8748:23:21",
                                    "value": {
                                      "arguments": [
                                        { "name": "pos_1", "nodeType": "YulIdentifier", "src": "8761:5:21" },
                                        { "name": "_1", "nodeType": "YulIdentifier", "src": "8768:2:21" }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "8757:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8757:14:21"
                                    },
                                    "variableNames": [
                                      { "name": "pos_1", "nodeType": "YulIdentifier", "src": "8748:5:21" }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "8784:24:21",
                                    "value": {
                                      "arguments": [
                                        { "name": "srcPtr", "nodeType": "YulIdentifier", "src": "8798:6:21" },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "8806:1:21",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "8794:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8794:14:21"
                                    },
                                    "variableNames": [
                                      { "name": "srcPtr", "nodeType": "YulIdentifier", "src": "8784:6:21" }
                                    ]
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "i", "nodeType": "YulIdentifier", "src": "8606:1:21" },
                                  { "name": "length", "nodeType": "YulIdentifier", "src": "8609:6:21" }
                                ],
                                "functionName": { "name": "lt", "nodeType": "YulIdentifier", "src": "8603:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "8603:13:21"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "8617:18:21",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "8619:14:21",
                                    "value": {
                                      "arguments": [
                                        { "name": "i", "nodeType": "YulIdentifier", "src": "8628:1:21" },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "8631:1:21",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "8624:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8624:9:21"
                                    },
                                    "variableNames": [{ "name": "i", "nodeType": "YulIdentifier", "src": "8619:1:21" }]
                                  }
                                ]
                              },
                              "pre": { "nodeType": "YulBlock", "src": "8599:3:21", "statements": [] },
                              "src": "8595:223:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "8827:12:21",
                              "value": { "name": "pos_1", "nodeType": "YulIdentifier", "src": "8834:5:21" },
                              "variableNames": [{ "name": "end", "nodeType": "YulIdentifier", "src": "8827:3:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_array$_t_address_payable_$dyn_storage__to_t_array$_t_address_payable_$dyn_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "pos", "nodeType": "YulTypedName", "src": "8372:3:21", "type": "" },
                          { "name": "value0", "nodeType": "YulTypedName", "src": "8377:6:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "end", "nodeType": "YulTypedName", "src": "8388:3:21", "type": "" }
                        ],
                        "src": "8214:631:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "8882:152:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8899:1:21",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8902:77:21",
                                    "type": "",
                                    "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "8892:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "8892:88:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8892:88:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8996:1:21",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8999:4:21",
                                    "type": "",
                                    "value": "0x32"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "8989:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "8989:15:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8989:15:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9020:1:21",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9023:4:21",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": { "name": "revert", "nodeType": "YulIdentifier", "src": "9013:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "9013:15:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9013:15:21"
                            }
                          ]
                        },
                        "name": "panic_error_0x32",
                        "nodeType": "YulFunctionDefinition",
                        "src": "8850:184:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "9071:152:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9088:1:21",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9091:77:21",
                                    "type": "",
                                    "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "9081:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "9081:88:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9081:88:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9185:1:21",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9188:4:21",
                                    "type": "",
                                    "value": "0x11"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "9178:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "9178:15:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9178:15:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9209:1:21",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9212:4:21",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": { "name": "revert", "nodeType": "YulIdentifier", "src": "9202:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "9202:15:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9202:15:21"
                            }
                          ]
                        },
                        "name": "panic_error_0x11",
                        "nodeType": "YulFunctionDefinition",
                        "src": "9039:184:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "9275:148:21",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "9366:22:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nodeType": "YulIdentifier",
                                        "src": "9368:16:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "9368:18:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "9368:18:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "value", "nodeType": "YulIdentifier", "src": "9291:5:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9298:66:21",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": { "name": "eq", "nodeType": "YulIdentifier", "src": "9288:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "9288:77:21"
                              },
                              "nodeType": "YulIf",
                              "src": "9285:103:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "9397:20:21",
                              "value": {
                                "arguments": [
                                  { "name": "value", "nodeType": "YulIdentifier", "src": "9408:5:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9415:1:21",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "9404:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "9404:13:21"
                              },
                              "variableNames": [{ "name": "ret", "nodeType": "YulIdentifier", "src": "9397:3:21" }]
                            }
                          ]
                        },
                        "name": "increment_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [{ "name": "value", "nodeType": "YulTypedName", "src": "9257:5:21", "type": "" }],
                        "returnVariables": [
                          { "name": "ret", "nodeType": "YulTypedName", "src": "9267:3:21", "type": "" }
                        ],
                        "src": "9228:195:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "9602:162:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "9619:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9630:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "9612:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "9612:21:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9612:21:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "9653:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9664:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "9649:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9649:18:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9669:2:21",
                                    "type": "",
                                    "value": "12"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "9642:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "9642:30:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9642:30:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "9692:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9703:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "9688:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9688:18:21"
                                  },
                                  {
                                    "hexValue": "4e6f206761732070756d7073",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "9708:14:21",
                                    "type": "",
                                    "value": "No gas pumps"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "9681:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "9681:42:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9681:42:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "9732:26:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "9744:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9755:2:21",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "9740:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "9740:18:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "9732:4:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_c1abf30d4e27019b56298306476010b3f6ef9e55a9cfe90bcb5f6dc16e369b9d__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "9579:9:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "9593:4:21", "type": "" }
                        ],
                        "src": "9428:336:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "9817:77:21",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "9827:16:21",
                              "value": {
                                "arguments": [
                                  { "name": "x", "nodeType": "YulIdentifier", "src": "9838:1:21" },
                                  { "name": "y", "nodeType": "YulIdentifier", "src": "9841:1:21" }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "9834:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "9834:9:21"
                              },
                              "variableNames": [{ "name": "sum", "nodeType": "YulIdentifier", "src": "9827:3:21" }]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "9866:22:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nodeType": "YulIdentifier",
                                        "src": "9868:16:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "9868:18:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "9868:18:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "x", "nodeType": "YulIdentifier", "src": "9858:1:21" },
                                  { "name": "sum", "nodeType": "YulIdentifier", "src": "9861:3:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "9855:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "9855:10:21"
                              },
                              "nodeType": "YulIf",
                              "src": "9852:36:21"
                            }
                          ]
                        },
                        "name": "checked_add_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "x", "nodeType": "YulTypedName", "src": "9800:1:21", "type": "" },
                          { "name": "y", "nodeType": "YulTypedName", "src": "9803:1:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "sum", "nodeType": "YulTypedName", "src": "9809:3:21", "type": "" }
                        ],
                        "src": "9769:125:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "9945:228:21",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "9976:168:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "9997:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "10000:77:21",
                                          "type": "",
                                          "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "9990:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "9990:88:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "9990:88:21"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "10098:1:21",
                                          "type": "",
                                          "value": "4"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "10101:4:21",
                                          "type": "",
                                          "value": "0x12"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "10091:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "10091:15:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "10091:15:21"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "10126:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "10129:4:21",
                                          "type": "",
                                          "value": "0x24"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "10119:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "10119:15:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "10119:15:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [{ "name": "y", "nodeType": "YulIdentifier", "src": "9965:1:21" }],
                                "functionName": { "name": "iszero", "nodeType": "YulIdentifier", "src": "9958:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "9958:9:21"
                              },
                              "nodeType": "YulIf",
                              "src": "9955:189:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "10153:14:21",
                              "value": {
                                "arguments": [
                                  { "name": "x", "nodeType": "YulIdentifier", "src": "10162:1:21" },
                                  { "name": "y", "nodeType": "YulIdentifier", "src": "10165:1:21" }
                                ],
                                "functionName": { "name": "div", "nodeType": "YulIdentifier", "src": "10158:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "10158:9:21"
                              },
                              "variableNames": [{ "name": "r", "nodeType": "YulIdentifier", "src": "10153:1:21" }]
                            }
                          ]
                        },
                        "name": "checked_div_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "x", "nodeType": "YulTypedName", "src": "9930:1:21", "type": "" },
                          { "name": "y", "nodeType": "YulTypedName", "src": "9933:1:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "r", "nodeType": "YulTypedName", "src": "9939:1:21", "type": "" }
                        ],
                        "src": "9899:274:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "10227:79:21",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "10237:17:21",
                              "value": {
                                "arguments": [
                                  { "name": "x", "nodeType": "YulIdentifier", "src": "10249:1:21" },
                                  { "name": "y", "nodeType": "YulIdentifier", "src": "10252:1:21" }
                                ],
                                "functionName": { "name": "sub", "nodeType": "YulIdentifier", "src": "10245:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "10245:9:21"
                              },
                              "variableNames": [{ "name": "diff", "nodeType": "YulIdentifier", "src": "10237:4:21" }]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "10278:22:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nodeType": "YulIdentifier",
                                        "src": "10280:16:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "10280:18:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "10280:18:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "diff", "nodeType": "YulIdentifier", "src": "10269:4:21" },
                                  { "name": "x", "nodeType": "YulIdentifier", "src": "10275:1:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "10266:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "10266:11:21"
                              },
                              "nodeType": "YulIf",
                              "src": "10263:37:21"
                            }
                          ]
                        },
                        "name": "checked_sub_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "x", "nodeType": "YulTypedName", "src": "10209:1:21", "type": "" },
                          { "name": "y", "nodeType": "YulTypedName", "src": "10212:1:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "diff", "nodeType": "YulTypedName", "src": "10218:4:21", "type": "" }
                        ],
                        "src": "10178:128:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "10485:179:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "10502:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10513:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "10495:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "10495:21:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10495:21:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "10536:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "10547:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "10532:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10532:18:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10552:2:21",
                                    "type": "",
                                    "value": "29"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "10525:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "10525:30:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10525:30:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "10575:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "10586:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "10571:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10571:18:21"
                                  },
                                  {
                                    "hexValue": "5265636f766572793a20696e636f6e73697374656e7420617272617973",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "10591:31:21",
                                    "type": "",
                                    "value": "Recovery: inconsistent arrays"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "10564:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "10564:59:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10564:59:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "10632:26:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "10644:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10655:2:21",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "10640:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "10640:18:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "10632:4:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_12227dcd596297e685bdc66ab01e81b5228df9a6bdd1fe7960df703f31587551__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "10462:9:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "10476:4:21", "type": "" }
                        ],
                        "src": "10311:353:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "10753:185:21",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "10799:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "10808:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "10811:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "10801:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "10801:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "10801:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "10774:7:21" },
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "10783:9:21" }
                                    ],
                                    "functionName": { "name": "sub", "nodeType": "YulIdentifier", "src": "10770:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10770:23:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10795:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "slt", "nodeType": "YulIdentifier", "src": "10766:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "10766:32:21"
                              },
                              "nodeType": "YulIf",
                              "src": "10763:52:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "10824:36:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "10850:9:21" }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "10837:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10837:23:21"
                              },
                              "variables": [
                                { "name": "value", "nodeType": "YulTypedName", "src": "10828:5:21", "type": "" }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [{ "name": "value", "nodeType": "YulIdentifier", "src": "10902:5:21" }],
                                "functionName": {
                                  "name": "validator_revert_address_payable",
                                  "nodeType": "YulIdentifier",
                                  "src": "10869:32:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10869:39:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10869:39:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "10917:15:21",
                              "value": { "name": "value", "nodeType": "YulIdentifier", "src": "10927:5:21" },
                              "variableNames": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "10917:6:21" }]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_contract$_IERC20_$900",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "10719:9:21", "type": "" },
                          { "name": "dataEnd", "nodeType": "YulTypedName", "src": "10730:7:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "value0", "nodeType": "YulTypedName", "src": "10742:6:21", "type": "" }
                        ],
                        "src": "10669:269:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "11117:235:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "11134:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11145:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "11127:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "11127:21:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11127:21:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "11168:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11179:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "11164:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11164:18:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11184:2:21",
                                    "type": "",
                                    "value": "45"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "11157:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "11157:30:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11157:30:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "11207:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11218:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "11203:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11203:18:21"
                                  },
                                  {
                                    "hexValue": "4e6f7420656e6f7567682066756e647320666f7220616c6c2077616c6c657473",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "11223:34:21",
                                    "type": "",
                                    "value": "Not enough funds for all wallets"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "11196:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "11196:62:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11196:62:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "11278:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11289:2:21",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "11274:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11274:18:21"
                                  },
                                  {
                                    "hexValue": "20746f2062652066696c6c6564",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "11294:15:21",
                                    "type": "",
                                    "value": " to be filled"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "11267:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "11267:43:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11267:43:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "11319:27:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "11331:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11342:3:21",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "11327:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "11327:19:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "11319:4:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_50f9407a4adcdf6ae12e0d869562d9d87ab7a621231d402d6cee2f0011d7245a__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "11094:9:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "11108:4:21", "type": "" }
                        ],
                        "src": "10943:409:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "11442:185:21",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "11488:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "11497:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "11500:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "11490:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "11490:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "11490:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "11463:7:21" },
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "11472:9:21" }
                                    ],
                                    "functionName": { "name": "sub", "nodeType": "YulIdentifier", "src": "11459:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11459:23:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11484:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "slt", "nodeType": "YulIdentifier", "src": "11455:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "11455:32:21"
                              },
                              "nodeType": "YulIf",
                              "src": "11452:52:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "11513:36:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "11539:9:21" }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "11526:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11526:23:21"
                              },
                              "variables": [
                                { "name": "value", "nodeType": "YulTypedName", "src": "11517:5:21", "type": "" }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [{ "name": "value", "nodeType": "YulIdentifier", "src": "11591:5:21" }],
                                "functionName": {
                                  "name": "validator_revert_address_payable",
                                  "nodeType": "YulIdentifier",
                                  "src": "11558:32:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11558:39:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11558:39:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "11606:15:21",
                              "value": { "name": "value", "nodeType": "YulIdentifier", "src": "11616:5:21" },
                              "variableNames": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "11606:6:21" }]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_contract$_IERC721_$819",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "11408:9:21", "type": "" },
                          { "name": "dataEnd", "nodeType": "YulTypedName", "src": "11419:7:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "value0", "nodeType": "YulTypedName", "src": "11431:6:21", "type": "" }
                        ],
                        "src": "11357:270:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "11789:241:21",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "11799:26:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "11811:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11822:2:21",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "11807:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "11807:18:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "11799:4:21" }]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "11834:52:21",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11844:42:21",
                                "type": "",
                                "value": "0xffffffffffffffffffffffffffffffffffffffff"
                              },
                              "variables": [
                                { "name": "_1", "nodeType": "YulTypedName", "src": "11838:2:21", "type": "" }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "11902:9:21" },
                                  {
                                    "arguments": [
                                      { "name": "value0", "nodeType": "YulIdentifier", "src": "11917:6:21" },
                                      { "name": "_1", "nodeType": "YulIdentifier", "src": "11925:2:21" }
                                    ],
                                    "functionName": { "name": "and", "nodeType": "YulIdentifier", "src": "11913:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11913:15:21"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "11895:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "11895:34:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11895:34:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "11949:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11960:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "11945:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11945:18:21"
                                  },
                                  {
                                    "arguments": [
                                      { "name": "value1", "nodeType": "YulIdentifier", "src": "11969:6:21" },
                                      { "name": "_1", "nodeType": "YulIdentifier", "src": "11977:2:21" }
                                    ],
                                    "functionName": { "name": "and", "nodeType": "YulIdentifier", "src": "11965:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11965:15:21"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "11938:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "11938:43:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11938:43:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "12001:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12012:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "11997:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11997:18:21"
                                  },
                                  { "name": "value2", "nodeType": "YulIdentifier", "src": "12017:6:21" }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "11990:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "11990:34:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11990:34:21"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "11742:9:21", "type": "" },
                          { "name": "value2", "nodeType": "YulTypedName", "src": "11753:6:21", "type": "" },
                          { "name": "value1", "nodeType": "YulTypedName", "src": "11761:6:21", "type": "" },
                          { "name": "value0", "nodeType": "YulTypedName", "src": "11769:6:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "11780:4:21", "type": "" }
                        ],
                        "src": "11632:398:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "12113:185:21",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "12159:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "12168:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "12171:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "12161:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "12161:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "12161:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "12134:7:21" },
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "12143:9:21" }
                                    ],
                                    "functionName": { "name": "sub", "nodeType": "YulIdentifier", "src": "12130:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12130:23:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12155:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "slt", "nodeType": "YulIdentifier", "src": "12126:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "12126:32:21"
                              },
                              "nodeType": "YulIf",
                              "src": "12123:52:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "12184:36:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "12210:9:21" }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "12197:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12197:23:21"
                              },
                              "variables": [
                                { "name": "value", "nodeType": "YulTypedName", "src": "12188:5:21", "type": "" }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [{ "name": "value", "nodeType": "YulIdentifier", "src": "12262:5:21" }],
                                "functionName": {
                                  "name": "validator_revert_address_payable",
                                  "nodeType": "YulIdentifier",
                                  "src": "12229:32:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12229:39:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12229:39:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "12277:15:21",
                              "value": { "name": "value", "nodeType": "YulIdentifier", "src": "12287:5:21" },
                              "variableNames": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "12277:6:21" }]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_address_payable",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "12079:9:21", "type": "" },
                          { "name": "dataEnd", "nodeType": "YulTypedName", "src": "12090:7:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "value0", "nodeType": "YulTypedName", "src": "12102:6:21", "type": "" }
                        ],
                        "src": "12035:263:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "12477:181:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "12494:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12505:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "12487:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "12487:21:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12487:21:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "12528:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12539:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "12524:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12524:18:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12544:2:21",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "12517:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "12517:30:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12517:30:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "12567:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12578:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "12563:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12563:18:21"
                                  },
                                  {
                                    "hexValue": "496e74657266616365446574656374696f6e3a2077726f6e672076616c7565",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "12583:33:21",
                                    "type": "",
                                    "value": "InterfaceDetection: wrong value"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "12556:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "12556:61:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12556:61:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "12626:26:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "12638:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12649:2:21",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "12634:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "12634:18:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "12626:4:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "12454:9:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "12468:4:21", "type": "" }
                        ],
                        "src": "12303:355:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "12837:226:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "12854:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12865:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "12847:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "12847:21:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12847:21:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "12888:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12899:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "12884:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12884:18:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12904:2:21",
                                    "type": "",
                                    "value": "36"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "12877:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "12877:30:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12877:30:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "12927:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12938:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "12923:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12923:18:21"
                                  },
                                  {
                                    "hexValue": "41646472657373206e6f742070617274206f6620746865204761732053746174",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "12943:34:21",
                                    "type": "",
                                    "value": "Address not part of the Gas Stat"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "12916:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "12916:62:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12916:62:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "12998:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "13009:2:21",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "12994:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12994:18:21"
                                  },
                                  {
                                    "hexValue": "696f6e20",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "13014:6:21",
                                    "type": "",
                                    "value": "ion "
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "12987:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "12987:34:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12987:34:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "13030:27:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "13042:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13053:3:21",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "13038:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "13038:19:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "13030:4:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_7e652ff6a488637940a02d29f8449254de8a14c7dab61e902488aa9b3477438f__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "12814:9:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "12828:4:21", "type": "" }
                        ],
                        "src": "12663:400:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "13242:174:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "13259:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13270:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "13252:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "13252:21:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "13252:21:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "13293:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "13304:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "13289:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13289:18:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13309:2:21",
                                    "type": "",
                                    "value": "24"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "13282:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "13282:30:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "13282:30:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "13332:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "13343:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "13328:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13328:18:21"
                                  },
                                  {
                                    "hexValue": "4f776e6572736869703a206e6f7420746865206f776e6572",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "13348:26:21",
                                    "type": "",
                                    "value": "Ownership: not the owner"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "13321:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "13321:54:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "13321:54:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "13384:26:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "13396:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13407:2:21",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "13392:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "13392:18:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "13384:4:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "13219:9:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "13233:4:21", "type": "" }
                        ],
                        "src": "13068:348:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "13550:168:21",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "13560:26:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "13572:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13583:2:21",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "13568:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "13568:18:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "13560:4:21" }]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "13602:9:21" },
                                  {
                                    "arguments": [
                                      { "name": "value0", "nodeType": "YulIdentifier", "src": "13617:6:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "13625:42:21",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": { "name": "and", "nodeType": "YulIdentifier", "src": "13613:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13613:55:21"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "13595:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "13595:74:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "13595:74:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "13689:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "13700:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "13685:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13685:18:21"
                                  },
                                  { "name": "value1", "nodeType": "YulIdentifier", "src": "13705:6:21" }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "13678:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "13678:34:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "13678:34:21"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "13511:9:21", "type": "" },
                          { "name": "value1", "nodeType": "YulTypedName", "src": "13522:6:21", "type": "" },
                          { "name": "value0", "nodeType": "YulTypedName", "src": "13530:6:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "13541:4:21", "type": "" }
                        ],
                        "src": "13421:297:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "13897:179:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "13914:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13925:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "13907:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "13907:21:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "13907:21:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "13948:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "13959:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "13944:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13944:18:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13964:2:21",
                                    "type": "",
                                    "value": "29"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "13937:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "13937:30:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "13937:30:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "13987:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "13998:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "13983:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13983:18:21"
                                  },
                                  {
                                    "hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "14003:31:21",
                                    "type": "",
                                    "value": "Address: insufficient balance"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "13976:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "13976:59:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "13976:59:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "14044:26:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "14056:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14067:2:21",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "14052:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "14052:18:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "14044:4:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "13874:9:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "13888:4:21", "type": "" }
                        ],
                        "src": "13723:353:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "14272:14:21",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "14274:10:21",
                              "value": { "name": "pos", "nodeType": "YulIdentifier", "src": "14281:3:21" },
                              "variableNames": [{ "name": "end", "nodeType": "YulIdentifier", "src": "14274:3:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [{ "name": "pos", "nodeType": "YulTypedName", "src": "14256:3:21", "type": "" }],
                        "returnVariables": [
                          { "name": "end", "nodeType": "YulTypedName", "src": "14264:3:21", "type": "" }
                        ],
                        "src": "14081:205:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "14465:248:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "14482:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14493:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "14475:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "14475:21:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "14475:21:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "14516:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "14527:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "14512:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14512:18:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14532:2:21",
                                    "type": "",
                                    "value": "58"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "14505:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "14505:30:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "14505:30:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "14555:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "14566:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "14551:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14551:18:21"
                                  },
                                  {
                                    "hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c2072",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "14571:34:21",
                                    "type": "",
                                    "value": "Address: unable to send value, r"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "14544:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "14544:62:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "14544:62:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "14626:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "14637:2:21",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "14622:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14622:18:21"
                                  },
                                  {
                                    "hexValue": "6563697069656e74206d61792068617665207265766572746564",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "14642:28:21",
                                    "type": "",
                                    "value": "ecipient may have reverted"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "14615:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "14615:56:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "14615:56:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "14680:27:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "14692:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14703:3:21",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "14688:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "14688:19:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "14680:4:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "14442:9:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "14456:4:21", "type": "" }
                        ],
                        "src": "14291:422:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "14796:199:21",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "14842:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "14851:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "14854:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "14844:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "14844:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "14844:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "14817:7:21" },
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "14826:9:21" }
                                    ],
                                    "functionName": { "name": "sub", "nodeType": "YulIdentifier", "src": "14813:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14813:23:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14838:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "slt", "nodeType": "YulIdentifier", "src": "14809:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "14809:32:21"
                              },
                              "nodeType": "YulIf",
                              "src": "14806:52:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "14867:29:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "14886:9:21" }
                                ],
                                "functionName": { "name": "mload", "nodeType": "YulIdentifier", "src": "14880:5:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "14880:16:21"
                              },
                              "variables": [
                                { "name": "value", "nodeType": "YulTypedName", "src": "14871:5:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "14949:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "14958:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "14961:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "14951:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "14951:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "14951:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "value", "nodeType": "YulIdentifier", "src": "14918:5:21" },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              { "name": "value", "nodeType": "YulIdentifier", "src": "14939:5:21" }
                                            ],
                                            "functionName": {
                                              "name": "iszero",
                                              "nodeType": "YulIdentifier",
                                              "src": "14932:6:21"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "14932:13:21"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "14925:6:21"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "14925:21:21"
                                      }
                                    ],
                                    "functionName": { "name": "eq", "nodeType": "YulIdentifier", "src": "14915:2:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14915:32:21"
                                  }
                                ],
                                "functionName": { "name": "iszero", "nodeType": "YulIdentifier", "src": "14908:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "14908:40:21"
                              },
                              "nodeType": "YulIf",
                              "src": "14905:60:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "14974:15:21",
                              "value": { "name": "value", "nodeType": "YulIdentifier", "src": "14984:5:21" },
                              "variableNames": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "14974:6:21" }]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_bool_fromMemory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "14762:9:21", "type": "" },
                          { "name": "dataEnd", "nodeType": "YulTypedName", "src": "14773:7:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "value0", "nodeType": "YulTypedName", "src": "14785:6:21", "type": "" }
                        ],
                        "src": "14718:277:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "15174:232:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "15191:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15202:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "15184:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "15184:21:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "15184:21:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "15225:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "15236:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "15221:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "15221:18:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15241:2:21",
                                    "type": "",
                                    "value": "42"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "15214:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "15214:30:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "15214:30:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "15264:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "15275:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "15260:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "15260:18:21"
                                  },
                                  {
                                    "hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "15280:34:21",
                                    "type": "",
                                    "value": "SafeERC20: ERC20 operation did n"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "15253:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "15253:62:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "15253:62:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "15335:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "15346:2:21",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "15331:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "15331:18:21"
                                  },
                                  {
                                    "hexValue": "6f742073756363656564",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "15351:12:21",
                                    "type": "",
                                    "value": "ot succeed"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "15324:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "15324:40:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "15324:40:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "15373:27:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "15385:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15396:3:21",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "15381:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "15381:19:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "15373:4:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "15151:9:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "15165:4:21", "type": "" }
                        ],
                        "src": "15000:406:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "15585:228:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "15602:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15613:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "15595:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "15595:21:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "15595:21:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "15636:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "15647:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "15632:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "15632:18:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15652:2:21",
                                    "type": "",
                                    "value": "38"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "15625:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "15625:30:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "15625:30:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "15675:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "15686:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "15671:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "15671:18:21"
                                  },
                                  {
                                    "hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "15691:34:21",
                                    "type": "",
                                    "value": "Address: insufficient balance fo"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "15664:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "15664:62:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "15664:62:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "15746:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "15757:2:21",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "15742:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "15742:18:21"
                                  },
                                  {
                                    "hexValue": "722063616c6c",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "15762:8:21",
                                    "type": "",
                                    "value": "r call"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "15735:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "15735:36:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "15735:36:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "15780:27:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "15792:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15803:3:21",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "15788:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "15788:19:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "15780:4:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "15562:9:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "15576:4:21", "type": "" }
                        ],
                        "src": "15411:402:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "15884:184:21",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "15894:10:21",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15903:1:21",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                { "name": "i", "nodeType": "YulTypedName", "src": "15898:1:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "15963:63:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            { "name": "dst", "nodeType": "YulIdentifier", "src": "15988:3:21" },
                                            { "name": "i", "nodeType": "YulIdentifier", "src": "15993:1:21" }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "15984:3:21"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "15984:11:21"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                { "name": "src", "nodeType": "YulIdentifier", "src": "16007:3:21" },
                                                { "name": "i", "nodeType": "YulIdentifier", "src": "16012:1:21" }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nodeType": "YulIdentifier",
                                                "src": "16003:3:21"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "16003:11:21"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mload",
                                            "nodeType": "YulIdentifier",
                                            "src": "15997:5:21"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "15997:18:21"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "15977:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "15977:39:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "15977:39:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "i", "nodeType": "YulIdentifier", "src": "15924:1:21" },
                                  { "name": "length", "nodeType": "YulIdentifier", "src": "15927:6:21" }
                                ],
                                "functionName": { "name": "lt", "nodeType": "YulIdentifier", "src": "15921:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "15921:13:21"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "15935:19:21",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "15937:15:21",
                                    "value": {
                                      "arguments": [
                                        { "name": "i", "nodeType": "YulIdentifier", "src": "15946:1:21" },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "15949:2:21",
                                          "type": "",
                                          "value": "32"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "15942:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "15942:10:21"
                                    },
                                    "variableNames": [{ "name": "i", "nodeType": "YulIdentifier", "src": "15937:1:21" }]
                                  }
                                ]
                              },
                              "pre": { "nodeType": "YulBlock", "src": "15917:3:21", "statements": [] },
                              "src": "15913:113:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "dst", "nodeType": "YulIdentifier", "src": "16046:3:21" },
                                      { "name": "length", "nodeType": "YulIdentifier", "src": "16051:6:21" }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "16042:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "16042:16:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16060:1:21",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "16035:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "16035:27:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "16035:27:21"
                            }
                          ]
                        },
                        "name": "copy_memory_to_memory_with_cleanup",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "src", "nodeType": "YulTypedName", "src": "15862:3:21", "type": "" },
                          { "name": "dst", "nodeType": "YulTypedName", "src": "15867:3:21", "type": "" },
                          { "name": "length", "nodeType": "YulTypedName", "src": "15872:6:21", "type": "" }
                        ],
                        "src": "15818:250:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "16210:150:21",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "16220:27:21",
                              "value": {
                                "arguments": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "16240:6:21" }],
                                "functionName": { "name": "mload", "nodeType": "YulIdentifier", "src": "16234:5:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "16234:13:21"
                              },
                              "variables": [
                                { "name": "length", "nodeType": "YulTypedName", "src": "16224:6:21", "type": "" }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "value0", "nodeType": "YulIdentifier", "src": "16295:6:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "16303:4:21",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "16291:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "16291:17:21"
                                  },
                                  { "name": "pos", "nodeType": "YulIdentifier", "src": "16310:3:21" },
                                  { "name": "length", "nodeType": "YulIdentifier", "src": "16315:6:21" }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nodeType": "YulIdentifier",
                                  "src": "16256:34:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16256:66:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "16256:66:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "16331:23:21",
                              "value": {
                                "arguments": [
                                  { "name": "pos", "nodeType": "YulIdentifier", "src": "16342:3:21" },
                                  { "name": "length", "nodeType": "YulIdentifier", "src": "16347:6:21" }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "16338:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "16338:16:21"
                              },
                              "variableNames": [{ "name": "end", "nodeType": "YulIdentifier", "src": "16331:3:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "pos", "nodeType": "YulTypedName", "src": "16186:3:21", "type": "" },
                          { "name": "value0", "nodeType": "YulTypedName", "src": "16191:6:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "end", "nodeType": "YulTypedName", "src": "16202:3:21", "type": "" }
                        ],
                        "src": "16073:287:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "16539:179:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "16556:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16567:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "16549:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "16549:21:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "16549:21:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "16590:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "16601:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "16586:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "16586:18:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16606:2:21",
                                    "type": "",
                                    "value": "29"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "16579:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "16579:30:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "16579:30:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "16629:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "16640:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "16625:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "16625:18:21"
                                  },
                                  {
                                    "hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "16645:31:21",
                                    "type": "",
                                    "value": "Address: call to non-contract"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "16618:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "16618:59:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "16618:59:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "16686:26:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "16698:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16709:2:21",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "16694:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "16694:18:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "16686:4:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "16516:9:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "16530:4:21", "type": "" }
                        ],
                        "src": "16365:353:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "16844:334:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "16861:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16872:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "16854:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "16854:21:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "16854:21:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "16884:27:21",
                              "value": {
                                "arguments": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "16904:6:21" }],
                                "functionName": { "name": "mload", "nodeType": "YulIdentifier", "src": "16898:5:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "16898:13:21"
                              },
                              "variables": [
                                { "name": "length", "nodeType": "YulTypedName", "src": "16888:6:21", "type": "" }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "16931:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "16942:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "16927:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "16927:18:21"
                                  },
                                  { "name": "length", "nodeType": "YulIdentifier", "src": "16947:6:21" }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "16920:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "16920:34:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "16920:34:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "value0", "nodeType": "YulIdentifier", "src": "17002:6:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "17010:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "16998:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "16998:15:21"
                                  },
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "17019:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "17030:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "17015:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "17015:18:21"
                                  },
                                  { "name": "length", "nodeType": "YulIdentifier", "src": "17035:6:21" }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nodeType": "YulIdentifier",
                                  "src": "16963:34:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16963:79:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "16963:79:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "17051:121:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "17067:9:21" },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              { "name": "length", "nodeType": "YulIdentifier", "src": "17086:6:21" },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "17094:2:21",
                                                "type": "",
                                                "value": "31"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "17082:3:21"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "17082:15:21"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "17099:66:21",
                                            "type": "",
                                            "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "17078:3:21"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "17078:88:21"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "17063:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "17063:104:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17169:2:21",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "17059:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "17059:113:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "17051:4:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "16813:9:21", "type": "" },
                          { "name": "value0", "nodeType": "YulTypedName", "src": "16824:6:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "16835:4:21", "type": "" }
                        ],
                        "src": "16723:455:21"
                      }
                    ]
                  },
                  "contents": "{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function validator_revert_address_payable(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_address_payable(offset) -> value\n    {\n        value := calldataload(offset)\n        validator_revert_address_payable(value)\n    }\n    function abi_decode_tuple_t_array$_t_address_payable_$dyn_memory_ptr(headStart, dataEnd) -> value0\n    {\n        let _1 := 32\n        if slt(sub(dataEnd, headStart), _1) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _2 := 0xffffffffffffffff\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := calldataload(_3)\n        if gt(_4, _2) { panic_error_0x41() }\n        let _5 := shl(5, _4)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(_5, 63), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        let dst := memPtr\n        mstore(memPtr, _4)\n        dst := add(memPtr, _1)\n        let srcEnd := add(add(_3, _5), _1)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_3, _1)\n        for { } lt(src, srcEnd) { src := add(src, _1) }\n        {\n            mstore(dst, abi_decode_address_payable(src))\n            dst := add(dst, _1)\n        }\n        value0 := memPtr\n    }\n    function abi_decode_array_address_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$900_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_encode_tuple_t_array$_t_address_payable_$dyn_memory_ptr__to_t_array$_t_address_payable_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, and(mload(srcPtr), 0xffffffffffffffffffffffffffffffffffffffff))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address_payable__to_t_address_payable__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$819_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address_payable(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_encode_tuple_t_stringliteral_2d10247a65709fdb3c0696b0ed760a0c246e12f8c496efb56291dd2fe3b0275d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 19)\n        mstore(add(headStart, 64), \"Caller is not owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_array$_t_address_payable_$dyn_memory_ptr__to_t_array$_t_address_payable_$dyn_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let pos_1 := pos\n        let length := mload(value0)\n        pos_1 := pos\n        let _1 := 0x20\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos_1, and(mload(srcPtr), 0xffffffffffffffffffffffffffffffffffffffff))\n            pos_1 := add(pos_1, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos_1\n    }\n    function abi_encode_tuple_packed_t_array$_t_address_payable_$dyn_storage__to_t_array$_t_address_payable_$dyn_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let pos_1 := pos\n        let length := sload(value0)\n        pos_1 := pos\n        mstore(0, value0)\n        let _1 := 0x20\n        let srcPtr := keccak256(0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos_1, and(sload(srcPtr), 0xffffffffffffffffffffffffffffffffffffffff))\n            pos_1 := add(pos_1, _1)\n            srcPtr := add(srcPtr, 1)\n        }\n        end := pos_1\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_c1abf30d4e27019b56298306476010b3f6ef9e55a9cfe90bcb5f6dc16e369b9d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 12)\n        mstore(add(headStart, 64), \"No gas pumps\")\n        tail := add(headStart, 96)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_12227dcd596297e685bdc66ab01e81b5228df9a6bdd1fe7960df703f31587551__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Recovery: inconsistent arrays\")\n        tail := add(headStart, 96)\n    }\n    function abi_decode_tuple_t_contract$_IERC20_$900(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address_payable(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_50f9407a4adcdf6ae12e0d869562d9d87ab7a621231d402d6cee2f0011d7245a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 45)\n        mstore(add(headStart, 64), \"Not enough funds for all wallets\")\n        mstore(add(headStart, 96), \" to be filled\")\n        tail := add(headStart, 128)\n    }\n    function abi_decode_tuple_t_contract$_IERC721_$819(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address_payable(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_decode_tuple_t_address_payable(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address_payable(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"InterfaceDetection: wrong value\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_7e652ff6a488637940a02d29f8449254de8a14c7dab61e902488aa9b3477438f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"Address not part of the Gas Stat\")\n        mstore(add(headStart, 96), \"ion \")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"Ownership: not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: insufficient balance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 58)\n        mstore(add(headStart, 64), \"Address: unable to send value, r\")\n        mstore(add(headStart, 96), \"ecipient may have reverted\")\n        tail := add(headStart, 128)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 64)\n    }\n}",
                  "id": 21,
                  "language": "Yul",
                  "name": "#utility.yul"
                }
              ],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600436106100bc5760003560e01c806389cd7a7b11610074578063c3666c361161004e578063c3666c36146101cf578063f2fde38b146101ef578063f7ba94bd1461020f57600080fd5b806389cd7a7b146101535780638da5cb5b14610175578063adddc767146101af57600080fd5b806355161913116100a5578063551619131461011857806373c8a9581461012057806377d17db21461014057600080fd5b806301ffc9a7146100c157806327bd8ff1146100f6575b600080fd5b3480156100cd57600080fd5b506100e16100dc3660046116b2565b61022f565b60405190151581526020015b60405180910390f35b34801561010257600080fd5b5061011661011136600461175c565b610249565b005b610116610429565b34801561012c57600080fd5b5061011661013b36600461188b565b61053d565b61011661014e36600461175c565b610668565b34801561015f57600080fd5b506101686107f1565b6040516100ed9190611925565b34801561018157600080fd5b5061018a610860565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ed565b3480156101bb57600080fd5b5061018a6101ca36600461197f565b61088c565b3480156101db57600080fd5b506101166101ea36600461188b565b6108c3565b3480156101fb57600080fd5b5061011661020a366004611998565b610a66565b34801561021b57600080fd5b5061011661022a3660046119b5565b610a7d565b60006102438261023d610c54565b90610d8e565b92915050565b610251610860565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f43616c6c6572206973206e6f74206f776e65720000000000000000000000000060448201526064015b60405180910390fd5b806040516102f89190611a21565b6040518091039020600060405161030f9190611a6d565b604051908190038120907f6d86fa282077cbb7e8dfb1e46d681667447b404489db833611f44ac272a3d64e90600090a38051610352906000906020840190611613565b5060005b600054811015610425576000818154811061037357610373611ab4565b6000918252602082200154815473ffffffffffffffffffffffffffffffffffffffff909116916001918190859081106103ae576103ae611ab4565b60009182526020808320919091015473ffffffffffffffffffffffffffffffffffffffff9081168452908301939093526040909101902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016929091169190911790558061041d81611b12565b915050610356565b5050565b600054610492576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f206761732070756d7073000000000000000000000000000000000000000060448201526064016102e1565b34600260008282546104a49190611b4a565b9091555050600080546104b79034611b5d565b905061271081116104c757600080fd5b60005b6000548110156104255781600260008282546104e69190611b98565b9250508190555061052b6000828154811061050357610503611ab4565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1683610e68565b8061053581611b12565b9150506104ca565b610550335b61054a610b69565b90610f61565b84838114801561055f57508082145b6105c5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5265636f766572793a20696e636f6e73697374656e742061727261797300000060448201526064016102e1565b60005b81811461065e576106568888838181106105e4576105e4611ab4565b90506020020160208101906105f99190611998565b85858481811061060b5761060b611ab4565b9050602002013588888581811061062457610624611ab4565b90506020020160208101906106399190611998565b73ffffffffffffffffffffffffffffffffffffffff169190610fe4565b6001016105c8565b5050505050505050565b6000546106d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f206761732070756d7073000000000000000000000000000000000000000060448201526064016102e1565b34600260008282546106e39190611b4a565b909155505080516002546000916106f991611b5d565b905067016345785d8a00008111610792576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f4e6f7420656e6f7567682066756e647320666f7220616c6c2077616c6c65747360448201527f20746f2062652066696c6c65640000000000000000000000000000000000000060648201526084016102e1565b60005b82518110156107ec5781600260008282546107b09190611b98565b925050819055506107da8382815181106107cc576107cc611ab4565b602002602001015183610e68565b806107e481611b12565b915050610795565b505050565b6060600080548060200260200160405190810160405280929190818152602001828054801561085657602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161082b575b5050505050905090565b600061088761086d610b69565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b6000818154811061089c57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b6108cc33610542565b8483811480156108db57508082145b610941576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5265636f766572793a20696e636f6e73697374656e742061727261797300000060448201526064016102e1565b60005b81811461065e5785858281811061095d5761095d611ab4565b90506020020160208101906109729190611998565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd308a8a858181106109a0576109a0611ab4565b90506020020160208101906109b59190611998565b8787868181106109c7576109c7611ab4565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b158015610a4357600080fd5b505af1158015610a57573d6000803e3d6000fd5b50505050806001019050610944565b610a7a3382610a73610b69565b9190611071565b50565b610a8633610542565b82818114610af0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5265636f766572793a20696e636f6e73697374656e742061727261797300000060448201526064016102e1565b60005b818114610b6157610b59848483818110610b0f57610b0f611ab4565b90506020020135878784818110610b2857610b28611ab4565b9050602002016020810190610b3d9190611998565b73ffffffffffffffffffffffffffffffffffffffff169061119e565b600101610af3565b505050505050565b60008061024360017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd611b98565b73ffffffffffffffffffffffffffffffffffffffff811615610c1f5781547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff821690811783556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b6104257f7f5828d0000000000000000000000000000000000000000000000000000000006001610c4d610c54565b9190610c82565b60008061024360017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e611b98565b7c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610d2a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f496e74657266616365446574656374696f6e3a2077726f6e672076616c75650060448201526064016102e1565b7fffffffff00000000000000000000000000000000000000000000000000000000919091166000908152602092909252604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610dde57506000610243565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610e2f57506001610243565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b73ffffffffffffffffffffffffffffffffffffffff80831660008181526001602052604090205490911614610f1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f41646472657373206e6f742070617274206f662074686520476173205374617460448201527f696f6e200000000000000000000000000000000000000000000000000000000060648201526084016102e1565b60405173ffffffffffffffffffffffffffffffffffffffff83169082156108fc029083906000818181858888f193505050501580156107ec573d6000803e3d6000fd5b815473ffffffffffffffffffffffffffffffffffffffff828116911614610425576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f776e6572736869703a206e6f7420746865206f776e6572000000000000000060448201526064016102e1565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526107ec9084906112f8565b825473ffffffffffffffffffffffffffffffffffffffff90811690831681146110f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f776e6572736869703a206e6f7420746865206f776e6572000000000000000060448201526064016102e1565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146111985783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35b50505050565b80471015611208576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016102e1565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114611262576040519150601f19603f3d011682016040523d82523d6000602084013e611267565b606091505b50509050806107ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016102e1565b600061135a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166114049092919063ffffffff16565b8051909150156107ec57808060200190518101906113789190611bab565b6107ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016102e1565b6060611413848460008561141b565b949350505050565b6060824710156114ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016102e1565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516114d69190611bf1565b60006040518083038185875af1925050503d8060008114611513576040519150601f19603f3d011682016040523d82523d6000602084013e611518565b606091505b509150915061152987838387611534565b979650505050505050565b606083156115ca5782516000036115c35773ffffffffffffffffffffffffffffffffffffffff85163b6115c3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102e1565b5081611413565b61141383838151156115df5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e19190611c0d565b82805482825590600052602060002090810192821561168d579160200282015b8281111561168d57825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190611633565b5061169992915061169d565b5090565b5b80821115611699576000815560010161169e565b6000602082840312156116c457600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146116f457600080fd5b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610a7a57600080fd5b80356117578161172a565b919050565b6000602080838503121561176f57600080fd5b823567ffffffffffffffff8082111561178757600080fd5b818501915085601f83011261179b57600080fd5b8135818111156117ad576117ad6116fb565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811085821117156117f0576117f06116fb565b60405291825284820192508381018501918883111561180e57600080fd5b938501935b82851015611833576118248561174c565b84529385019392850192611813565b98975050505050505050565b60008083601f84011261185157600080fd5b50813567ffffffffffffffff81111561186957600080fd5b6020830191508360208260051b850101111561188457600080fd5b9250929050565b600080600080600080606087890312156118a457600080fd5b863567ffffffffffffffff808211156118bc57600080fd5b6118c88a838b0161183f565b909850965060208901359150808211156118e157600080fd5b6118ed8a838b0161183f565b9096509450604089013591508082111561190657600080fd5b5061191389828a0161183f565b979a9699509497509295939492505050565b6020808252825182820181905260009190848201906040850190845b8181101561197357835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101611941565b50909695505050505050565b60006020828403121561199157600080fd5b5035919050565b6000602082840312156119aa57600080fd5b81356116f48161172a565b600080600080604085870312156119cb57600080fd5b843567ffffffffffffffff808211156119e357600080fd5b6119ef8883890161183f565b90965094506020870135915080821115611a0857600080fd5b50611a158782880161183f565b95989497509550505050565b815160009082906020808601845b83811015611a6157815173ffffffffffffffffffffffffffffffffffffffff1685529382019390820190600101611a2f565b50929695505050505050565b60008183548391508460005260208060002060005b83811015611a6157815473ffffffffffffffffffffffffffffffffffffffff1685529382019360019182019101611a82565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611b4357611b43611ae3565b5060010190565b8082018082111561024357610243611ae3565b600082611b93577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b8181038181111561024357610243611ae3565b600060208284031215611bbd57600080fd5b815180151581146116f457600080fd5b60005b83811015611be8578181015183820152602001611bd0565b50506000910152565b60008251611c03818460208701611bcd565b9190910192915050565b6020815260008251806020840152611c2c816040850160208701611bcd565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea2646970667358221220ea0ba6d346429e433d6d194e7028bcc781574e569ec14ab43eb7717a6043f61364736f6c63430008110033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xBC JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x89CD7A7B GT PUSH2 0x74 JUMPI DUP1 PUSH4 0xC3666C36 GT PUSH2 0x4E JUMPI DUP1 PUSH4 0xC3666C36 EQ PUSH2 0x1CF JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1EF JUMPI DUP1 PUSH4 0xF7BA94BD EQ PUSH2 0x20F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x89CD7A7B EQ PUSH2 0x153 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x175 JUMPI DUP1 PUSH4 0xADDDC767 EQ PUSH2 0x1AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x55161913 GT PUSH2 0xA5 JUMPI DUP1 PUSH4 0x55161913 EQ PUSH2 0x118 JUMPI DUP1 PUSH4 0x73C8A958 EQ PUSH2 0x120 JUMPI DUP1 PUSH4 0x77D17DB2 EQ PUSH2 0x140 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xC1 JUMPI DUP1 PUSH4 0x27BD8FF1 EQ PUSH2 0xF6 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE1 PUSH2 0xDC CALLDATASIZE PUSH1 0x4 PUSH2 0x16B2 JUMP JUMPDEST PUSH2 0x22F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x102 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x116 PUSH2 0x111 CALLDATASIZE PUSH1 0x4 PUSH2 0x175C JUMP JUMPDEST PUSH2 0x249 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x116 PUSH2 0x429 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x116 PUSH2 0x13B CALLDATASIZE PUSH1 0x4 PUSH2 0x188B JUMP JUMPDEST PUSH2 0x53D JUMP JUMPDEST PUSH2 0x116 PUSH2 0x14E CALLDATASIZE PUSH1 0x4 PUSH2 0x175C JUMP JUMPDEST PUSH2 0x668 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x15F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x168 PUSH2 0x7F1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xED SWAP2 SWAP1 PUSH2 0x1925 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x181 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18A PUSH2 0x860 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xED JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18A PUSH2 0x1CA CALLDATASIZE PUSH1 0x4 PUSH2 0x197F JUMP JUMPDEST PUSH2 0x88C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x116 PUSH2 0x1EA CALLDATASIZE PUSH1 0x4 PUSH2 0x188B JUMP JUMPDEST PUSH2 0x8C3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x116 PUSH2 0x20A CALLDATASIZE PUSH1 0x4 PUSH2 0x1998 JUMP JUMPDEST PUSH2 0xA66 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x21B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x116 PUSH2 0x22A CALLDATASIZE PUSH1 0x4 PUSH2 0x19B5 JUMP JUMPDEST PUSH2 0xA7D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x243 DUP3 PUSH2 0x23D PUSH2 0xC54 JUMP JUMPDEST SWAP1 PUSH2 0xD8E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x251 PUSH2 0x860 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2EA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616C6C6572206973206E6F74206F776E657200000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH2 0x2F8 SWAP2 SWAP1 PUSH2 0x1A21 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 PUSH1 0x40 MLOAD PUSH2 0x30F SWAP2 SWAP1 PUSH2 0x1A6D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB DUP2 KECCAK256 SWAP1 PUSH32 0x6D86FA282077CBB7E8DFB1E46D681667447B404489DB833611F44AC272A3D64E SWAP1 PUSH1 0x0 SWAP1 LOG3 DUP1 MLOAD PUSH2 0x352 SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x1613 JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST PUSH1 0x0 SLOAD DUP2 LT ISZERO PUSH2 0x425 JUMPI PUSH1 0x0 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x373 JUMPI PUSH2 0x373 PUSH2 0x1AB4 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 KECCAK256 ADD SLOAD DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP2 PUSH1 0x1 SWAP2 DUP2 SWAP1 DUP6 SWAP1 DUP2 LT PUSH2 0x3AE JUMPI PUSH2 0x3AE PUSH2 0x1AB4 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP2 SWAP1 SWAP2 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND DUP5 MSTORE SWAP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP3 SWAP1 SWAP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 PUSH2 0x41D DUP2 PUSH2 0x1B12 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x356 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x492 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F206761732070756D70730000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2E1 JUMP JUMPDEST CALLVALUE PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x4A4 SWAP2 SWAP1 PUSH2 0x1B4A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP1 SLOAD PUSH2 0x4B7 SWAP1 CALLVALUE PUSH2 0x1B5D JUMP JUMPDEST SWAP1 POP PUSH2 0x2710 DUP2 GT PUSH2 0x4C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x0 SLOAD DUP2 LT ISZERO PUSH2 0x425 JUMPI DUP2 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x4E6 SWAP2 SWAP1 PUSH2 0x1B98 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x52B PUSH1 0x0 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x503 JUMPI PUSH2 0x503 PUSH2 0x1AB4 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH2 0xE68 JUMP JUMPDEST DUP1 PUSH2 0x535 DUP2 PUSH2 0x1B12 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x4CA JUMP JUMPDEST PUSH2 0x550 CALLER JUMPDEST PUSH2 0x54A PUSH2 0xB69 JUMP JUMPDEST SWAP1 PUSH2 0xF61 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ DUP1 ISZERO PUSH2 0x55F JUMPI POP DUP1 DUP3 EQ JUMPDEST PUSH2 0x5C5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265636F766572793A20696E636F6E73697374656E7420617272617973000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2E1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x65E JUMPI PUSH2 0x656 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x5E4 JUMPI PUSH2 0x5E4 PUSH2 0x1AB4 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x5F9 SWAP2 SWAP1 PUSH2 0x1998 JUMP JUMPDEST DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x60B JUMPI PUSH2 0x60B PUSH2 0x1AB4 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x624 JUMPI PUSH2 0x624 PUSH2 0x1AB4 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x639 SWAP2 SWAP1 PUSH2 0x1998 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 SWAP1 PUSH2 0xFE4 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x5C8 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x6D1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F206761732070756D70730000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2E1 JUMP JUMPDEST CALLVALUE PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x6E3 SWAP2 SWAP1 PUSH2 0x1B4A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP DUP1 MLOAD PUSH1 0x2 SLOAD PUSH1 0x0 SWAP2 PUSH2 0x6F9 SWAP2 PUSH2 0x1B5D JUMP JUMPDEST SWAP1 POP PUSH8 0x16345785D8A0000 DUP2 GT PUSH2 0x792 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420656E6F7567682066756E647320666F7220616C6C2077616C6C657473 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x20746F2062652066696C6C656400000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2E1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x7EC JUMPI DUP2 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x7B0 SWAP2 SWAP1 PUSH2 0x1B98 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x7DA DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x7CC JUMPI PUSH2 0x7CC PUSH2 0x1AB4 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 PUSH2 0xE68 JUMP JUMPDEST DUP1 PUSH2 0x7E4 DUP2 PUSH2 0x1B12 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x795 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x856 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x82B JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x887 PUSH2 0x86D PUSH2 0xB69 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x89C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH2 0x8CC CALLER PUSH2 0x542 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ DUP1 ISZERO PUSH2 0x8DB JUMPI POP DUP1 DUP3 EQ JUMPDEST PUSH2 0x941 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265636F766572793A20696E636F6E73697374656E7420617272617973000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2E1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x65E JUMPI DUP6 DUP6 DUP3 DUP2 DUP2 LT PUSH2 0x95D JUMPI PUSH2 0x95D PUSH2 0x1AB4 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x972 SWAP2 SWAP1 PUSH2 0x1998 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD ADDRESS DUP11 DUP11 DUP6 DUP2 DUP2 LT PUSH2 0x9A0 JUMPI PUSH2 0x9A0 PUSH2 0x1AB4 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x9B5 SWAP2 SWAP1 PUSH2 0x1998 JUMP JUMPDEST DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0x9C7 JUMPI PUSH2 0x9C7 PUSH2 0x1AB4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP9 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP4 AND PUSH1 0x24 DUP6 ADD MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA43 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA57 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x944 JUMP JUMPDEST PUSH2 0xA7A CALLER DUP3 PUSH2 0xA73 PUSH2 0xB69 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1071 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xA86 CALLER PUSH2 0x542 JUMP JUMPDEST DUP3 DUP2 DUP2 EQ PUSH2 0xAF0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265636F766572793A20696E636F6E73697374656E7420617272617973000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2E1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0xB61 JUMPI PUSH2 0xB59 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0xB0F JUMPI PUSH2 0xB0F PUSH2 0x1AB4 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0xB28 JUMPI PUSH2 0xB28 PUSH2 0x1AB4 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xB3D SWAP2 SWAP1 PUSH2 0x1998 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x119E JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xAF3 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x243 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x1B98 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0xC1F JUMPI DUP2 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH2 0x425 PUSH32 0x7F5828D000000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH2 0xC4D PUSH2 0xC54 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xC82 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x243 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x1B98 JUMP JUMPDEST PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xD2A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E74657266616365446574656374696F6E3A2077726F6E672076616C756500 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2E1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xDDE JUMPI POP PUSH1 0x0 PUSH2 0x243 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xE2F JUMPI POP PUSH1 0x1 PUSH2 0x243 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 AND EQ PUSH2 0xF1E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x41646472657373206E6F742070617274206F6620746865204761732053746174 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x696F6E2000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2E1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 DUP3 ISZERO PUSH2 0x8FC MUL SWAP1 DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x7EC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x425 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E6572736869703A206E6F7420746865206F776E65720000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2E1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x7EC SWAP1 DUP5 SWAP1 PUSH2 0x12F8 JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x10F6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E6572736869703A206E6F7420746865206F776E65720000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2E1 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1198 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0x1208 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2E1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1262 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1267 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x7EC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20756E61626C6520746F2073656E642076616C75652C2072 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6563697069656E74206D61792068617665207265766572746564000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2E1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x135A DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1404 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x7EC JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1378 SWAP2 SWAP1 PUSH2 0x1BAB JUMP JUMPDEST PUSH2 0x7EC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2E1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1413 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x141B JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x14AD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2E1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x14D6 SWAP2 SWAP1 PUSH2 0x1BF1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1513 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1518 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1529 DUP8 DUP4 DUP4 DUP8 PUSH2 0x1534 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x15CA JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x15C3 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND EXTCODESIZE PUSH2 0x15C3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2E1 JUMP JUMPDEST POP DUP2 PUSH2 0x1413 JUMP JUMPDEST PUSH2 0x1413 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x15DF JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2E1 SWAP2 SWAP1 PUSH2 0x1C0D JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x168D JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x168D JUMPI DUP3 MLOAD DUP3 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND OR DUP3 SSTORE PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x1633 JUMP JUMPDEST POP PUSH2 0x1699 SWAP3 SWAP2 POP PUSH2 0x169D JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x1699 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x169E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x16F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xA7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x1757 DUP2 PUSH2 0x172A JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x176F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1787 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x179B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x17AD JUMPI PUSH2 0x17AD PUSH2 0x16FB JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0x17F0 JUMPI PUSH2 0x17F0 PUSH2 0x16FB JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP9 DUP4 GT ISZERO PUSH2 0x180E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x1833 JUMPI PUSH2 0x1824 DUP6 PUSH2 0x174C JUMP JUMPDEST DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP6 ADD SWAP3 PUSH2 0x1813 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1851 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1869 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1884 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x18A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x18BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x18C8 DUP11 DUP4 DUP12 ADD PUSH2 0x183F JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x18E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x18ED DUP11 DUP4 DUP12 ADD PUSH2 0x183F JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1906 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1913 DUP10 DUP3 DUP11 ADD PUSH2 0x183F JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1973 JUMPI DUP4 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1941 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1991 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x16F4 DUP2 PUSH2 0x172A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x19CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x19E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19EF DUP9 DUP4 DUP10 ADD PUSH2 0x183F JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1A08 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A15 DUP8 DUP3 DUP9 ADD PUSH2 0x183F JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x0 SWAP1 DUP3 SWAP1 PUSH1 0x20 DUP1 DUP7 ADD DUP5 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1A61 JUMPI DUP2 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 MSTORE SWAP4 DUP3 ADD SWAP4 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1A2F JUMP JUMPDEST POP SWAP3 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 SLOAD DUP4 SWAP2 POP DUP5 PUSH1 0x0 MSTORE PUSH1 0x20 DUP1 PUSH1 0x0 KECCAK256 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1A61 JUMPI DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 MSTORE SWAP4 DUP3 ADD SWAP4 PUSH1 0x1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x1A82 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x1B43 JUMPI PUSH2 0x1B43 PUSH2 0x1AE3 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x243 JUMPI PUSH2 0x243 PUSH2 0x1AE3 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1B93 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x243 JUMPI PUSH2 0x243 PUSH2 0x1AE3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1BBD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x16F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1BE8 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1BD0 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1C03 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1BCD JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1C2C DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1BCD JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEA SIGNEXTEND 0xA6 0xD3 CHAINID TIMESTAMP SWAP15 NUMBER RETURNDATASIZE PUSH14 0x194E7028BCC781574E569EC14AB4 RETURNDATACOPY 0xB7 PUSH18 0x7A6043F61364736F6C634300081100330000 ",
              "sourceMap": "638:2711:19:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;541:174:4;;;;;;;;;;-1:-1:-1;541:174:4;;;;;:::i;:::-;;:::i;:::-;;;516:14:21;;509:22;491:41;;479:2;464:18;541:174:4;;;;;;;;1958:256:19;;;;;;;;;;-1:-1:-1;1958:256:19;;;;;:::i;:::-;;:::i;:::-;;2333:340;;;:::i;2975:512:10:-;;;;;;;;;;-1:-1:-1;2975:512:10;;;;;:::i;:::-;;:::i;2679:431:19:-;;;;;;:::i;:::-;;:::i;2225:101::-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;709:129:1:-;;;;;;;;;;;;;:::i;:::-;;;4612:42:21;4600:55;;;4582:74;;4570:2;4555:18;709:129:1;4436:226:21;718:30:19;;;;;;;;;;-1:-1:-1;718:30:19;;;;;:::i;:::-;;:::i;4209:541:10:-;;;;;;;;;;-1:-1:-1;4209:541:10;;;;;:::i;:::-;;:::i;872:161:1:-;;;;;;;;;;-1:-1:-1;872:161:1;;;;;:::i;:::-;;:::i;1812:450:10:-;;;;;;;;;;-1:-1:-1;1812:450:10;;;;;:::i;:::-;;:::i;541:174:4:-;620:4;643:65;696:11;643:34;:32;:34::i;:::-;:52;;:65::i;:::-;636:72;541:174;-1:-1:-1;;541:174:4:o;1958:256:19:-;1150:7;:5;:7::i;:::-;1136:21;;:10;:21;;;1128:53;;;;;;;7455:2:21;1128:53:19;;;7437:21:21;7494:2;7474:18;;;7467:30;7533:21;7513:18;;;7506:49;7572:18;;1128:53:19;;;;;;;;;2066:11:::1;2047:31;;;;;;:::i;:::-;;;;;;;;2059:5;2047:31;;;;;;:::i;:::-;;::::0;;;;::::1;::::0;;;::::1;::::0;;;::::1;2088:19:::0;;::::1;::::0;:5:::1;::::0;:19:::1;::::0;::::1;::::0;::::1;:::i;:::-;;2123:6;2118:90;2137:5;:12:::0;2133:16;::::1;2118:90;;;2189:5;2195:1;2189:8;;;;;;;;:::i;:::-;;::::0;;;::::1;::::0;;::::1;::::0;2177;;2189::::1;::::0;;::::1;::::0;;;;;2183:1;;2177:8;::::1;;;;;:::i;:::-;;::::0;;;::::1;::::0;;;;;;::::1;::::0;::::1;::::0;;::::1;2170:16:::0;;;;::::1;::::0;;;;;;;;;;:27;;;::::1;::::0;;;::::1;::::0;;;::::1;::::0;;2151:3;::::1;::::0;::::1;:::i;:::-;;;;2118:90;;;;1958:256:::0;:::o;2333:340::-;1309:1;1294:12;1286:41;;;;;;;9630:2:21;1286:41:19;;;9612:21:21;9669:2;9649:18;;;9642:30;9708:14;9688:18;;;9681:42;9740:18;;1286:41:19;9428:336:21;1286:41:19;2403:9:::1;2388:11;;:24;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;2422:20:19::1;2457:12:::0;;2445:24:::1;::::0;:9:::1;:24;:::i;:::-;2422:47;;2502:5;2487:12;:20;2479:29;;;::::0;::::1;;2523:6;2518:149;2537:5;:12:::0;2533:16;::::1;2518:149;;;2585:12;2570:11;;:27;;;;;;;:::i;:::-;;;;;;;;2624:32;2633:5;2639:1;2633:8;;;;;;;;:::i;:::-;;::::0;;;::::1;::::0;;;::::1;::::0;::::1;;2643:12:::0;2624:8:::1;:32::i;:::-;2551:3:::0;::::1;::::0;::::1;:::i;:::-;;;;2518:149;;2975:512:10::0;3108:70;719:10:17;3165:12:10;3108:33;:31;:33::i;:::-;:56;;:70::i;:::-;3205:8;3238:23;;;:51;;;;-1:-1:-1;3265:24:10;;;3238:51;3230:93;;;;;;;10513:2:21;3230:93:10;;;10495:21:21;10552:2;10532:18;;;10525:30;10591:31;10571:18;;;10564:59;10640:18;;3230:93:10;10311:353:21;3230:93:10;3362:9;3357:114;3378:6;3373:1;:11;3357:114;;3409:47;3432:8;;3441:1;3432:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;3445:7;;3453:1;3445:10;;;;;;;:::i;:::-;;;;;;;3409:6;;3416:1;3409:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:22;;;:47;:22;:47::i;:::-;3386:3;;3357:114;;;;3098:389;2975:512;;;;;;:::o;2679:431:19:-;1309:1;1294:12;1286:41;;;;;;;9630:2:21;1286:41:19;;;9612:21:21;9669:2;9649:18;;;9642:30;9708:14;9688:18;;;9681:42;9740:18;;1286:41:19;9428:336:21;1286:41:19;2779:9:::1;2764:11;;:24;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;2835:12:19;;2821:11:::1;::::0;2798:20:::1;::::0;2821:26:::1;::::0;::::1;:::i;:::-;2798:49;;2889:18;2874:12;:33;2866:91;;;::::0;::::1;::::0;;11145:2:21;2866:91:19::1;::::0;::::1;11127:21:21::0;11184:2;11164:18;;;11157:30;11223:34;11203:18;;;11196:62;11294:15;11274:18;;;11267:43;11327:19;;2866:91:19::1;10943:409:21::0;2866:91:19::1;2973:6;2968:136;2987:5;:12;2983:1;:16;2968:136;;;3035:12;3020:11;;:27;;;;;;;:::i;:::-;;;;;;;;3061:32;3070:5;3076:1;3070:8;;;;;;;;:::i;:::-;;;;;;;3080:12;3061:8;:32::i;:::-;3001:3:::0;::::1;::::0;::::1;:::i;:::-;;;;2968:136;;;;2754:356;2679:431:::0;:::o;2225:101::-;2271:24;2314:5;2307:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2225:101;:::o;709:129:1:-;764:7;790:41;:33;:31;:33::i;:::-;3352:15:3;;;;3256:118;790:41:1;783:48;;709:129;:::o;718:30:19:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;718:30:19;:::o;4209:541:10:-;4348:70;719:10:17;4405:12:10;640:96:17;4348:70:10;4445:8;4478:26;;;:55;;;;-1:-1:-1;4508:25:10;;;4478:55;4470:97;;;;;;;10513:2:21;4470:97:10;;;10495:21:21;10552:2;10532:18;;;10525:30;10591:31;10571:18;;;10564:59;10640:18;;4470:97:10;10311:353:21;4470:97:10;4606:9;4601:133;4622:6;4617:1;:11;4601:133;;4653:9;;4663:1;4653:12;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:25;;;4687:4;4694:8;;4703:1;4694:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;4707:8;;4716:1;4707:11;;;;;;;:::i;:::-;4653:66;;;;;;;;;;11844:42:21;11913:15;;;4653:66:10;;;11895:34:21;11965:15;;;;11945:18;;;11938:43;-1:-1:-1;4707:11:10;;;;;;11997:18:21;;;11990:34;11807:18;;4653:66:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4630:3;;;;;4601:133;;872:161:1;951:75;719:10:17;1017:8:1;951:33;:31;:33::i;:::-;:51;:75;:51;:75::i;:::-;872:161;:::o;1812:450:10:-;1924:70;719:10:17;1981:12:10;640:96:17;1924:70:10;2021:8;2054:24;;;2046:66;;;;;;;10513:2:21;2046:66:10;;;10495:21:21;10552:2;10532:18;;;10525:30;10591:31;10571:18;;;10564:59;10640:18;;2046:66:10;10311:353:21;2046:66:10;2151:9;2146:100;2167:6;2162:1;:11;2146:100;;2198:33;2220:7;;2228:1;2220:10;;;;;;;:::i;:::-;;;;;;;2198:8;;2207:1;2198:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:21;;;;:33::i;:::-;2175:3;;2146:100;;;;1914:348;1812:450;;;;:::o;3707:174:3:-;3748:16;;601:71;671:1;609:58;601:71;:::i;1332:341::-;1420:26;;;;1416:152;;1462:30;;;;;;;;;;;;1511:46;;-1:-1:-1;;1511:46:3;;-1:-1:-1;;1511:46:3;1416:152;1577:89;1634:25;1661:4;1577:34;:32;:34::i;:::-;:56;:89;:56;:89::i;1613:174:6:-;1654:16;;287:79;365:1;295:66;287:79;:::i;670:246::-;782:35;797:20;782:35;;;774:79;;;;;;;12505:2:21;774:79:6;;;12487:21:21;12544:2;12524:18;;;12517:30;12583:33;12563:18;;;12556:61;12634:18;;774:79:6;12303:355:21;774:79:6;863:34;;;;;:21;:34;;;;;;;;;;;;:46;;;;;;;;;;;;;670:246::o;1267:340::-;1355:14;1385:35;1400:20;1385:35;;;1381:78;;-1:-1:-1;1443:5:6;1436:12;;1381:78;1472:40;;;;;1468:82;;-1:-1:-1;1535:4:6;1528:11;;1468:82;-1:-1:-1;1566:34:6;;:21;:34;;;;;;;;;;;;;;;1267:340::o;3120:222:19:-;3213:36;;;;:20;;;;:6;:20;;;;;;;;;:36;3205:85;;;;;;;12865:2:21;3205:85:19;;;12847:21:21;12904:2;12884:18;;;12877:30;12943:34;12923:18;;;12916:62;13014:6;12994:18;;;12987:34;13038:19;;3205:85:19;12663:400:21;3205:85:19;3300:35;;:21;;;;:35;;;;;3322:12;;3300:35;;;;3322:12;3300:21;:35;;;;;;;;;;;;;;;;;;;3540:161:3;3650:15;;;3639:26;;;3650:15;;3639:26;3631:63;;;;;;;13270:2:21;3631:63:3;;;13252:21:21;13309:2;13289:18;;;13282:30;13348:26;13328:18;;;13321:54;13392:18;;3631:63:3;13068:348:21;763:205:15;902:58;;;13625:42:21;13613:55;;902:58:15;;;13595:74:21;13685:18;;;;13678:34;;;902:58:15;;;;;;;;;;13568:18:21;;;;902:58:15;;;;;;;;;;925:23;902:58;;;875:86;;895:5;;875:19;:86::i;2760:369:3:-;2882:15;;;;;;;2915:23;;;;2907:60;;;;;;;13270:2:21;2907:60:3;;;13252:21:21;13309:2;13289:18;;;13282:30;13348:26;13328:18;;;13321:54;13392:18;;2907:60:3;13068:348:21;2907:60:3;2998:8;2981:25;;:13;:25;;;2977:146;;3022:26;;;;;;;;;;;;;3067:45;;;;;;;;-1:-1:-1;;3067:45:3;2977:146;2848:281;2760:369;;;:::o;2412:312:16:-;2526:6;2501:21;:31;;2493:73;;;;;;;13925:2:21;2493:73:16;;;13907:21:21;13964:2;13944:18;;;13937:30;14003:31;13983:18;;;13976:59;14052:18;;2493:73:16;13723:353:21;2493:73:16;2578:12;2596:9;:14;;2618:6;2596:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2577:52;;;2647:7;2639:78;;;;;;;14493:2:21;2639:78:16;;;14475:21:21;14532:2;14512:18;;;14505:30;14571:34;14551:18;;;14544:62;14642:28;14622:18;;;14615:56;14688:19;;2639:78:16;14291:422:21;3747:706:15;4166:23;4192:69;4220:4;4192:69;;;;;;;;;;;;;;;;;4200:5;4192:27;;;;:69;;;;;:::i;:::-;4275:17;;4166:95;;-1:-1:-1;4275:21:15;4271:176;;4370:10;4359:30;;;;;;;;;;;;:::i;:::-;4351:85;;;;;;;15202:2:21;4351:85:15;;;15184:21:21;15241:2;15221:18;;;15214:30;15280:34;15260:18;;;15253:62;15351:12;15331:18;;;15324:40;15381:19;;4351:85:15;15000:406:21;3873:223:16;4006:12;4037:52;4059:6;4067:4;4073:1;4076:12;4037:21;:52::i;:::-;4030:59;3873:223;-1:-1:-1;;;;3873:223:16:o;4960:446::-;5125:12;5182:5;5157:21;:30;;5149:81;;;;;;;15613:2:21;5149:81:16;;;15595:21:21;15652:2;15632:18;;;15625:30;15691:34;15671:18;;;15664:62;15762:8;15742:18;;;15735:36;15788:19;;5149:81:16;15411:402:21;5149:81:16;5241:12;5255:23;5282:6;:11;;5301:5;5308:4;5282:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5240:73;;;;5330:69;5357:6;5365:7;5374:10;5386:12;5330:26;:69::i;:::-;5323:76;4960:446;-1:-1:-1;;;;;;;4960:446:16:o;7466:628::-;7646:12;7674:7;7670:418;;;7701:10;:17;7722:1;7701:22;7697:286;;1465:19;;;;7908:60;;;;;;;16567:2:21;7908:60:16;;;16549:21:21;16606:2;16586:18;;;16579:30;16645:31;16625:18;;;16618:59;16694:18;;7908:60:16;16365:353:21;7908:60:16;-1:-1:-1;8003:10:16;7996:17;;7670:418;8044:33;8052:10;8064:12;8775:17;;:21;8771:379;;9003:10;8997:17;9059:15;9046:10;9042:2;9038:19;9031:44;8771:379;9126:12;9119:20;;;;;;;;;;;:::i;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:332:21;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;199:117;335:5;14:332;-1:-1:-1;;;14:332:21:o;543:184::-;595:77;592:1;585:88;692:4;689:1;682:15;716:4;713:1;706:15;732:162;826:42;819:5;815:54;808:5;805:65;795:93;;884:1;881;874:12;899:150;975:20;;1004:39;975:20;1004:39;:::i;:::-;899:150;;;:::o;1054:1196::-;1146:6;1177:2;1220;1208:9;1199:7;1195:23;1191:32;1188:52;;;1236:1;1233;1226:12;1188:52;1276:9;1263:23;1305:18;1346:2;1338:6;1335:14;1332:34;;;1362:1;1359;1352:12;1332:34;1400:6;1389:9;1385:22;1375:32;;1445:7;1438:4;1434:2;1430:13;1426:27;1416:55;;1467:1;1464;1457:12;1416:55;1503:2;1490:16;1525:2;1521;1518:10;1515:36;;;1531:18;;:::i;:::-;1577:2;1574:1;1570:10;1609:2;1603:9;1668:66;1663:2;1659;1655:11;1651:84;1643:6;1639:97;1786:6;1774:10;1771:22;1766:2;1754:10;1751:18;1748:46;1745:72;;;1797:18;;:::i;:::-;1833:2;1826:22;1883:18;;;1917:15;;;;-1:-1:-1;1959:11:21;;;1955:20;;;1987:19;;;1984:39;;;2019:1;2016;2009:12;1984:39;2043:11;;;;2063:156;2079:6;2074:3;2071:15;2063:156;;;2145:31;2172:3;2145:31;:::i;:::-;2133:44;;2096:12;;;;2197;;;;2063:156;;;2238:6;1054:1196;-1:-1:-1;;;;;;;;1054:1196:21:o;2255:367::-;2318:8;2328:6;2382:3;2375:4;2367:6;2363:17;2359:27;2349:55;;2400:1;2397;2390:12;2349:55;-1:-1:-1;2423:20:21;;2466:18;2455:30;;2452:50;;;2498:1;2495;2488:12;2452:50;2535:4;2527:6;2523:17;2511:29;;2595:3;2588:4;2578:6;2575:1;2571:14;2563:6;2559:27;2555:38;2552:47;2549:67;;;2612:1;2609;2602:12;2549:67;2255:367;;;;;:::o;2627:1102::-;2799:6;2807;2815;2823;2831;2839;2892:2;2880:9;2871:7;2867:23;2863:32;2860:52;;;2908:1;2905;2898:12;2860:52;2948:9;2935:23;2977:18;3018:2;3010:6;3007:14;3004:34;;;3034:1;3031;3024:12;3004:34;3073:70;3135:7;3126:6;3115:9;3111:22;3073:70;:::i;:::-;3162:8;;-1:-1:-1;3047:96:21;-1:-1:-1;3250:2:21;3235:18;;3222:32;;-1:-1:-1;3266:16:21;;;3263:36;;;3295:1;3292;3285:12;3263:36;3334:72;3398:7;3387:8;3376:9;3372:24;3334:72;:::i;:::-;3425:8;;-1:-1:-1;3308:98:21;-1:-1:-1;3513:2:21;3498:18;;3485:32;;-1:-1:-1;3529:16:21;;;3526:36;;;3558:1;3555;3548:12;3526:36;;3597:72;3661:7;3650:8;3639:9;3635:24;3597:72;:::i;:::-;2627:1102;;;;-1:-1:-1;2627:1102:21;;-1:-1:-1;2627:1102:21;;3688:8;;2627:1102;-1:-1:-1;;;2627:1102:21:o;3734:697::-;3921:2;3973:21;;;4043:13;;3946:18;;;4065:22;;;3892:4;;3921:2;4144:15;;;;4118:2;4103:18;;;3892:4;4187:218;4201:6;4198:1;4195:13;4187:218;;;4266:13;;4281:42;4262:62;4250:75;;4380:15;;;;4345:12;;;;4223:1;4216:9;4187:218;;;-1:-1:-1;4422:3:21;;3734:697;-1:-1:-1;;;;;;3734:697:21:o;4667:180::-;4726:6;4779:2;4767:9;4758:7;4754:23;4750:32;4747:52;;;4795:1;4792;4785:12;4747:52;-1:-1:-1;4818:23:21;;4667:180;-1:-1:-1;4667:180:21:o;6207:255::-;6266:6;6319:2;6307:9;6298:7;6294:23;6290:32;6287:52;;;6335:1;6332;6325:12;6287:52;6374:9;6361:23;6393:39;6426:5;6393:39;:::i;6467:781::-;6597:6;6605;6613;6621;6674:2;6662:9;6653:7;6649:23;6645:32;6642:52;;;6690:1;6687;6680:12;6642:52;6730:9;6717:23;6759:18;6800:2;6792:6;6789:14;6786:34;;;6816:1;6813;6806:12;6786:34;6855:70;6917:7;6908:6;6897:9;6893:22;6855:70;:::i;:::-;6944:8;;-1:-1:-1;6829:96:21;-1:-1:-1;7032:2:21;7017:18;;7004:32;;-1:-1:-1;7048:16:21;;;7045:36;;;7077:1;7074;7067:12;7045:36;;7116:72;7180:7;7169:8;7158:9;7154:24;7116:72;:::i;:::-;6467:781;;;;-1:-1:-1;7207:8:21;-1:-1:-1;;;;6467:781:21:o;7601:608::-;7835:13;;7778:3;;7809;;7888:4;7915:15;;;7778:3;7958:224;7972:6;7969:1;7966:13;7958:224;;;8039:13;;8054:42;8035:62;8021:77;;8120:14;;;;8157:15;;;;7994:1;7987:9;7958:224;;;-1:-1:-1;8198:5:21;;7601:608;-1:-1:-1;;;;;;7601:608:21:o;8214:631::-;8388:3;8419;8451:6;8445:13;8476:3;8467:12;;8498:6;8495:1;8488:17;8524:4;8564:2;8561:1;8551:16;8585:1;8595:223;8609:6;8606:1;8603:13;8595:223;;;8676:13;;8691:42;8672:62;8658:77;;8757:14;;;;8806:1;8794:14;;;;8624:9;8595:223;;8850:184;8902:77;8899:1;8892:88;8999:4;8996:1;8989:15;9023:4;9020:1;9013:15;9039:184;9091:77;9088:1;9081:88;9188:4;9185:1;9178:15;9212:4;9209:1;9202:15;9228:195;9267:3;9298:66;9291:5;9288:77;9285:103;;9368:18;;:::i;:::-;-1:-1:-1;9415:1:21;9404:13;;9228:195::o;9769:125::-;9834:9;;;9855:10;;;9852:36;;;9868:18;;:::i;9899:274::-;9939:1;9965;9955:189;;10000:77;9997:1;9990:88;10101:4;10098:1;10091:15;10129:4;10126:1;10119:15;9955:189;-1:-1:-1;10158:9:21;;9899:274::o;10178:128::-;10245:9;;;10266:11;;;10263:37;;;10280:18;;:::i;14718:277::-;14785:6;14838:2;14826:9;14817:7;14813:23;14809:32;14806:52;;;14854:1;14851;14844:12;14806:52;14886:9;14880:16;14939:5;14932:13;14925:21;14918:5;14915:32;14905:60;;14961:1;14958;14951:12;15818:250;15903:1;15913:113;15927:6;15924:1;15921:13;15913:113;;;16003:11;;;15997:18;15984:11;;;15977:39;15949:2;15942:10;15913:113;;;-1:-1:-1;;16060:1:21;16042:16;;16035:27;15818:250::o;16073:287::-;16202:3;16240:6;16234:13;16256:66;16315:6;16310:3;16303:4;16295:6;16291:17;16256:66;:::i;:::-;16338:16;;;;;16073:287;-1:-1:-1;;16073:287:21:o;16723:455::-;16872:2;16861:9;16854:21;16835:4;16904:6;16898:13;16947:6;16942:2;16931:9;16927:18;16920:34;16963:79;17035:6;17030:2;17019:9;17015:18;17010:2;17002:6;16998:15;16963:79;:::i;:::-;17094:2;17082:15;17099:66;17078:88;17063:104;;;;17169:2;17059:113;;16723:455;-1:-1:-1;;16723:455:21:o"
            },
            "gasEstimates": {
              "creation": { "codeDepositCost": "1463200", "executionCost": "infinite", "totalCost": "infinite" },
              "external": {
                "charge()": "infinite",
                "charge(address[])": "infinite",
                "getGasPumps()": "infinite",
                "owner()": "infinite",
                "pumps(uint256)": "4657",
                "recoverERC20s(address[],address[],uint256[])": "infinite",
                "recoverERC721s(address[],address[],uint256[])": "infinite",
                "recoverETH(address[],uint256[])": "infinite",
                "setGasPumps(address[])": "infinite",
                "supportsInterface(bytes4)": "infinite",
                "transferOwnership(address)": "infinite"
              },
              "internal": { "withdraw(address payable,uint256)": "infinite" }
            },
            "methodIdentifiers": {
              "charge()": "55161913",
              "charge(address[])": "77d17db2",
              "getGasPumps()": "89cd7a7b",
              "owner()": "8da5cb5b",
              "pumps(uint256)": "adddc767",
              "recoverERC20s(address[],address[],uint256[])": "73c8a958",
              "recoverERC721s(address[],address[],uint256[])": "c3666c36",
              "recoverETH(address[],uint256[])": "f7ba94bd",
              "setGasPumps(address[])": "27bd8ff1",
              "supportsInterface(bytes4)": "01ffc9a7",
              "transferOwnership(address)": "f2fde38b"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"gasPumps\",\"type\":\"address[]\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address payable[]\",\"name\":\"oldGasPumps\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"address payable[]\",\"name\":\"newGasPumps\",\"type\":\"address[]\"}],\"name\":\"GasPumpsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"charge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"charge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGasPumps\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pumps\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC721[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"newGasPumps\",\"type\":\"address[]\"}],\"name\":\"setGasPumps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"recoverERC20s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\",\"tokens\":\"the list of ERC20 token addresses.\"}},\"recoverERC721s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"contracts\":\"the list of ERC721 contract addresses.\",\"tokenIds\":\"the list of token ids to transfer.\"}},\"recoverETH(address[],uint256[])\":{\"details\":\"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"recoverERC20s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverERC721s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverETH(address[],uint256[])\":{\"notice\":\"Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GasStation.sol\":\"OpenCampusGasStation\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x7c8f90c1f72ccdd900c212f4d0067907c906e4a64856f1b67fee7f7ec13e1f74\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is Context, IERC173 {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual override returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual override {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xd408d65cc5a0377e5310695c67400dfbd397d6537398d384a70f09b3bfdf8262\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8c069442d3de596ee13824f700ef4d640e1429aeaa6b82bfd919f177c656fb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xef423b77e65093f86e7f7ffc35e41f7008304976a7334bb3f9049db69d43eae9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {TokenRecoveryBase} from \\\"./base/TokenRecoveryBase.sol\\\";\\nimport {ContractOwnership} from \\\"./../access/ContractOwnership.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract TokenRecovery is TokenRecoveryBase, ContractOwnership {\\n\\n}\\n\",\"keccak256\":\"0x573429048b4d0f019904aec1f120b8c9b5e64a028ede705eff43942ad0aec46d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\ncontract TokenRecoveryBase is Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        require(length == amounts.length, \\\"Recovery: inconsistent arrays\\\");\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                accounts[i].sendValue(amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        require(length == tokens.length && length == amounts.length, \\\"Recovery: inconsistent arrays\\\");\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                tokens[i].safeTransfer(accounts[i], amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        require(length == contracts.length && length == tokenIds.length, \\\"Recovery: inconsistent arrays\\\");\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                contracts[i].transferFrom(address(this), accounts[i], tokenIds[i]);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd26d7268e7cdfc11150ec6ffb1f3552b541f65972012e2ecacaa9a58c4bf4152\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0x1b9d3522fab7ad81b4757fa0ce919f4320f08249546b3e3bd79da7cf12d55cee\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/GasStation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\n// [\\\"0x9551CaF0Ef97CA91a3FAc1fB8c7D83041cFf8EC5\\\",\\\"0x31d2CbD0fee68a2Ec6454f064f7c16bA1e1B7BBa\\\",\\\"0x964A2Bc59E73a2C793c3FEAC51Bba1Ea6A1B3C99\\\"]\\n// [\\\"0x78731D3Ca6b7E34aC0F824c42a7cC18A495cabaB\\\",\\\"0xdD870fA1b7C4700F2BD7f44238821C26f7392148\\\", \\\"0x583031D1113aD414F02576BD6afaBfb302140225\\\", \\\"0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2\\\",\\\"0x4B20993Bc481177ec7E8f571ceCaE8A9e22C02db\\\"]\\n\\n\\nimport {TokenRecovery} from \\\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\\\";\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\n\\n\\ncontract OpenCampusGasStation  is TokenRecovery {\\n    \\n    //address private owner;\\n    address payable[] public pumps;\\n    mapping(address => address payable) isPump;\\n    uint total_value;\\n    \\n    \\n    // event for EVM logging\\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\\n    event GasPumpsSet(address payable[] indexed oldGasPumps, address payable[] indexed newGasPumps);\\n    \\n    \\n    // modifier to check if the caller is owner\\n    \\n    modifier isOwner() {\\n        require(msg.sender == owner(), \\\"Caller is not owner\\\");\\n        _;\\n    }\\n\\n    // modifier to check if there are gas pumps\\n    modifier hasGasPumps() {\\n        require(pumps.length > 0, \\\"No gas pumps\\\");\\n        _;\\n    }\\n    \\n    constructor(address payable[] memory gasPumps) ContractOwnership(msg.sender) payable {\\n        //owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\\n        //emit OwnerSet(address(0), owner);\\n        setGasPumps(gasPumps);\\n\\n        total_value = msg.value;  // msg.value is the ethers of the transaction\\n    }\\n    /*\\n    function setOwner(address newOwner) public isOwner {\\n        emit OwnerSet(owner, newOwner);\\n        owner = newOwner; \\n    }\\n    \\n    function getOwner() external view returns (address) {\\n        return owner;\\n    }\\n    */\\n\\n    \\n    function setGasPumps(address payable[] memory newGasPumps) public isOwner {\\n        emit GasPumpsSet(pumps, newGasPumps);\\n        pumps = newGasPumps; \\n        for (uint i=0; i < pumps.length; i++) {\\n            isPump[pumps[i]] = pumps[i];\\n        }\\n    }\\n    \\n\\n    function getGasPumps() external view returns (address payable[] memory) {\\n        return pumps;\\n    }\\n\\n\\n    function charge() payable public hasGasPumps {\\n        total_value += msg.value;\\n        uint256 pricePerPump = msg.value / pumps.length;\\n        require(pricePerPump > 10000);\\n        for (uint i=0; i < pumps.length; i++) {\\n            total_value -= pricePerPump;\\n            \\n            withdraw(pumps[i], pricePerPump);\\n        }\\n    }\\n\\n    function charge(address payable[] memory addrs) payable public hasGasPumps {\\n        total_value += msg.value;\\n        uint256 pricePerPump = total_value / addrs.length;\\n        \\n        require(pricePerPump > 100000000000000000, \\\"Not enough funds for all wallets to be filled\\\");\\n\\n        for (uint i=0; i < addrs.length; i++) {\\n            total_value -= pricePerPump;\\n            withdraw(addrs[i], pricePerPump);\\n        }\\n    }\\n    \\n    function withdraw(address payable receiverAddr, uint receiverAmnt) private {\\n        require(isPump[receiverAddr] == receiverAddr, \\\"Address not part of the Gas Station \\\");\\n        receiverAddr.transfer(receiverAmnt);\\n    }\\n    \\n}\",\"keccak256\":\"0x43341e6975d075bb5c4dbd04b1da8b2286c5ee5f4594cbb5a777c98996bae3b8\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [
              {
                "astId": 1640,
                "contract": "contracts/GasStation.sol:OpenCampusGasStation",
                "label": "pumps",
                "offset": 0,
                "slot": "0",
                "type": "t_array(t_address_payable)dyn_storage"
              },
              {
                "astId": 1644,
                "contract": "contracts/GasStation.sol:OpenCampusGasStation",
                "label": "isPump",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_address,t_address_payable)"
              },
              {
                "astId": 1646,
                "contract": "contracts/GasStation.sol:OpenCampusGasStation",
                "label": "total_value",
                "offset": 0,
                "slot": "2",
                "type": "t_uint256"
              }
            ],
            "types": {
              "t_address": { "encoding": "inplace", "label": "address", "numberOfBytes": "20" },
              "t_address_payable": { "encoding": "inplace", "label": "address payable", "numberOfBytes": "20" },
              "t_array(t_address_payable)dyn_storage": {
                "base": "t_address_payable",
                "encoding": "dynamic_array",
                "label": "address payable[]",
                "numberOfBytes": "32"
              },
              "t_mapping(t_address,t_address_payable)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => address payable)",
                "numberOfBytes": "32",
                "value": "t_address_payable"
              },
              "t_uint256": { "encoding": "inplace", "label": "uint256", "numberOfBytes": "32" }
            }
          },
          "userdoc": {
            "events": {
              "OwnershipTransferred(address,address)": { "notice": "Emitted when the contract ownership changes." }
            },
            "kind": "user",
            "methods": {
              "owner()": { "notice": "Gets the address of the contract owner." },
              "recoverERC20s(address[],address[],uint256[])": {
                "notice": "Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts."
              },
              "recoverERC721s(address[],address[],uint256[])": {
                "notice": "Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts."
              },
              "recoverETH(address[],uint256[])": {
                "notice": "Extract ETH tokens which were accidentally sent to the contract to a list of accounts."
              },
              "supportsInterface(bytes4)": { "notice": "Returns whether this contract implements a given interface." },
              "transferOwnership(address)": { "notice": "Sets the address of the new contract owner." }
            },
            "version": 1
          }
        }
      },
      "contracts/OpenCampusGasStationMock.sol": {
        "OpenCampusGasStationMock": {
          "abi": [
            {
              "inputs": [{ "internalType": "address payable[]", "name": "gasPumps", "type": "address[]" }],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                { "indexed": true, "internalType": "address payable[]", "name": "oldGasPumps", "type": "address[]" },
                { "indexed": true, "internalType": "address payable[]", "name": "newGasPumps", "type": "address[]" }
              ],
              "name": "GasPumpsSet",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                { "indexed": true, "internalType": "address", "name": "oldOwner", "type": "address" },
                { "indexed": true, "internalType": "address", "name": "newOwner", "type": "address" }
              ],
              "name": "OwnerSet",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                { "indexed": true, "internalType": "address", "name": "previousOwner", "type": "address" },
                { "indexed": true, "internalType": "address", "name": "newOwner", "type": "address" }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "__msgData",
              "outputs": [{ "internalType": "bytes", "name": "", "type": "bytes" }],
              "stateMutability": "view",
              "type": "function"
            },
            { "inputs": [], "name": "charge", "outputs": [], "stateMutability": "payable", "type": "function" },
            {
              "inputs": [{ "internalType": "address payable[]", "name": "addrs", "type": "address[]" }],
              "name": "charge",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "getGasPumps",
              "outputs": [{ "internalType": "address payable[]", "name": "", "type": "address[]" }],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [{ "internalType": "address", "name": "", "type": "address" }],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }],
              "name": "pumps",
              "outputs": [{ "internalType": "address payable", "name": "", "type": "address" }],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                { "internalType": "address[]", "name": "accounts", "type": "address[]" },
                { "internalType": "contract IERC20[]", "name": "tokens", "type": "address[]" },
                { "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }
              ],
              "name": "recoverERC20s",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                { "internalType": "address[]", "name": "accounts", "type": "address[]" },
                { "internalType": "contract IERC721[]", "name": "contracts", "type": "address[]" },
                { "internalType": "uint256[]", "name": "tokenIds", "type": "uint256[]" }
              ],
              "name": "recoverERC721s",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                { "internalType": "address payable[]", "name": "accounts", "type": "address[]" },
                { "internalType": "uint256[]", "name": "amounts", "type": "uint256[]" }
              ],
              "name": "recoverETH",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [{ "internalType": "address payable[]", "name": "newGasPumps", "type": "address[]" }],
              "name": "setGasPumps",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [{ "internalType": "bytes4", "name": "interfaceId", "type": "bytes4" }],
              "name": "supportsInterface",
              "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [{ "internalType": "address", "name": "newOwner", "type": "address" }],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {
              "owner()": { "returns": { "_0": "The address of the contract owner." } },
              "recoverERC20s(address[],address[],uint256[])": {
                "details": "Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.",
                "params": {
                  "accounts": "the list of accounts to transfer the tokens to.",
                  "amounts": "the list of token amounts to transfer.",
                  "tokens": "the list of ERC20 token addresses."
                }
              },
              "recoverERC721s(address[],address[],uint256[])": {
                "details": "Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.",
                "params": {
                  "accounts": "the list of accounts to transfer the tokens to.",
                  "contracts": "the list of ERC721 contract addresses.",
                  "tokenIds": "the list of token ids to transfer."
                }
              },
              "recoverETH(address[],uint256[])": {
                "details": "Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.",
                "params": {
                  "accounts": "the list of accounts to transfer the tokens to.",
                  "amounts": "the list of token amounts to transfer."
                }
              },
              "supportsInterface(bytes4)": {
                "details": "Note: This function call must use less than 30 000 gas.",
                "params": { "interfaceId": "the interface identifier to test." },
                "returns": {
                  "_0": "True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."
                }
              },
              "transferOwnership(address)": {
                "details": "Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.",
                "params": {
                  "newOwner": "The address of the new contract owner. Using the zero address means renouncing ownership."
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "@_1705": { "entryPoint": null, "id": 1705, "parameterSlots": 1, "returnSlots": 0 },
                "@_1900": { "entryPoint": null, "id": 1900, "parameterSlots": 1, "returnSlots": 0 },
                "@_31": { "entryPoint": null, "id": 31, "parameterSlots": 1, "returnSlots": 0 },
                "@constructorInit_200": { "entryPoint": 178, "id": 200, "parameterSlots": 2, "returnSlots": 0 },
                "@layout_306": { "entryPoint": 124, "id": 306, "parameterSlots": 0, "returnSlots": 1 },
                "@layout_448": { "entryPoint": 718, "id": 448, "parameterSlots": 0, "returnSlots": 1 },
                "@owner_276": { "entryPoint": 956, "id": 276, "parameterSlots": 1, "returnSlots": 1 },
                "@owner_63": { "entryPoint": 907, "id": 63, "parameterSlots": 0, "returnSlots": 1 },
                "@setGasPumps_1746": { "entryPoint": 325, "id": 1746, "parameterSlots": 1, "returnSlots": 0 },
                "@setSupportedInterface_402": { "entryPoint": 766, "id": 402, "parameterSlots": 3, "returnSlots": 0 },
                "abi_decode_address_payable_fromMemory": {
                  "entryPoint": 1120,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_array$_t_address_payable_$dyn_memory_ptr_fromMemory": {
                  "entryPoint": 1149,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_array$_t_address_payable_$dyn_memory_ptr__to_t_array$_t_address_payable_$dyn_memory_ptr__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 1403,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_array$_t_address_payable_$dyn_storage__to_t_array$_t_address_payable_$dyn_memory_ptr__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 1468,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_2d10247a65709fdb3c0696b0ed760a0c246e12f8c496efb56291dd2fe3b0275d__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "checked_sub_t_uint256": { "entryPoint": 1381, "id": null, "parameterSlots": 2, "returnSlots": 1 },
                "increment_t_uint256": { "entryPoint": 1550, "id": null, "parameterSlots": 1, "returnSlots": 1 },
                "panic_error_0x11": { "entryPoint": 1359, "id": null, "parameterSlots": 0, "returnSlots": 0 },
                "panic_error_0x32": { "entryPoint": 1528, "id": null, "parameterSlots": 0, "returnSlots": 0 },
                "panic_error_0x41": { "entryPoint": 1098, "id": null, "parameterSlots": 0, "returnSlots": 0 }
              },
              "generatedSources": [
                {
                  "ast": {
                    "nodeType": "YulBlock",
                    "src": "0:3931:21",
                    "statements": [
                      { "nodeType": "YulBlock", "src": "6:3:21", "statements": [] },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "46:95:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "63:1:21",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "70:3:21",
                                        "type": "",
                                        "value": "224"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "75:10:21",
                                        "type": "",
                                        "value": "0x4e487b71"
                                      }
                                    ],
                                    "functionName": { "name": "shl", "nodeType": "YulIdentifier", "src": "66:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "66:20:21"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "56:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "56:31:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "56:31:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "103:1:21",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "106:4:21",
                                    "type": "",
                                    "value": "0x41"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "96:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "96:15:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "96:15:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "127:1:21",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "130:4:21",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": { "name": "revert", "nodeType": "YulIdentifier", "src": "120:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "120:15:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "120:15:21"
                            }
                          ]
                        },
                        "name": "panic_error_0x41",
                        "nodeType": "YulFunctionDefinition",
                        "src": "14:127:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "214:117:21",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "224:22:21",
                              "value": {
                                "arguments": [{ "name": "offset", "nodeType": "YulIdentifier", "src": "239:6:21" }],
                                "functionName": { "name": "mload", "nodeType": "YulIdentifier", "src": "233:5:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "233:13:21"
                              },
                              "variableNames": [{ "name": "value", "nodeType": "YulIdentifier", "src": "224:5:21" }]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "309:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "318:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "321:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "311:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "311:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "311:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "value", "nodeType": "YulIdentifier", "src": "268:5:21" },
                                      {
                                        "arguments": [
                                          { "name": "value", "nodeType": "YulIdentifier", "src": "279:5:21" },
                                          {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "294:3:21",
                                                    "type": "",
                                                    "value": "160"
                                                  },
                                                  {
                                                    "kind": "number",
                                                    "nodeType": "YulLiteral",
                                                    "src": "299:1:21",
                                                    "type": "",
                                                    "value": "1"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "shl",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "290:3:21"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "290:11:21"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "303:1:21",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sub",
                                              "nodeType": "YulIdentifier",
                                              "src": "286:3:21"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "286:19:21"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "275:3:21"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "275:31:21"
                                      }
                                    ],
                                    "functionName": { "name": "eq", "nodeType": "YulIdentifier", "src": "265:2:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "265:42:21"
                                  }
                                ],
                                "functionName": { "name": "iszero", "nodeType": "YulIdentifier", "src": "258:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "258:50:21"
                              },
                              "nodeType": "YulIf",
                              "src": "255:70:21"
                            }
                          ]
                        },
                        "name": "abi_decode_address_payable_fromMemory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [{ "name": "offset", "nodeType": "YulTypedName", "src": "193:6:21", "type": "" }],
                        "returnVariables": [
                          { "name": "value", "nodeType": "YulTypedName", "src": "204:5:21", "type": "" }
                        ],
                        "src": "146:185:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "450:1031:21",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "460:12:21",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "470:2:21",
                                "type": "",
                                "value": "32"
                              },
                              "variables": [{ "name": "_1", "nodeType": "YulTypedName", "src": "464:2:21", "type": "" }]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "517:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "526:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "529:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "519:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "519:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "519:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "492:7:21" },
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "501:9:21" }
                                    ],
                                    "functionName": { "name": "sub", "nodeType": "YulIdentifier", "src": "488:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "488:23:21"
                                  },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "513:2:21" }
                                ],
                                "functionName": { "name": "slt", "nodeType": "YulIdentifier", "src": "484:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "484:32:21"
                              },
                              "nodeType": "YulIf",
                              "src": "481:52:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "542:30:21",
                              "value": {
                                "arguments": [{ "name": "headStart", "nodeType": "YulIdentifier", "src": "562:9:21" }],
                                "functionName": { "name": "mload", "nodeType": "YulIdentifier", "src": "556:5:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "556:16:21"
                              },
                              "variables": [
                                { "name": "offset", "nodeType": "YulTypedName", "src": "546:6:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "581:28:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "599:2:21",
                                        "type": "",
                                        "value": "64"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "603:1:21",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": { "name": "shl", "nodeType": "YulIdentifier", "src": "595:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "595:10:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "607:1:21",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": { "name": "sub", "nodeType": "YulIdentifier", "src": "591:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "591:18:21"
                              },
                              "variables": [{ "name": "_2", "nodeType": "YulTypedName", "src": "585:2:21", "type": "" }]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "636:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "645:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "648:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "638:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "638:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "638:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "offset", "nodeType": "YulIdentifier", "src": "624:6:21" },
                                  { "name": "_2", "nodeType": "YulIdentifier", "src": "632:2:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "621:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "621:14:21"
                              },
                              "nodeType": "YulIf",
                              "src": "618:34:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "661:32:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "675:9:21" },
                                  { "name": "offset", "nodeType": "YulIdentifier", "src": "686:6:21" }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "671:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "671:22:21"
                              },
                              "variables": [{ "name": "_3", "nodeType": "YulTypedName", "src": "665:2:21", "type": "" }]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "741:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "750:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "753:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "743:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "743:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "743:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          { "name": "_3", "nodeType": "YulIdentifier", "src": "720:2:21" },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "724:4:21",
                                            "type": "",
                                            "value": "0x1f"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "716:3:21"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "716:13:21"
                                      },
                                      { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "731:7:21" }
                                    ],
                                    "functionName": { "name": "slt", "nodeType": "YulIdentifier", "src": "712:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "712:27:21"
                                  }
                                ],
                                "functionName": { "name": "iszero", "nodeType": "YulIdentifier", "src": "705:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "705:35:21"
                              },
                              "nodeType": "YulIf",
                              "src": "702:55:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "766:19:21",
                              "value": {
                                "arguments": [{ "name": "_3", "nodeType": "YulIdentifier", "src": "782:2:21" }],
                                "functionName": { "name": "mload", "nodeType": "YulIdentifier", "src": "776:5:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "776:9:21"
                              },
                              "variables": [{ "name": "_4", "nodeType": "YulTypedName", "src": "770:2:21", "type": "" }]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "808:22:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x41",
                                        "nodeType": "YulIdentifier",
                                        "src": "810:16:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "810:18:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "810:18:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "_4", "nodeType": "YulIdentifier", "src": "800:2:21" },
                                  { "name": "_2", "nodeType": "YulIdentifier", "src": "804:2:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "797:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "797:10:21"
                              },
                              "nodeType": "YulIf",
                              "src": "794:36:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "839:20:21",
                              "value": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "853:1:21",
                                    "type": "",
                                    "value": "5"
                                  },
                                  { "name": "_4", "nodeType": "YulIdentifier", "src": "856:2:21" }
                                ],
                                "functionName": { "name": "shl", "nodeType": "YulIdentifier", "src": "849:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "849:10:21"
                              },
                              "variables": [{ "name": "_5", "nodeType": "YulTypedName", "src": "843:2:21", "type": "" }]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "868:23:21",
                              "value": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "888:2:21",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": { "name": "mload", "nodeType": "YulIdentifier", "src": "882:5:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "882:9:21"
                              },
                              "variables": [
                                { "name": "memPtr", "nodeType": "YulTypedName", "src": "872:6:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "900:56:21",
                              "value": {
                                "arguments": [
                                  { "name": "memPtr", "nodeType": "YulIdentifier", "src": "922:6:21" },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          { "name": "_5", "nodeType": "YulIdentifier", "src": "938:2:21" },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "942:2:21",
                                            "type": "",
                                            "value": "63"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "934:3:21"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "934:11:21"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "951:2:21",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "947:3:21"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "947:7:21"
                                      }
                                    ],
                                    "functionName": { "name": "and", "nodeType": "YulIdentifier", "src": "930:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "930:25:21"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "918:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "918:38:21"
                              },
                              "variables": [
                                { "name": "newFreePtr", "nodeType": "YulTypedName", "src": "904:10:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1015:22:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x41",
                                        "nodeType": "YulIdentifier",
                                        "src": "1017:16:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1017:18:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1017:18:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "newFreePtr", "nodeType": "YulIdentifier", "src": "974:10:21" },
                                      { "name": "_2", "nodeType": "YulIdentifier", "src": "986:2:21" }
                                    ],
                                    "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "971:2:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "971:18:21"
                                  },
                                  {
                                    "arguments": [
                                      { "name": "newFreePtr", "nodeType": "YulIdentifier", "src": "994:10:21" },
                                      { "name": "memPtr", "nodeType": "YulIdentifier", "src": "1006:6:21" }
                                    ],
                                    "functionName": { "name": "lt", "nodeType": "YulIdentifier", "src": "991:2:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "991:22:21"
                                  }
                                ],
                                "functionName": { "name": "or", "nodeType": "YulIdentifier", "src": "968:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "968:46:21"
                              },
                              "nodeType": "YulIf",
                              "src": "965:72:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1053:2:21",
                                    "type": "",
                                    "value": "64"
                                  },
                                  { "name": "newFreePtr", "nodeType": "YulIdentifier", "src": "1057:10:21" }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "1046:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1046:22:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1046:22:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1077:17:21",
                              "value": { "name": "memPtr", "nodeType": "YulIdentifier", "src": "1088:6:21" },
                              "variables": [
                                { "name": "dst", "nodeType": "YulTypedName", "src": "1081:3:21", "type": "" }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "memPtr", "nodeType": "YulIdentifier", "src": "1110:6:21" },
                                  { "name": "_4", "nodeType": "YulIdentifier", "src": "1118:2:21" }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "1103:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1103:18:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1103:18:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1130:22:21",
                              "value": {
                                "arguments": [
                                  { "name": "memPtr", "nodeType": "YulIdentifier", "src": "1141:6:21" },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "1149:2:21" }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "1137:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1137:15:21"
                              },
                              "variableNames": [{ "name": "dst", "nodeType": "YulIdentifier", "src": "1130:3:21" }]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1161:34:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "_3", "nodeType": "YulIdentifier", "src": "1183:2:21" },
                                      { "name": "_5", "nodeType": "YulIdentifier", "src": "1187:2:21" }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "1179:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1179:11:21"
                                  },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "1192:2:21" }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "1175:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1175:20:21"
                              },
                              "variables": [
                                { "name": "srcEnd", "nodeType": "YulTypedName", "src": "1165:6:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1227:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1236:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1239:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "1229:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1229:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1229:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "srcEnd", "nodeType": "YulIdentifier", "src": "1210:6:21" },
                                  { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "1218:7:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "1207:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1207:19:21"
                              },
                              "nodeType": "YulIf",
                              "src": "1204:39:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1252:22:21",
                              "value": {
                                "arguments": [
                                  { "name": "_3", "nodeType": "YulIdentifier", "src": "1267:2:21" },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "1271:2:21" }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "1263:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1263:11:21"
                              },
                              "variables": [
                                { "name": "src", "nodeType": "YulTypedName", "src": "1256:3:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1339:111:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        { "name": "dst", "nodeType": "YulIdentifier", "src": "1360:3:21" },
                                        {
                                          "arguments": [
                                            { "name": "src", "nodeType": "YulIdentifier", "src": "1403:3:21" }
                                          ],
                                          "functionName": {
                                            "name": "abi_decode_address_payable_fromMemory",
                                            "nodeType": "YulIdentifier",
                                            "src": "1365:37:21"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "1365:42:21"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "1353:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1353:55:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1353:55:21"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "1421:19:21",
                                    "value": {
                                      "arguments": [
                                        { "name": "dst", "nodeType": "YulIdentifier", "src": "1432:3:21" },
                                        { "name": "_1", "nodeType": "YulIdentifier", "src": "1437:2:21" }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "1428:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1428:12:21"
                                    },
                                    "variableNames": [
                                      { "name": "dst", "nodeType": "YulIdentifier", "src": "1421:3:21" }
                                    ]
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "src", "nodeType": "YulIdentifier", "src": "1294:3:21" },
                                  { "name": "srcEnd", "nodeType": "YulIdentifier", "src": "1299:6:21" }
                                ],
                                "functionName": { "name": "lt", "nodeType": "YulIdentifier", "src": "1291:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1291:15:21"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "1307:23:21",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "1309:19:21",
                                    "value": {
                                      "arguments": [
                                        { "name": "src", "nodeType": "YulIdentifier", "src": "1320:3:21" },
                                        { "name": "_1", "nodeType": "YulIdentifier", "src": "1325:2:21" }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "1316:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1316:12:21"
                                    },
                                    "variableNames": [
                                      { "name": "src", "nodeType": "YulIdentifier", "src": "1309:3:21" }
                                    ]
                                  }
                                ]
                              },
                              "pre": { "nodeType": "YulBlock", "src": "1287:3:21", "statements": [] },
                              "src": "1283:167:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1459:16:21",
                              "value": { "name": "memPtr", "nodeType": "YulIdentifier", "src": "1469:6:21" },
                              "variableNames": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "1459:6:21" }]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_array$_t_address_payable_$dyn_memory_ptr_fromMemory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "416:9:21", "type": "" },
                          { "name": "dataEnd", "nodeType": "YulTypedName", "src": "427:7:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "value0", "nodeType": "YulTypedName", "src": "439:6:21", "type": "" }
                        ],
                        "src": "336:1145:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1518:95:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1535:1:21",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1542:3:21",
                                        "type": "",
                                        "value": "224"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1547:10:21",
                                        "type": "",
                                        "value": "0x4e487b71"
                                      }
                                    ],
                                    "functionName": { "name": "shl", "nodeType": "YulIdentifier", "src": "1538:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1538:20:21"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "1528:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1528:31:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1528:31:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1575:1:21",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1578:4:21",
                                    "type": "",
                                    "value": "0x11"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "1568:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1568:15:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1568:15:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1599:1:21",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1602:4:21",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": { "name": "revert", "nodeType": "YulIdentifier", "src": "1592:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1592:15:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1592:15:21"
                            }
                          ]
                        },
                        "name": "panic_error_0x11",
                        "nodeType": "YulFunctionDefinition",
                        "src": "1486:127:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1667:79:21",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "1677:17:21",
                              "value": {
                                "arguments": [
                                  { "name": "x", "nodeType": "YulIdentifier", "src": "1689:1:21" },
                                  { "name": "y", "nodeType": "YulIdentifier", "src": "1692:1:21" }
                                ],
                                "functionName": { "name": "sub", "nodeType": "YulIdentifier", "src": "1685:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1685:9:21"
                              },
                              "variableNames": [{ "name": "diff", "nodeType": "YulIdentifier", "src": "1677:4:21" }]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1718:22:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nodeType": "YulIdentifier",
                                        "src": "1720:16:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1720:18:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1720:18:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "diff", "nodeType": "YulIdentifier", "src": "1709:4:21" },
                                  { "name": "x", "nodeType": "YulIdentifier", "src": "1715:1:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "1706:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1706:11:21"
                              },
                              "nodeType": "YulIf",
                              "src": "1703:37:21"
                            }
                          ]
                        },
                        "name": "checked_sub_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "x", "nodeType": "YulTypedName", "src": "1649:1:21", "type": "" },
                          { "name": "y", "nodeType": "YulTypedName", "src": "1652:1:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "diff", "nodeType": "YulTypedName", "src": "1658:4:21", "type": "" }
                        ],
                        "src": "1618:128:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1925:169:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "1942:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1953:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "1935:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1935:21:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1935:21:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "1976:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1987:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "1972:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1972:18:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1992:2:21",
                                    "type": "",
                                    "value": "19"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "1965:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1965:30:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1965:30:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "2015:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2026:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "2011:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2011:18:21"
                                  },
                                  {
                                    "hexValue": "43616c6c6572206973206e6f74206f776e6572",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "2031:21:21",
                                    "type": "",
                                    "value": "Caller is not owner"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "2004:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "2004:49:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "2004:49:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2062:26:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "2074:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2085:2:21",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "2070:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "2070:18:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "2062:4:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_2d10247a65709fdb3c0696b0ed760a0c246e12f8c496efb56291dd2fe3b0275d__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "1902:9:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "1916:4:21", "type": "" }
                        ],
                        "src": "1751:343:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "2284:400:21",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2294:16:21",
                              "value": { "name": "pos", "nodeType": "YulIdentifier", "src": "2307:3:21" },
                              "variables": [
                                { "name": "pos_1", "nodeType": "YulTypedName", "src": "2298:5:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2319:27:21",
                              "value": {
                                "arguments": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "2339:6:21" }],
                                "functionName": { "name": "mload", "nodeType": "YulIdentifier", "src": "2333:5:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "2333:13:21"
                              },
                              "variables": [
                                { "name": "length", "nodeType": "YulTypedName", "src": "2323:6:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2355:12:21",
                              "value": { "name": "pos", "nodeType": "YulIdentifier", "src": "2364:3:21" },
                              "variableNames": [{ "name": "pos_1", "nodeType": "YulIdentifier", "src": "2355:5:21" }]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2376:14:21",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2386:4:21",
                                "type": "",
                                "value": "0x20"
                              },
                              "variables": [
                                { "name": "_1", "nodeType": "YulTypedName", "src": "2380:2:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2399:29:21",
                              "value": {
                                "arguments": [
                                  { "name": "value0", "nodeType": "YulIdentifier", "src": "2417:6:21" },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "2425:2:21" }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "2413:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "2413:15:21"
                              },
                              "variables": [
                                { "name": "srcPtr", "nodeType": "YulTypedName", "src": "2403:6:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2437:10:21",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2446:1:21",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [{ "name": "i", "nodeType": "YulTypedName", "src": "2441:1:21", "type": "" }]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2505:152:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        { "name": "pos_1", "nodeType": "YulIdentifier", "src": "2526:5:21" },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                { "name": "srcPtr", "nodeType": "YulIdentifier", "src": "2543:6:21" }
                                              ],
                                              "functionName": {
                                                "name": "mload",
                                                "nodeType": "YulIdentifier",
                                                "src": "2537:5:21"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "2537:13:21"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "arguments": [
                                                    {
                                                      "kind": "number",
                                                      "nodeType": "YulLiteral",
                                                      "src": "2560:3:21",
                                                      "type": "",
                                                      "value": "160"
                                                    },
                                                    {
                                                      "kind": "number",
                                                      "nodeType": "YulLiteral",
                                                      "src": "2565:1:21",
                                                      "type": "",
                                                      "value": "1"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "shl",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2556:3:21"
                                                  },
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "2556:11:21"
                                                },
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "2569:1:21",
                                                  "type": "",
                                                  "value": "1"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "sub",
                                                "nodeType": "YulIdentifier",
                                                "src": "2552:3:21"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "2552:19:21"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "and",
                                            "nodeType": "YulIdentifier",
                                            "src": "2533:3:21"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "2533:39:21"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "2519:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2519:54:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2519:54:21"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "2586:23:21",
                                    "value": {
                                      "arguments": [
                                        { "name": "pos_1", "nodeType": "YulIdentifier", "src": "2599:5:21" },
                                        { "name": "_1", "nodeType": "YulIdentifier", "src": "2606:2:21" }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "2595:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2595:14:21"
                                    },
                                    "variableNames": [
                                      { "name": "pos_1", "nodeType": "YulIdentifier", "src": "2586:5:21" }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "2622:25:21",
                                    "value": {
                                      "arguments": [
                                        { "name": "srcPtr", "nodeType": "YulIdentifier", "src": "2636:6:21" },
                                        { "name": "_1", "nodeType": "YulIdentifier", "src": "2644:2:21" }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "2632:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2632:15:21"
                                    },
                                    "variableNames": [
                                      { "name": "srcPtr", "nodeType": "YulIdentifier", "src": "2622:6:21" }
                                    ]
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "i", "nodeType": "YulIdentifier", "src": "2467:1:21" },
                                  { "name": "length", "nodeType": "YulIdentifier", "src": "2470:6:21" }
                                ],
                                "functionName": { "name": "lt", "nodeType": "YulIdentifier", "src": "2464:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "2464:13:21"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "2478:18:21",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "2480:14:21",
                                    "value": {
                                      "arguments": [
                                        { "name": "i", "nodeType": "YulIdentifier", "src": "2489:1:21" },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2492:1:21",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "2485:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2485:9:21"
                                    },
                                    "variableNames": [{ "name": "i", "nodeType": "YulIdentifier", "src": "2480:1:21" }]
                                  }
                                ]
                              },
                              "pre": { "nodeType": "YulBlock", "src": "2460:3:21", "statements": [] },
                              "src": "2456:201:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2666:12:21",
                              "value": { "name": "pos_1", "nodeType": "YulIdentifier", "src": "2673:5:21" },
                              "variableNames": [{ "name": "end", "nodeType": "YulIdentifier", "src": "2666:3:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_array$_t_address_payable_$dyn_memory_ptr__to_t_array$_t_address_payable_$dyn_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "pos", "nodeType": "YulTypedName", "src": "2260:3:21", "type": "" },
                          { "name": "value0", "nodeType": "YulTypedName", "src": "2265:6:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "end", "nodeType": "YulTypedName", "src": "2276:3:21", "type": "" }
                        ],
                        "src": "2099:585:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "2871:426:21",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2881:16:21",
                              "value": { "name": "pos", "nodeType": "YulIdentifier", "src": "2894:3:21" },
                              "variables": [
                                { "name": "pos_1", "nodeType": "YulTypedName", "src": "2885:5:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2906:27:21",
                              "value": {
                                "arguments": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "2926:6:21" }],
                                "functionName": { "name": "sload", "nodeType": "YulIdentifier", "src": "2920:5:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "2920:13:21"
                              },
                              "variables": [
                                { "name": "length", "nodeType": "YulTypedName", "src": "2910:6:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2942:12:21",
                              "value": { "name": "pos", "nodeType": "YulIdentifier", "src": "2951:3:21" },
                              "variableNames": [{ "name": "pos_1", "nodeType": "YulIdentifier", "src": "2942:5:21" }]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2970:1:21",
                                    "type": "",
                                    "value": "0"
                                  },
                                  { "name": "value0", "nodeType": "YulIdentifier", "src": "2973:6:21" }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "2963:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "2963:17:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "2963:17:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2989:14:21",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2999:4:21",
                                "type": "",
                                "value": "0x20"
                              },
                              "variables": [
                                { "name": "_1", "nodeType": "YulTypedName", "src": "2993:2:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3012:30:21",
                              "value": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3036:1:21",
                                    "type": "",
                                    "value": "0"
                                  },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "3039:2:21" }
                                ],
                                "functionName": {
                                  "name": "keccak256",
                                  "nodeType": "YulIdentifier",
                                  "src": "3026:9:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3026:16:21"
                              },
                              "variables": [
                                { "name": "srcPtr", "nodeType": "YulTypedName", "src": "3016:6:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3051:10:21",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3060:1:21",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [{ "name": "i", "nodeType": "YulTypedName", "src": "3055:1:21", "type": "" }]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "3119:151:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        { "name": "pos_1", "nodeType": "YulIdentifier", "src": "3140:5:21" },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                { "name": "srcPtr", "nodeType": "YulIdentifier", "src": "3157:6:21" }
                                              ],
                                              "functionName": {
                                                "name": "sload",
                                                "nodeType": "YulIdentifier",
                                                "src": "3151:5:21"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "3151:13:21"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "arguments": [
                                                    {
                                                      "kind": "number",
                                                      "nodeType": "YulLiteral",
                                                      "src": "3174:3:21",
                                                      "type": "",
                                                      "value": "160"
                                                    },
                                                    {
                                                      "kind": "number",
                                                      "nodeType": "YulLiteral",
                                                      "src": "3179:1:21",
                                                      "type": "",
                                                      "value": "1"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "shl",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "3170:3:21"
                                                  },
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "3170:11:21"
                                                },
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "3183:1:21",
                                                  "type": "",
                                                  "value": "1"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "sub",
                                                "nodeType": "YulIdentifier",
                                                "src": "3166:3:21"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "3166:19:21"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "and",
                                            "nodeType": "YulIdentifier",
                                            "src": "3147:3:21"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "3147:39:21"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "3133:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3133:54:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3133:54:21"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "3200:23:21",
                                    "value": {
                                      "arguments": [
                                        { "name": "pos_1", "nodeType": "YulIdentifier", "src": "3213:5:21" },
                                        { "name": "_1", "nodeType": "YulIdentifier", "src": "3220:2:21" }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "3209:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3209:14:21"
                                    },
                                    "variableNames": [
                                      { "name": "pos_1", "nodeType": "YulIdentifier", "src": "3200:5:21" }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "3236:24:21",
                                    "value": {
                                      "arguments": [
                                        { "name": "srcPtr", "nodeType": "YulIdentifier", "src": "3250:6:21" },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3258:1:21",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "3246:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3246:14:21"
                                    },
                                    "variableNames": [
                                      { "name": "srcPtr", "nodeType": "YulIdentifier", "src": "3236:6:21" }
                                    ]
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "i", "nodeType": "YulIdentifier", "src": "3081:1:21" },
                                  { "name": "length", "nodeType": "YulIdentifier", "src": "3084:6:21" }
                                ],
                                "functionName": { "name": "lt", "nodeType": "YulIdentifier", "src": "3078:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "3078:13:21"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "3092:18:21",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "3094:14:21",
                                    "value": {
                                      "arguments": [
                                        { "name": "i", "nodeType": "YulIdentifier", "src": "3103:1:21" },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3106:1:21",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "3099:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3099:9:21"
                                    },
                                    "variableNames": [{ "name": "i", "nodeType": "YulIdentifier", "src": "3094:1:21" }]
                                  }
                                ]
                              },
                              "pre": { "nodeType": "YulBlock", "src": "3074:3:21", "statements": [] },
                              "src": "3070:200:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "3279:12:21",
                              "value": { "name": "pos_1", "nodeType": "YulIdentifier", "src": "3286:5:21" },
                              "variableNames": [{ "name": "end", "nodeType": "YulIdentifier", "src": "3279:3:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_array$_t_address_payable_$dyn_storage__to_t_array$_t_address_payable_$dyn_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "pos", "nodeType": "YulTypedName", "src": "2847:3:21", "type": "" },
                          { "name": "value0", "nodeType": "YulTypedName", "src": "2852:6:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "end", "nodeType": "YulTypedName", "src": "2863:3:21", "type": "" }
                        ],
                        "src": "2689:608:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "3334:95:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3351:1:21",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3358:3:21",
                                        "type": "",
                                        "value": "224"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3363:10:21",
                                        "type": "",
                                        "value": "0x4e487b71"
                                      }
                                    ],
                                    "functionName": { "name": "shl", "nodeType": "YulIdentifier", "src": "3354:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3354:20:21"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "3344:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "3344:31:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3344:31:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3391:1:21",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3394:4:21",
                                    "type": "",
                                    "value": "0x32"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "3384:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "3384:15:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3384:15:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3415:1:21",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3418:4:21",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": { "name": "revert", "nodeType": "YulIdentifier", "src": "3408:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "3408:15:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3408:15:21"
                            }
                          ]
                        },
                        "name": "panic_error_0x32",
                        "nodeType": "YulFunctionDefinition",
                        "src": "3302:127:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "3481:88:21",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "3512:22:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nodeType": "YulIdentifier",
                                        "src": "3514:16:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3514:18:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3514:18:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "value", "nodeType": "YulIdentifier", "src": "3497:5:21" },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3508:1:21",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": { "name": "not", "nodeType": "YulIdentifier", "src": "3504:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3504:6:21"
                                  }
                                ],
                                "functionName": { "name": "eq", "nodeType": "YulIdentifier", "src": "3494:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "3494:17:21"
                              },
                              "nodeType": "YulIf",
                              "src": "3491:43:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "3543:20:21",
                              "value": {
                                "arguments": [
                                  { "name": "value", "nodeType": "YulIdentifier", "src": "3554:5:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3561:1:21",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "3550:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "3550:13:21"
                              },
                              "variableNames": [{ "name": "ret", "nodeType": "YulIdentifier", "src": "3543:3:21" }]
                            }
                          ]
                        },
                        "name": "increment_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [{ "name": "value", "nodeType": "YulTypedName", "src": "3463:5:21", "type": "" }],
                        "returnVariables": [
                          { "name": "ret", "nodeType": "YulTypedName", "src": "3473:3:21", "type": "" }
                        ],
                        "src": "3434:135:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "3748:181:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "3765:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3776:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "3758:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "3758:21:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3758:21:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "3799:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3810:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "3795:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3795:18:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3815:2:21",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "3788:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "3788:30:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3788:30:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "3838:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3849:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "3834:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3834:18:21"
                                  },
                                  {
                                    "hexValue": "496e74657266616365446574656374696f6e3a2077726f6e672076616c7565",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "3854:33:21",
                                    "type": "",
                                    "value": "InterfaceDetection: wrong value"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "3827:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "3827:61:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "3827:61:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "3897:26:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "3909:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3920:2:21",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "3905:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "3905:18:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "3897:4:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "3725:9:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "3739:4:21", "type": "" }
                        ],
                        "src": "3574:355:21"
                      }
                    ]
                  },
                  "contents": "{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_address_payable_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_address_payable_$dyn_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        let _1 := 32\n        if slt(sub(dataEnd, headStart), _1) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := mload(_3)\n        if gt(_4, _2) { panic_error_0x41() }\n        let _5 := shl(5, _4)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(_5, 63), not(31)))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        let dst := memPtr\n        mstore(memPtr, _4)\n        dst := add(memPtr, _1)\n        let srcEnd := add(add(_3, _5), _1)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_3, _1)\n        for { } lt(src, srcEnd) { src := add(src, _1) }\n        {\n            mstore(dst, abi_decode_address_payable_fromMemory(src))\n            dst := add(dst, _1)\n        }\n        value0 := memPtr\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_2d10247a65709fdb3c0696b0ed760a0c246e12f8c496efb56291dd2fe3b0275d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 19)\n        mstore(add(headStart, 64), \"Caller is not owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_array$_t_address_payable_$dyn_memory_ptr__to_t_array$_t_address_payable_$dyn_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let pos_1 := pos\n        let length := mload(value0)\n        pos_1 := pos\n        let _1 := 0x20\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos_1, and(mload(srcPtr), sub(shl(160, 1), 1)))\n            pos_1 := add(pos_1, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos_1\n    }\n    function abi_encode_tuple_packed_t_array$_t_address_payable_$dyn_storage__to_t_array$_t_address_payable_$dyn_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let pos_1 := pos\n        let length := sload(value0)\n        pos_1 := pos\n        mstore(0, value0)\n        let _1 := 0x20\n        let srcPtr := keccak256(0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos_1, and(sload(srcPtr), sub(shl(160, 1), 1)))\n            pos_1 := add(pos_1, _1)\n            srcPtr := add(srcPtr, 1)\n        }\n        end := pos_1\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"InterfaceDetection: wrong value\")\n        tail := add(headStart, 96)\n    }\n}",
                  "id": 21,
                  "language": "Yul",
                  "name": "#utility.yul"
                }
              ],
              "linkReferences": {},
              "object": "60806040523480156200001157600080fd5b50604051620023443803806200234483398101604081905262000034916200047d565b80336200006481620000506200007c60201b62000b921760201c565b620000b260201b62000bc01790919060201c565b50620000708162000145565b5050346002556200062a565b600080620000ac60017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd62000565565b92915050565b6001600160a01b03811615620001095781546001600160a01b0319166001600160a01b03821690811783556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b620001416307f5828d60e41b60016200012c620002ce60201b62000c7d1760201c565b620002fe60201b62000cab179092919060201c565b5050565b6200014f6200038b565b6001600160a01b0316336001600160a01b031614620001b55760405162461bcd60e51b815260206004820152601360248201527f43616c6c6572206973206e6f74206f776e65720000000000000000000000000060448201526064015b60405180910390fd5b80604051620001c591906200057b565b60405180910390206000604051620001de9190620005bc565b604051908190038120907f6d86fa282077cbb7e8dfb1e46d681667447b404489db833611f44ac272a3d64e90600090a3805162000223906000906020840190620003c9565b5060005b600054811015620001415760008181548110620002485762000248620005f8565b600091825260208220015481546001600160a01b0390911691600191819085908110620002795762000279620005f8565b6000918252602080832091909101546001600160a01b039081168452908301939093526040909101902080546001600160a01b0319169290911691909117905580620002c5816200060e565b91505062000227565b600080620000ac60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e62000565565b600160e01b6001600160e01b03198316016200035d5760405162461bcd60e51b815260206004820152601f60248201527f496e74657266616365446574656374696f6e3a2077726f6e672076616c7565006044820152606401620001ac565b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b6000620003b7620003a66200007c60201b62000b921760201c565b620003bc60201b620008961760201c565b905090565b546001600160a01b031690565b82805482825590600052602060002090810192821562000421579160200282015b828111156200042157825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620003ea565b506200042f92915062000433565b5090565b5b808211156200042f576000815560010162000434565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200047857600080fd5b919050565b600060208083850312156200049157600080fd5b82516001600160401b0380821115620004a957600080fd5b818501915085601f830112620004be57600080fd5b815181811115620004d357620004d36200044a565b8060051b604051601f19603f83011681018181108582111715620004fb57620004fb6200044a565b6040529182528482019250838101850191888311156200051a57600080fd5b938501935b828510156200054357620005338562000460565b845293850193928501926200051f565b98975050505050505050565b634e487b7160e01b600052601160045260246000fd5b81810381811115620000ac57620000ac6200054f565b815160009082906020808601845b83811015620005b05781516001600160a01b03168552938201939082019060010162000589565b50929695505050505050565b60008183548391508460005260208060002060005b83811015620005b05781546001600160a01b031685529382019360019182019101620005d1565b634e487b7160e01b600052603260045260246000fd5b6000600182016200062357620006236200054f565b5060010190565b611d0a806200063a6000396000f3fe6080604052600436106100c75760003560e01c806389cd7a7b11610074578063c3666c361161004e578063c3666c36146101f8578063f2fde38b14610218578063f7ba94bd1461023857600080fd5b806389cd7a7b1461017c5780638da5cb5b1461019e578063adddc767146101d857600080fd5b806355161913116100a5578063551619131461014157806373c8a9581461014957806377d17db21461016957600080fd5b806301ffc9a7146100cc57806327bd8ff11461010157806331e66e1e14610123575b600080fd5b3480156100d857600080fd5b506100ec6100e73660046116db565b610258565b60405190151581526020015b60405180910390f35b34801561010d57600080fd5b5061012161011c366004611785565b610272565b005b34801561012f57600080fd5b506000366040516100f8929190611868565b610121610452565b34801561015557600080fd5b50610121610164366004611901565b610566565b610121610177366004611785565b610691565b34801561018857600080fd5b5061019161081a565b6040516100f8919061199b565b3480156101aa57600080fd5b506101b3610889565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100f8565b3480156101e457600080fd5b506101b36101f33660046119f5565b6108b5565b34801561020457600080fd5b50610121610213366004611901565b6108ec565b34801561022457600080fd5b50610121610233366004611a0e565b610a8f565b34801561024457600080fd5b50610121610253366004611a2b565b610aa6565b600061026c82610266610c7d565b90610db7565b92915050565b61027a610889565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610313576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f43616c6c6572206973206e6f74206f776e65720000000000000000000000000060448201526064015b60405180910390fd5b806040516103219190611a97565b604051809103902060006040516103389190611ae3565b604051908190038120907f6d86fa282077cbb7e8dfb1e46d681667447b404489db833611f44ac272a3d64e90600090a3805161037b90600090602084019061163c565b5060005b60005481101561044e576000818154811061039c5761039c611b2a565b6000918252602082200154815473ffffffffffffffffffffffffffffffffffffffff909116916001918190859081106103d7576103d7611b2a565b60009182526020808320919091015473ffffffffffffffffffffffffffffffffffffffff9081168452908301939093526040909101902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016929091169190911790558061044681611b88565b91505061037f565b5050565b6000546104bb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f206761732070756d70730000000000000000000000000000000000000000604482015260640161030a565b34600260008282546104cd9190611bc0565b9091555050600080546104e09034611bd3565b905061271081116104f057600080fd5b60005b60005481101561044e57816002600082825461050f9190611c0e565b925050819055506105546000828154811061052c5761052c611b2a565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1683610e91565b8061055e81611b88565b9150506104f3565b610579335b610573610b92565b90610f8a565b84838114801561058857508082145b6105ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5265636f766572793a20696e636f6e73697374656e7420617272617973000000604482015260640161030a565b60005b8181146106875761067f88888381811061060d5761060d611b2a565b90506020020160208101906106229190611a0e565b85858481811061063457610634611b2a565b9050602002013588888581811061064d5761064d611b2a565b90506020020160208101906106629190611a0e565b73ffffffffffffffffffffffffffffffffffffffff16919061100d565b6001016105f1565b5050505050505050565b6000546106fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f206761732070756d70730000000000000000000000000000000000000000604482015260640161030a565b346002600082825461070c9190611bc0565b9091555050805160025460009161072291611bd3565b905067016345785d8a000081116107bb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f4e6f7420656e6f7567682066756e647320666f7220616c6c2077616c6c65747360448201527f20746f2062652066696c6c656400000000000000000000000000000000000000606482015260840161030a565b60005b82518110156108155781600260008282546107d99190611c0e565b925050819055506108038382815181106107f5576107f5611b2a565b602002602001015183610e91565b8061080d81611b88565b9150506107be565b505050565b6060600080548060200260200160405190810160405280929190818152602001828054801561087f57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610854575b5050505050905090565b60006108b0610896610b92565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b600081815481106108c557600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b6108f53361056b565b84838114801561090457508082145b61096a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5265636f766572793a20696e636f6e73697374656e7420617272617973000000604482015260640161030a565b60005b8181146106875785858281811061098657610986611b2a565b905060200201602081019061099b9190611a0e565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd308a8a858181106109c9576109c9611b2a565b90506020020160208101906109de9190611a0e565b8787868181106109f0576109f0611b2a565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b158015610a6c57600080fd5b505af1158015610a80573d6000803e3d6000fd5b5050505080600101905061096d565b610aa33382610a9c610b92565b919061109a565b50565b610aaf3361056b565b82818114610b19576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5265636f766572793a20696e636f6e73697374656e7420617272617973000000604482015260640161030a565b60005b818114610b8a57610b82848483818110610b3857610b38611b2a565b90506020020135878784818110610b5157610b51611b2a565b9050602002016020810190610b669190611a0e565b73ffffffffffffffffffffffffffffffffffffffff16906111c7565b600101610b1c565b505050505050565b60008061026c60017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd611c0e565b73ffffffffffffffffffffffffffffffffffffffff811615610c485781547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff821690811783556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b61044e7f7f5828d0000000000000000000000000000000000000000000000000000000006001610c76610c7d565b9190610cab565b60008061026c60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e611c0e565b7c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610d53576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f496e74657266616365446574656374696f6e3a2077726f6e672076616c756500604482015260640161030a565b7fffffffff00000000000000000000000000000000000000000000000000000000919091166000908152602092909252604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610e075750600061026c565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610e585750600161026c565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b73ffffffffffffffffffffffffffffffffffffffff80831660008181526001602052604090205490911614610f47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f41646472657373206e6f742070617274206f662074686520476173205374617460448201527f696f6e2000000000000000000000000000000000000000000000000000000000606482015260840161030a565b60405173ffffffffffffffffffffffffffffffffffffffff83169082156108fc029083906000818181858888f19350505050158015610815573d6000803e3d6000fd5b815473ffffffffffffffffffffffffffffffffffffffff82811691161461044e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f776e6572736869703a206e6f7420746865206f776e65720000000000000000604482015260640161030a565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610815908490611321565b825473ffffffffffffffffffffffffffffffffffffffff908116908316811461111f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f776e6572736869703a206e6f7420746865206f776e65720000000000000000604482015260640161030a565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146111c15783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35b50505050565b80471015611231576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161030a565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d806000811461128b576040519150601f19603f3d011682016040523d82523d6000602084013e611290565b606091505b5050905080610815576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161030a565b6000611383826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661142d9092919063ffffffff16565b80519091501561081557808060200190518101906113a19190611c21565b610815576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161030a565b606061143c8484600085611444565b949350505050565b6060824710156114d6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161030a565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516114ff9190611c67565b60006040518083038185875af1925050503d806000811461153c576040519150601f19603f3d011682016040523d82523d6000602084013e611541565b606091505b50915091506115528783838761155d565b979650505050505050565b606083156115f35782516000036115ec5773ffffffffffffffffffffffffffffffffffffffff85163b6115ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161030a565b508161143c565b61143c83838151156116085781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030a9190611c83565b8280548282559060005260206000209081019282156116b6579160200282015b828111156116b657825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90911617825560209092019160019091019061165c565b506116c29291506116c6565b5090565b5b808211156116c257600081556001016116c7565b6000602082840312156116ed57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461171d57600080fd5b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610aa357600080fd5b803561178081611753565b919050565b6000602080838503121561179857600080fd5b823567ffffffffffffffff808211156117b057600080fd5b818501915085601f8301126117c457600080fd5b8135818111156117d6576117d6611724565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8301168101818110858211171561181957611819611724565b60405291825284820192508381018501918883111561183757600080fd5b938501935b8285101561185c5761184d85611775565b8452938501939285019261183c565b98975050505050505050565b60208152816020820152818360408301376000818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b60008083601f8401126118c757600080fd5b50813567ffffffffffffffff8111156118df57600080fd5b6020830191508360208260051b85010111156118fa57600080fd5b9250929050565b6000806000806000806060878903121561191a57600080fd5b863567ffffffffffffffff8082111561193257600080fd5b61193e8a838b016118b5565b9098509650602089013591508082111561195757600080fd5b6119638a838b016118b5565b9096509450604089013591508082111561197c57600080fd5b5061198989828a016118b5565b979a9699509497509295939492505050565b6020808252825182820181905260009190848201906040850190845b818110156119e957835173ffffffffffffffffffffffffffffffffffffffff16835292840192918401916001016119b7565b50909695505050505050565b600060208284031215611a0757600080fd5b5035919050565b600060208284031215611a2057600080fd5b813561171d81611753565b60008060008060408587031215611a4157600080fd5b843567ffffffffffffffff80821115611a5957600080fd5b611a65888389016118b5565b90965094506020870135915080821115611a7e57600080fd5b50611a8b878288016118b5565b95989497509550505050565b815160009082906020808601845b83811015611ad757815173ffffffffffffffffffffffffffffffffffffffff1685529382019390820190600101611aa5565b50929695505050505050565b60008183548391508460005260208060002060005b83811015611ad757815473ffffffffffffffffffffffffffffffffffffffff1685529382019360019182019101611af8565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611bb957611bb9611b59565b5060010190565b8082018082111561026c5761026c611b59565b600082611c09577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b8181038181111561026c5761026c611b59565b600060208284031215611c3357600080fd5b8151801515811461171d57600080fd5b60005b83811015611c5e578181015183820152602001611c46565b50506000910152565b60008251611c79818460208701611c43565b9190910192915050565b6020815260008251806020840152611ca2816040850160208701611c43565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea2646970667358221220368585375e0be594f51f637abbaee959972e633217936b6b24d9a9f90d7b1d5a64736f6c63430008110033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2344 CODESIZE SUB DUP1 PUSH3 0x2344 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x47D JUMP JUMPDEST DUP1 CALLER PUSH3 0x64 DUP2 PUSH3 0x50 PUSH3 0x7C PUSH1 0x20 SHL PUSH3 0xB92 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0xB2 PUSH1 0x20 SHL PUSH3 0xBC0 OR SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST POP PUSH3 0x70 DUP2 PUSH3 0x145 JUMP JUMPDEST POP POP CALLVALUE PUSH1 0x2 SSTORE PUSH3 0x62A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xAC PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH3 0x565 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH3 0x109 JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH3 0x141 PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH3 0x12C PUSH3 0x2CE PUSH1 0x20 SHL PUSH3 0xC7D OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x2FE PUSH1 0x20 SHL PUSH3 0xCAB OR SWAP1 SWAP3 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH3 0x14F PUSH3 0x38B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH3 0x1B5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616C6C6572206973206E6F74206F776E657200000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x1C5 SWAP2 SWAP1 PUSH3 0x57B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 PUSH1 0x40 MLOAD PUSH3 0x1DE SWAP2 SWAP1 PUSH3 0x5BC JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB DUP2 KECCAK256 SWAP1 PUSH32 0x6D86FA282077CBB7E8DFB1E46D681667447B404489DB833611F44AC272A3D64E SWAP1 PUSH1 0x0 SWAP1 LOG3 DUP1 MLOAD PUSH3 0x223 SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x3C9 JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST PUSH1 0x0 SLOAD DUP2 LT ISZERO PUSH3 0x141 JUMPI PUSH1 0x0 DUP2 DUP2 SLOAD DUP2 LT PUSH3 0x248 JUMPI PUSH3 0x248 PUSH3 0x5F8 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 KECCAK256 ADD SLOAD DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH1 0x1 SWAP2 DUP2 SWAP1 DUP6 SWAP1 DUP2 LT PUSH3 0x279 JUMPI PUSH3 0x279 PUSH3 0x5F8 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP2 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP5 MSTORE SWAP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP3 SWAP1 SWAP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 PUSH3 0x2C5 DUP2 PUSH3 0x60E JUMP JUMPDEST SWAP2 POP POP PUSH3 0x227 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xAC PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH3 0x565 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH3 0x35D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E74657266616365446574656374696F6E3A2077726F6E672076616C756500 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x1AC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH3 0x3B7 PUSH3 0x3A6 PUSH3 0x7C PUSH1 0x20 SHL PUSH3 0xB92 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x3BC PUSH1 0x20 SHL PUSH3 0x896 OR PUSH1 0x20 SHR JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH3 0x421 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x421 JUMPI DUP3 MLOAD DUP3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND OR DUP3 SSTORE PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH3 0x3EA JUMP JUMPDEST POP PUSH3 0x42F SWAP3 SWAP2 POP PUSH3 0x433 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x42F JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x434 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x478 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x491 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x4A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x4BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH3 0x4D3 JUMPI PUSH3 0x4D3 PUSH3 0x44A JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH1 0x1F NOT PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH3 0x4FB JUMPI PUSH3 0x4FB PUSH3 0x44A JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP9 DUP4 GT ISZERO PUSH3 0x51A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH3 0x543 JUMPI PUSH3 0x533 DUP6 PUSH3 0x460 JUMP JUMPDEST DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP6 ADD SWAP3 PUSH3 0x51F JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0xAC JUMPI PUSH3 0xAC PUSH3 0x54F JUMP JUMPDEST DUP2 MLOAD PUSH1 0x0 SWAP1 DUP3 SWAP1 PUSH1 0x20 DUP1 DUP7 ADD DUP5 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x5B0 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE SWAP4 DUP3 ADD SWAP4 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH3 0x589 JUMP JUMPDEST POP SWAP3 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 SLOAD DUP4 SWAP2 POP DUP5 PUSH1 0x0 MSTORE PUSH1 0x20 DUP1 PUSH1 0x0 KECCAK256 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x5B0 JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE SWAP4 DUP3 ADD SWAP4 PUSH1 0x1 SWAP2 DUP3 ADD SWAP2 ADD PUSH3 0x5D1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH3 0x623 JUMPI PUSH3 0x623 PUSH3 0x54F JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH2 0x1D0A DUP1 PUSH3 0x63A PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC7 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x89CD7A7B GT PUSH2 0x74 JUMPI DUP1 PUSH4 0xC3666C36 GT PUSH2 0x4E JUMPI DUP1 PUSH4 0xC3666C36 EQ PUSH2 0x1F8 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x218 JUMPI DUP1 PUSH4 0xF7BA94BD EQ PUSH2 0x238 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x89CD7A7B EQ PUSH2 0x17C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x19E JUMPI DUP1 PUSH4 0xADDDC767 EQ PUSH2 0x1D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x55161913 GT PUSH2 0xA5 JUMPI DUP1 PUSH4 0x55161913 EQ PUSH2 0x141 JUMPI DUP1 PUSH4 0x73C8A958 EQ PUSH2 0x149 JUMPI DUP1 PUSH4 0x77D17DB2 EQ PUSH2 0x169 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x27BD8FF1 EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x31E66E1E EQ PUSH2 0x123 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEC PUSH2 0xE7 CALLDATASIZE PUSH1 0x4 PUSH2 0x16DB JUMP JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x121 PUSH2 0x11C CALLDATASIZE PUSH1 0x4 PUSH2 0x1785 JUMP JUMPDEST PUSH2 0x272 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 CALLDATASIZE PUSH1 0x40 MLOAD PUSH2 0xF8 SWAP3 SWAP2 SWAP1 PUSH2 0x1868 JUMP JUMPDEST PUSH2 0x121 PUSH2 0x452 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x155 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x121 PUSH2 0x164 CALLDATASIZE PUSH1 0x4 PUSH2 0x1901 JUMP JUMPDEST PUSH2 0x566 JUMP JUMPDEST PUSH2 0x121 PUSH2 0x177 CALLDATASIZE PUSH1 0x4 PUSH2 0x1785 JUMP JUMPDEST PUSH2 0x691 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x188 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x191 PUSH2 0x81A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF8 SWAP2 SWAP1 PUSH2 0x199B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B3 PUSH2 0x889 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B3 PUSH2 0x1F3 CALLDATASIZE PUSH1 0x4 PUSH2 0x19F5 JUMP JUMPDEST PUSH2 0x8B5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x204 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x121 PUSH2 0x213 CALLDATASIZE PUSH1 0x4 PUSH2 0x1901 JUMP JUMPDEST PUSH2 0x8EC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x224 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x121 PUSH2 0x233 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A0E JUMP JUMPDEST PUSH2 0xA8F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x244 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x121 PUSH2 0x253 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A2B JUMP JUMPDEST PUSH2 0xAA6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26C DUP3 PUSH2 0x266 PUSH2 0xC7D JUMP JUMPDEST SWAP1 PUSH2 0xDB7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x27A PUSH2 0x889 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x313 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616C6C6572206973206E6F74206F776E657200000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH2 0x321 SWAP2 SWAP1 PUSH2 0x1A97 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 PUSH1 0x40 MLOAD PUSH2 0x338 SWAP2 SWAP1 PUSH2 0x1AE3 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB DUP2 KECCAK256 SWAP1 PUSH32 0x6D86FA282077CBB7E8DFB1E46D681667447B404489DB833611F44AC272A3D64E SWAP1 PUSH1 0x0 SWAP1 LOG3 DUP1 MLOAD PUSH2 0x37B SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x163C JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST PUSH1 0x0 SLOAD DUP2 LT ISZERO PUSH2 0x44E JUMPI PUSH1 0x0 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x39C JUMPI PUSH2 0x39C PUSH2 0x1B2A JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 KECCAK256 ADD SLOAD DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP2 PUSH1 0x1 SWAP2 DUP2 SWAP1 DUP6 SWAP1 DUP2 LT PUSH2 0x3D7 JUMPI PUSH2 0x3D7 PUSH2 0x1B2A JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP2 SWAP1 SWAP2 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND DUP5 MSTORE SWAP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP3 SWAP1 SWAP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 PUSH2 0x446 DUP2 PUSH2 0x1B88 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x37F JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x4BB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F206761732070756D70730000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x30A JUMP JUMPDEST CALLVALUE PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x4CD SWAP2 SWAP1 PUSH2 0x1BC0 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP1 SLOAD PUSH2 0x4E0 SWAP1 CALLVALUE PUSH2 0x1BD3 JUMP JUMPDEST SWAP1 POP PUSH2 0x2710 DUP2 GT PUSH2 0x4F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x0 SLOAD DUP2 LT ISZERO PUSH2 0x44E JUMPI DUP2 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x50F SWAP2 SWAP1 PUSH2 0x1C0E JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x554 PUSH1 0x0 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x52C JUMPI PUSH2 0x52C PUSH2 0x1B2A JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH2 0xE91 JUMP JUMPDEST DUP1 PUSH2 0x55E DUP2 PUSH2 0x1B88 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x4F3 JUMP JUMPDEST PUSH2 0x579 CALLER JUMPDEST PUSH2 0x573 PUSH2 0xB92 JUMP JUMPDEST SWAP1 PUSH2 0xF8A JUMP JUMPDEST DUP5 DUP4 DUP2 EQ DUP1 ISZERO PUSH2 0x588 JUMPI POP DUP1 DUP3 EQ JUMPDEST PUSH2 0x5EE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265636F766572793A20696E636F6E73697374656E7420617272617973000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x30A JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x687 JUMPI PUSH2 0x67F DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x60D JUMPI PUSH2 0x60D PUSH2 0x1B2A JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x622 SWAP2 SWAP1 PUSH2 0x1A0E JUMP JUMPDEST DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x634 JUMPI PUSH2 0x634 PUSH2 0x1B2A JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x64D JUMPI PUSH2 0x64D PUSH2 0x1B2A JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x662 SWAP2 SWAP1 PUSH2 0x1A0E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 SWAP1 PUSH2 0x100D JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x5F1 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x6FA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F206761732070756D70730000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x30A JUMP JUMPDEST CALLVALUE PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x70C SWAP2 SWAP1 PUSH2 0x1BC0 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP DUP1 MLOAD PUSH1 0x2 SLOAD PUSH1 0x0 SWAP2 PUSH2 0x722 SWAP2 PUSH2 0x1BD3 JUMP JUMPDEST SWAP1 POP PUSH8 0x16345785D8A0000 DUP2 GT PUSH2 0x7BB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420656E6F7567682066756E647320666F7220616C6C2077616C6C657473 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x20746F2062652066696C6C656400000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x30A JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x815 JUMPI DUP2 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x7D9 SWAP2 SWAP1 PUSH2 0x1C0E JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x803 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x7F5 JUMPI PUSH2 0x7F5 PUSH2 0x1B2A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 PUSH2 0xE91 JUMP JUMPDEST DUP1 PUSH2 0x80D DUP2 PUSH2 0x1B88 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x7BE JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x87F JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x854 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8B0 PUSH2 0x896 PUSH2 0xB92 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x8C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH2 0x8F5 CALLER PUSH2 0x56B JUMP JUMPDEST DUP5 DUP4 DUP2 EQ DUP1 ISZERO PUSH2 0x904 JUMPI POP DUP1 DUP3 EQ JUMPDEST PUSH2 0x96A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265636F766572793A20696E636F6E73697374656E7420617272617973000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x30A JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x687 JUMPI DUP6 DUP6 DUP3 DUP2 DUP2 LT PUSH2 0x986 JUMPI PUSH2 0x986 PUSH2 0x1B2A JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x99B SWAP2 SWAP1 PUSH2 0x1A0E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD ADDRESS DUP11 DUP11 DUP6 DUP2 DUP2 LT PUSH2 0x9C9 JUMPI PUSH2 0x9C9 PUSH2 0x1B2A JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x9DE SWAP2 SWAP1 PUSH2 0x1A0E JUMP JUMPDEST DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0x9F0 JUMPI PUSH2 0x9F0 PUSH2 0x1B2A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP9 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP4 AND PUSH1 0x24 DUP6 ADD MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA80 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x96D JUMP JUMPDEST PUSH2 0xAA3 CALLER DUP3 PUSH2 0xA9C PUSH2 0xB92 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x109A JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xAAF CALLER PUSH2 0x56B JUMP JUMPDEST DUP3 DUP2 DUP2 EQ PUSH2 0xB19 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265636F766572793A20696E636F6E73697374656E7420617272617973000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x30A JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0xB8A JUMPI PUSH2 0xB82 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0xB38 JUMPI PUSH2 0xB38 PUSH2 0x1B2A JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0xB51 JUMPI PUSH2 0xB51 PUSH2 0x1B2A JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xB66 SWAP2 SWAP1 PUSH2 0x1A0E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x11C7 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xB1C JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x26C PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x1C0E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0xC48 JUMPI DUP2 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH2 0x44E PUSH32 0x7F5828D000000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH2 0xC76 PUSH2 0xC7D JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xCAB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x26C PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x1C0E JUMP JUMPDEST PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xD53 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E74657266616365446574656374696F6E3A2077726F6E672076616C756500 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x30A JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xE07 JUMPI POP PUSH1 0x0 PUSH2 0x26C JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xE58 JUMPI POP PUSH1 0x1 PUSH2 0x26C JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 AND EQ PUSH2 0xF47 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x41646472657373206E6F742070617274206F6620746865204761732053746174 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x696F6E2000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x30A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 DUP3 ISZERO PUSH2 0x8FC MUL SWAP1 DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x815 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x44E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E6572736869703A206E6F7420746865206F776E65720000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x30A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x815 SWAP1 DUP5 SWAP1 PUSH2 0x1321 JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x111F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E6572736869703A206E6F7420746865206F776E65720000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x30A JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x11C1 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0x1231 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x30A JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x128B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1290 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x815 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20756E61626C6520746F2073656E642076616C75652C2072 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6563697069656E74206D61792068617665207265766572746564000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x30A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1383 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x142D SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x815 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x13A1 SWAP2 SWAP1 PUSH2 0x1C21 JUMP JUMPDEST PUSH2 0x815 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x30A JUMP JUMPDEST PUSH1 0x60 PUSH2 0x143C DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x1444 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x14D6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x30A JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x14FF SWAP2 SWAP1 PUSH2 0x1C67 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x153C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1541 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1552 DUP8 DUP4 DUP4 DUP8 PUSH2 0x155D JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x15F3 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x15EC JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND EXTCODESIZE PUSH2 0x15EC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x30A JUMP JUMPDEST POP DUP2 PUSH2 0x143C JUMP JUMPDEST PUSH2 0x143C DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x1608 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x30A SWAP2 SWAP1 PUSH2 0x1C83 JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x16B6 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x16B6 JUMPI DUP3 MLOAD DUP3 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND OR DUP3 SSTORE PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x165C JUMP JUMPDEST POP PUSH2 0x16C2 SWAP3 SWAP2 POP PUSH2 0x16C6 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x16C2 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x16C7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x171D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xAA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x1780 DUP2 PUSH2 0x1753 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1798 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x17B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x17C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x17D6 JUMPI PUSH2 0x17D6 PUSH2 0x1724 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0x1819 JUMPI PUSH2 0x1819 PUSH2 0x1724 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP9 DUP4 GT ISZERO PUSH2 0x1837 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x185C JUMPI PUSH2 0x184D DUP6 PUSH2 0x1775 JUMP JUMPDEST DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP6 ADD SWAP3 PUSH2 0x183C JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x40 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x18C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x18DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x18FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x191A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1932 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x193E DUP11 DUP4 DUP12 ADD PUSH2 0x18B5 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1957 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1963 DUP11 DUP4 DUP12 ADD PUSH2 0x18B5 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x197C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1989 DUP10 DUP3 DUP11 ADD PUSH2 0x18B5 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x19E9 JUMPI DUP4 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x19B7 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x171D DUP2 PUSH2 0x1753 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1A41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1A59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1A65 DUP9 DUP4 DUP10 ADD PUSH2 0x18B5 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1A7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A8B DUP8 DUP3 DUP9 ADD PUSH2 0x18B5 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x0 SWAP1 DUP3 SWAP1 PUSH1 0x20 DUP1 DUP7 ADD DUP5 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1AD7 JUMPI DUP2 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 MSTORE SWAP4 DUP3 ADD SWAP4 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1AA5 JUMP JUMPDEST POP SWAP3 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 SLOAD DUP4 SWAP2 POP DUP5 PUSH1 0x0 MSTORE PUSH1 0x20 DUP1 PUSH1 0x0 KECCAK256 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1AD7 JUMPI DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 MSTORE SWAP4 DUP3 ADD SWAP4 PUSH1 0x1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x1AF8 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x1BB9 JUMPI PUSH2 0x1BB9 PUSH2 0x1B59 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x26C JUMPI PUSH2 0x26C PUSH2 0x1B59 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1C09 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x26C JUMPI PUSH2 0x26C PUSH2 0x1B59 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x171D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1C5E JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1C46 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1C79 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1C43 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1CA2 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1C43 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATASIZE DUP6 DUP6 CALLDATACOPY 0x5E SIGNEXTEND 0xE5 SWAP5 CREATE2 0x1F PUSH4 0x7ABBAEE9 MSIZE SWAP8 0x2E PUSH4 0x3217936B PUSH12 0x24D9A9F90D7B1D5A64736F6C PUSH4 0x43000811 STOP CALLER ",
              "sourceMap": "287:234:20:-:0;;;333:86;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;407:8;1420:10:19;1007:63:0;1057:12;1007:33;:31;;;;;:33;;:::i;:::-;:49;;;;;;:63;;;;:::i;:::-;-1:-1:-1;1603:21:19::1;1615:8:::0;1603:11:::1;:21::i;:::-;-1:-1:-1::0;;1649:9:19::1;1635:11;:23:::0;287:234:20;;3707:174:3;3748:16;;601:71;671:1;609:58;601:71;:::i;:::-;593:80;3707:174;-1:-1:-1;;3707:174:3:o;1332:341::-;-1:-1:-1;;;;;1420:26:3;;;1416:152;;1462:30;;-1:-1:-1;;;;;;1462:30:3;-1:-1:-1;;;;;1462:30:3;;;;;;;1511:46;;-1:-1:-1;;1511:46:3;;-1:-1:-1;;1511:46:3;1416:152;1577:89;-1:-1:-1;;;1661:4:3;1577:34;:32;;;;;:34;;:::i;:::-;:56;;;;;;:89;;;;;:::i;:::-;1332:341;;:::o;1958:256:19:-;1150:7;:5;:7::i;:::-;-1:-1:-1;;;;;1136:21:19;:10;-1:-1:-1;;;;;1136:21:19;;1128:53;;;;-1:-1:-1;;;1128:53:19;;1953:2:21;1128:53:19;;;1935:21:21;1992:2;1972:18;;;1965:30;2031:21;2011:18;;;2004:49;2070:18;;1128:53:19;;;;;;;;;2066:11:::1;2047:31;;;;;;:::i;:::-;;;;;;;;2059:5;2047:31;;;;;;:::i;:::-;;::::0;;;;::::1;::::0;;;::::1;::::0;;;::::1;2088:19:::0;;::::1;::::0;:5:::1;::::0;:19:::1;::::0;::::1;::::0;::::1;:::i;:::-;;2123:6;2118:90;2137:5;:12:::0;2133:16;::::1;2118:90;;;2189:5;2195:1;2189:8;;;;;;;;:::i;:::-;;::::0;;;::::1;::::0;;::::1;::::0;2177;;-1:-1:-1;;;;;2189:8:19;;::::1;::::0;;;;;2183:1;;2177:8;::::1;;;;;:::i;:::-;;::::0;;;::::1;::::0;;;;;;::::1;::::0;-1:-1:-1;;;;;2177:8:19;;::::1;2170:16:::0;;;;::::1;::::0;;;;;;;;;;:27;;-1:-1:-1;;;;;;2170:27:19::1;::::0;;;::::1;::::0;;;::::1;::::0;;2151:3;::::1;::::0;::::1;:::i;:::-;;;;2118:90;;1613:174:6::0;1654:16;;287:79;365:1;295:66;287:79;:::i;670:246::-;-1:-1:-1;;;;;;;;;782:35:6;;;774:79;;;;-1:-1:-1;;;774:79:6;;3776:2:21;774:79:6;;;3758:21:21;3815:2;3795:18;;;3788:30;3854:33;3834:18;;;3827:61;3905:18;;774:79:6;3574:355:21;774:79:6;-1:-1:-1;;;;;;863:34:6;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;863:46:6;;;;;;;;;;670:246::o;709:129:1:-;764:7;790:41;:33;:31;;;;;:33;;:::i;:::-;:39;;;;;:41;;:::i;:::-;783:48;;709:129;:::o;3256:118:3:-;3352:15;-1:-1:-1;;;;;3352:15:3;;3256:118::o;287:234:20:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;287:234:20;-1:-1:-1;;;;;287:234:20;;;;;;;;;;;-1:-1:-1;287:234:20;;;;;;;-1:-1:-1;287:234:20;;;-1:-1:-1;287:234:20;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:127:21;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:185;233:13;;-1:-1:-1;;;;;275:31:21;;265:42;;255:70;;321:1;318;311:12;255:70;146:185;;;:::o;336:1145::-;439:6;470:2;513;501:9;492:7;488:23;484:32;481:52;;;529:1;526;519:12;481:52;556:16;;-1:-1:-1;;;;;621:14:21;;;618:34;;;648:1;645;638:12;618:34;686:6;675:9;671:22;661:32;;731:7;724:4;720:2;716:13;712:27;702:55;;753:1;750;743:12;702:55;782:2;776:9;804:2;800;797:10;794:36;;;810:18;;:::i;:::-;856:2;853:1;849:10;888:2;882:9;951:2;947:7;942:2;938;934:11;930:25;922:6;918:38;1006:6;994:10;991:22;986:2;974:10;971:18;968:46;965:72;;;1017:18;;:::i;:::-;1053:2;1046:22;1103:18;;;1137:15;;;;-1:-1:-1;1179:11:21;;;1175:20;;;1207:19;;;1204:39;;;1239:1;1236;1229:12;1204:39;1263:11;;;;1283:167;1299:6;1294:3;1291:15;1283:167;;;1365:42;1403:3;1365:42;:::i;:::-;1353:55;;1316:12;;;;1428;;;;1283:167;;;1469:6;336:1145;-1:-1:-1;;;;;;;;336:1145:21:o;1486:127::-;1547:10;1542:3;1538:20;1535:1;1528:31;1578:4;1575:1;1568:15;1602:4;1599:1;1592:15;1618:128;1685:9;;;1706:11;;;1703:37;;;1720:18;;:::i;2099:585::-;2333:13;;2276:3;;2307;;2386:4;2413:15;;;2276:3;2456:201;2470:6;2467:1;2464:13;2456:201;;;2537:13;;-1:-1:-1;;;;;2533:39:21;2519:54;;2595:14;;;;2632:15;;;;2569:1;2485:9;2456:201;;;-1:-1:-1;2673:5:21;;2099:585;-1:-1:-1;;;;;;2099:585:21:o;2689:608::-;2863:3;2894;2926:6;2920:13;2951:3;2942:12;;2973:6;2970:1;2963:17;2999:4;3039:2;3036:1;3026:16;3060:1;3070:200;3084:6;3081:1;3078:13;3070:200;;;3151:13;;-1:-1:-1;;;;;3147:39:21;3133:54;;3209:14;;;;3183:1;3246:14;;;;3099:9;3070:200;;3302:127;3363:10;3358:3;3354:20;3351:1;3344:31;3394:4;3391:1;3384:15;3418:4;3415:1;3408:15;3434:135;3473:3;3494:17;;;3491:43;;3514:18;;:::i;:::-;-1:-1:-1;3561:1:21;3550:13;;3434:135::o;3574:355::-;287:234:20;;;;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "@__msgData_1909": { "entryPoint": null, "id": 1909, "parameterSlots": 0, "returnSlots": 2 },
                "@_callOptionalReturn_1216": { "entryPoint": 4897, "id": 1216, "parameterSlots": 2, "returnSlots": 0 },
                "@_msgData_1568": { "entryPoint": null, "id": 1568, "parameterSlots": 0, "returnSlots": 2 },
                "@_msgSender_1559": { "entryPoint": null, "id": 1559, "parameterSlots": 0, "returnSlots": 1 },
                "@_revert_1546": { "entryPoint": null, "id": 1546, "parameterSlots": 2, "returnSlots": 0 },
                "@charge_1804": { "entryPoint": 1106, "id": 1804, "parameterSlots": 0, "returnSlots": 0 },
                "@charge_1856": { "entryPoint": 1681, "id": 1856, "parameterSlots": 1, "returnSlots": 0 },
                "@constructorInit_200": { "entryPoint": 3008, "id": 200, "parameterSlots": 2, "returnSlots": 0 },
                "@enforceIsContractOwner_294": { "entryPoint": 3978, "id": 294, "parameterSlots": 2, "returnSlots": 0 },
                "@functionCallWithValue_1371": {
                  "entryPoint": 5188,
                  "id": 1371,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "@functionCall_1307": { "entryPoint": 5165, "id": 1307, "parameterSlots": 3, "returnSlots": 1 },
                "@getGasPumps_1755": { "entryPoint": 2074, "id": 1755, "parameterSlots": 0, "returnSlots": 1 },
                "@isContract_1235": { "entryPoint": null, "id": 1235, "parameterSlots": 1, "returnSlots": 1 },
                "@layout_306": { "entryPoint": 2962, "id": 306, "parameterSlots": 0, "returnSlots": 1 },
                "@layout_448": { "entryPoint": 3197, "id": 448, "parameterSlots": 0, "returnSlots": 1 },
                "@owner_276": { "entryPoint": null, "id": 276, "parameterSlots": 1, "returnSlots": 1 },
                "@owner_63": { "entryPoint": 2185, "id": 63, "parameterSlots": 0, "returnSlots": 1 },
                "@pumps_1640": { "entryPoint": 2229, "id": 1640, "parameterSlots": 0, "returnSlots": 0 },
                "@recoverERC20s_662": { "entryPoint": 1382, "id": 662, "parameterSlots": 6, "returnSlots": 0 },
                "@recoverERC721s_732": { "entryPoint": 2284, "id": 732, "parameterSlots": 6, "returnSlots": 0 },
                "@recoverETH_596": { "entryPoint": 2726, "id": 596, "parameterSlots": 4, "returnSlots": 0 },
                "@safeTransfer_968": { "entryPoint": 4109, "id": 968, "parameterSlots": 3, "returnSlots": 0 },
                "@sendValue_1269": { "entryPoint": 4551, "id": 1269, "parameterSlots": 2, "returnSlots": 0 },
                "@setGasPumps_1746": { "entryPoint": 626, "id": 1746, "parameterSlots": 1, "returnSlots": 0 },
                "@setSupportedInterface_402": { "entryPoint": 3243, "id": 402, "parameterSlots": 3, "returnSlots": 0 },
                "@supportsInterface_337": { "entryPoint": 600, "id": 337, "parameterSlots": 1, "returnSlots": 1 },
                "@supportsInterface_436": { "entryPoint": 3511, "id": 436, "parameterSlots": 2, "returnSlots": 1 },
                "@transferOwnership_263": { "entryPoint": 4250, "id": 263, "parameterSlots": 3, "returnSlots": 0 },
                "@transferOwnership_81": { "entryPoint": 2703, "id": 81, "parameterSlots": 1, "returnSlots": 0 },
                "@verifyCallResultFromTarget_1502": {
                  "entryPoint": 5469,
                  "id": 1502,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "@withdraw_1879": { "entryPoint": 3729, "id": 1879, "parameterSlots": 2, "returnSlots": 0 },
                "abi_decode_address_payable": { "entryPoint": 6005, "id": null, "parameterSlots": 1, "returnSlots": 1 },
                "abi_decode_array_address_dyn_calldata": {
                  "entryPoint": 6325,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_tuple_t_address": { "entryPoint": 6670, "id": null, "parameterSlots": 2, "returnSlots": 1 },
                "abi_decode_tuple_t_address_payable": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$900_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr": {
                  "entryPoint": 6401,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 6
                },
                "abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$819_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 6
                },
                "abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr": {
                  "entryPoint": 6699,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 4
                },
                "abi_decode_tuple_t_array$_t_address_payable_$dyn_memory_ptr": {
                  "entryPoint": 6021,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_bool_fromMemory": {
                  "entryPoint": 7201,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_bytes4": { "entryPoint": 5851, "id": null, "parameterSlots": 2, "returnSlots": 1 },
                "abi_decode_tuple_t_contract$_IERC20_$900": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_contract$_IERC721_$819": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_uint256": { "entryPoint": 6645, "id": null, "parameterSlots": 2, "returnSlots": 1 },
                "abi_encode_tuple_packed_t_array$_t_address_payable_$dyn_memory_ptr__to_t_array$_t_address_payable_$dyn_memory_ptr__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 6807,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_array$_t_address_payable_$dyn_storage__to_t_array$_t_address_payable_$dyn_memory_ptr__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 6883,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 7271,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_address_payable__to_t_address_payable__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_array$_t_address_payable_$dyn_memory_ptr__to_t_array$_t_address_payable_$dyn_memory_ptr__fromStack_reversed": {
                  "entryPoint": 6555,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed": {
                  "entryPoint": 6248,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": 7299,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_12227dcd596297e685bdc66ab01e81b5228df9a6bdd1fe7960df703f31587551__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_2d10247a65709fdb3c0696b0ed760a0c246e12f8c496efb56291dd2fe3b0275d__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_50f9407a4adcdf6ae12e0d869562d9d87ab7a621231d402d6cee2f0011d7245a__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_7e652ff6a488637940a02d29f8449254de8a14c7dab61e902488aa9b3477438f__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_c1abf30d4e27019b56298306476010b3f6ef9e55a9cfe90bcb5f6dc16e369b9d__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "checked_add_t_uint256": { "entryPoint": 7104, "id": null, "parameterSlots": 2, "returnSlots": 1 },
                "checked_div_t_uint256": { "entryPoint": 7123, "id": null, "parameterSlots": 2, "returnSlots": 1 },
                "checked_sub_t_uint256": { "entryPoint": 7182, "id": null, "parameterSlots": 2, "returnSlots": 1 },
                "copy_memory_to_memory_with_cleanup": {
                  "entryPoint": 7235,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "increment_t_uint256": { "entryPoint": 7048, "id": null, "parameterSlots": 1, "returnSlots": 1 },
                "panic_error_0x11": { "entryPoint": 7001, "id": null, "parameterSlots": 0, "returnSlots": 0 },
                "panic_error_0x32": { "entryPoint": 6954, "id": null, "parameterSlots": 0, "returnSlots": 0 },
                "panic_error_0x41": { "entryPoint": 5924, "id": null, "parameterSlots": 0, "returnSlots": 0 },
                "validator_revert_address_payable": {
                  "entryPoint": 5971,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                }
              },
              "generatedSources": [
                {
                  "ast": {
                    "nodeType": "YulBlock",
                    "src": "0:17632:21",
                    "statements": [
                      { "nodeType": "YulBlock", "src": "6:3:21", "statements": [] },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "83:263:21",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "129:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "138:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "141:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "131:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "131:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "131:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "104:7:21" },
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "113:9:21" }
                                    ],
                                    "functionName": { "name": "sub", "nodeType": "YulIdentifier", "src": "100:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "100:23:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "125:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "slt", "nodeType": "YulIdentifier", "src": "96:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "96:32:21"
                              },
                              "nodeType": "YulIf",
                              "src": "93:52:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "154:36:21",
                              "value": {
                                "arguments": [{ "name": "headStart", "nodeType": "YulIdentifier", "src": "180:9:21" }],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "167:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "167:23:21"
                              },
                              "variables": [
                                { "name": "value", "nodeType": "YulTypedName", "src": "158:5:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "300:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "309:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "312:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "302:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "302:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "302:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "value", "nodeType": "YulIdentifier", "src": "212:5:21" },
                                      {
                                        "arguments": [
                                          { "name": "value", "nodeType": "YulIdentifier", "src": "223:5:21" },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "230:66:21",
                                            "type": "",
                                            "value": "0xffffffff00000000000000000000000000000000000000000000000000000000"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "219:3:21"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "219:78:21"
                                      }
                                    ],
                                    "functionName": { "name": "eq", "nodeType": "YulIdentifier", "src": "209:2:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "209:89:21"
                                  }
                                ],
                                "functionName": { "name": "iszero", "nodeType": "YulIdentifier", "src": "202:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "202:97:21"
                              },
                              "nodeType": "YulIf",
                              "src": "199:117:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "325:15:21",
                              "value": { "name": "value", "nodeType": "YulIdentifier", "src": "335:5:21" },
                              "variableNames": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "325:6:21" }]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_bytes4",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "49:9:21", "type": "" },
                          { "name": "dataEnd", "nodeType": "YulTypedName", "src": "60:7:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "value0", "nodeType": "YulTypedName", "src": "72:6:21", "type": "" }
                        ],
                        "src": "14:332:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "446:92:21",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "456:26:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "468:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "479:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "464:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "464:18:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "456:4:21" }]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "498:9:21" },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          { "name": "value0", "nodeType": "YulIdentifier", "src": "523:6:21" }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "516:6:21"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "516:14:21"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "509:6:21"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "509:22:21"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "491:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "491:41:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "491:41:21"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "415:9:21", "type": "" },
                          { "name": "value0", "nodeType": "YulTypedName", "src": "426:6:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "437:4:21", "type": "" }
                        ],
                        "src": "351:187:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "575:152:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "592:1:21",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "595:77:21",
                                    "type": "",
                                    "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "585:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "585:88:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "585:88:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "689:1:21",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "692:4:21",
                                    "type": "",
                                    "value": "0x41"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "682:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "682:15:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "682:15:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "713:1:21",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "716:4:21",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": { "name": "revert", "nodeType": "YulIdentifier", "src": "706:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "706:15:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "706:15:21"
                            }
                          ]
                        },
                        "name": "panic_error_0x41",
                        "nodeType": "YulFunctionDefinition",
                        "src": "543:184:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "785:109:21",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "872:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "881:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "884:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "874:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "874:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "874:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "value", "nodeType": "YulIdentifier", "src": "808:5:21" },
                                      {
                                        "arguments": [
                                          { "name": "value", "nodeType": "YulIdentifier", "src": "819:5:21" },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "826:42:21",
                                            "type": "",
                                            "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "815:3:21"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "815:54:21"
                                      }
                                    ],
                                    "functionName": { "name": "eq", "nodeType": "YulIdentifier", "src": "805:2:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "805:65:21"
                                  }
                                ],
                                "functionName": { "name": "iszero", "nodeType": "YulIdentifier", "src": "798:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "798:73:21"
                              },
                              "nodeType": "YulIf",
                              "src": "795:93:21"
                            }
                          ]
                        },
                        "name": "validator_revert_address_payable",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [{ "name": "value", "nodeType": "YulTypedName", "src": "774:5:21", "type": "" }],
                        "src": "732:162:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "956:93:21",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "966:29:21",
                              "value": {
                                "arguments": [{ "name": "offset", "nodeType": "YulIdentifier", "src": "988:6:21" }],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "975:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "975:20:21"
                              },
                              "variableNames": [{ "name": "value", "nodeType": "YulIdentifier", "src": "966:5:21" }]
                            },
                            {
                              "expression": {
                                "arguments": [{ "name": "value", "nodeType": "YulIdentifier", "src": "1037:5:21" }],
                                "functionName": {
                                  "name": "validator_revert_address_payable",
                                  "nodeType": "YulIdentifier",
                                  "src": "1004:32:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1004:39:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1004:39:21"
                            }
                          ]
                        },
                        "name": "abi_decode_address_payable",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [{ "name": "offset", "nodeType": "YulTypedName", "src": "935:6:21", "type": "" }],
                        "returnVariables": [
                          { "name": "value", "nodeType": "YulTypedName", "src": "946:5:21", "type": "" }
                        ],
                        "src": "899:150:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "1157:1093:21",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1167:12:21",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1177:2:21",
                                "type": "",
                                "value": "32"
                              },
                              "variables": [
                                { "name": "_1", "nodeType": "YulTypedName", "src": "1171:2:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1224:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1233:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1236:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "1226:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1226:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1226:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "1199:7:21" },
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "1208:9:21" }
                                    ],
                                    "functionName": { "name": "sub", "nodeType": "YulIdentifier", "src": "1195:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1195:23:21"
                                  },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "1220:2:21" }
                                ],
                                "functionName": { "name": "slt", "nodeType": "YulIdentifier", "src": "1191:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1191:32:21"
                              },
                              "nodeType": "YulIf",
                              "src": "1188:52:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1249:37:21",
                              "value": {
                                "arguments": [{ "name": "headStart", "nodeType": "YulIdentifier", "src": "1276:9:21" }],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "1263:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1263:23:21"
                              },
                              "variables": [
                                { "name": "offset", "nodeType": "YulTypedName", "src": "1253:6:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1295:28:21",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1305:18:21",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              },
                              "variables": [
                                { "name": "_2", "nodeType": "YulTypedName", "src": "1299:2:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1350:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1359:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1362:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "1352:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1352:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1352:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "offset", "nodeType": "YulIdentifier", "src": "1338:6:21" },
                                  { "name": "_2", "nodeType": "YulIdentifier", "src": "1346:2:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "1335:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1335:14:21"
                              },
                              "nodeType": "YulIf",
                              "src": "1332:34:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1375:32:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "1389:9:21" },
                                  { "name": "offset", "nodeType": "YulIdentifier", "src": "1400:6:21" }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "1385:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1385:22:21"
                              },
                              "variables": [
                                { "name": "_3", "nodeType": "YulTypedName", "src": "1379:2:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1455:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1464:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "1467:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "1457:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1457:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1457:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          { "name": "_3", "nodeType": "YulIdentifier", "src": "1434:2:21" },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1438:4:21",
                                            "type": "",
                                            "value": "0x1f"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "1430:3:21"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1430:13:21"
                                      },
                                      { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "1445:7:21" }
                                    ],
                                    "functionName": { "name": "slt", "nodeType": "YulIdentifier", "src": "1426:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1426:27:21"
                                  }
                                ],
                                "functionName": { "name": "iszero", "nodeType": "YulIdentifier", "src": "1419:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1419:35:21"
                              },
                              "nodeType": "YulIf",
                              "src": "1416:55:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1480:26:21",
                              "value": {
                                "arguments": [{ "name": "_3", "nodeType": "YulIdentifier", "src": "1503:2:21" }],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "1490:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1490:16:21"
                              },
                              "variables": [
                                { "name": "_4", "nodeType": "YulTypedName", "src": "1484:2:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1529:22:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x41",
                                        "nodeType": "YulIdentifier",
                                        "src": "1531:16:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1531:18:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1531:18:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "_4", "nodeType": "YulIdentifier", "src": "1521:2:21" },
                                  { "name": "_2", "nodeType": "YulIdentifier", "src": "1525:2:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "1518:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1518:10:21"
                              },
                              "nodeType": "YulIf",
                              "src": "1515:36:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1560:20:21",
                              "value": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1574:1:21",
                                    "type": "",
                                    "value": "5"
                                  },
                                  { "name": "_4", "nodeType": "YulIdentifier", "src": "1577:2:21" }
                                ],
                                "functionName": { "name": "shl", "nodeType": "YulIdentifier", "src": "1570:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1570:10:21"
                              },
                              "variables": [
                                { "name": "_5", "nodeType": "YulTypedName", "src": "1564:2:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1589:23:21",
                              "value": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1609:2:21",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": { "name": "mload", "nodeType": "YulIdentifier", "src": "1603:5:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1603:9:21"
                              },
                              "variables": [
                                { "name": "memPtr", "nodeType": "YulTypedName", "src": "1593:6:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1621:115:21",
                              "value": {
                                "arguments": [
                                  { "name": "memPtr", "nodeType": "YulIdentifier", "src": "1643:6:21" },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          { "name": "_5", "nodeType": "YulIdentifier", "src": "1659:2:21" },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1663:2:21",
                                            "type": "",
                                            "value": "63"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "1655:3:21"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1655:11:21"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1668:66:21",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"
                                      }
                                    ],
                                    "functionName": { "name": "and", "nodeType": "YulIdentifier", "src": "1651:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1651:84:21"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "1639:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1639:97:21"
                              },
                              "variables": [
                                { "name": "newFreePtr", "nodeType": "YulTypedName", "src": "1625:10:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "1795:22:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x41",
                                        "nodeType": "YulIdentifier",
                                        "src": "1797:16:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1797:18:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1797:18:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "newFreePtr", "nodeType": "YulIdentifier", "src": "1754:10:21" },
                                      { "name": "_2", "nodeType": "YulIdentifier", "src": "1766:2:21" }
                                    ],
                                    "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "1751:2:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1751:18:21"
                                  },
                                  {
                                    "arguments": [
                                      { "name": "newFreePtr", "nodeType": "YulIdentifier", "src": "1774:10:21" },
                                      { "name": "memPtr", "nodeType": "YulIdentifier", "src": "1786:6:21" }
                                    ],
                                    "functionName": { "name": "lt", "nodeType": "YulIdentifier", "src": "1771:2:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1771:22:21"
                                  }
                                ],
                                "functionName": { "name": "or", "nodeType": "YulIdentifier", "src": "1748:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1748:46:21"
                              },
                              "nodeType": "YulIf",
                              "src": "1745:72:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1833:2:21",
                                    "type": "",
                                    "value": "64"
                                  },
                                  { "name": "newFreePtr", "nodeType": "YulIdentifier", "src": "1837:10:21" }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "1826:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1826:22:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1826:22:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1857:17:21",
                              "value": { "name": "memPtr", "nodeType": "YulIdentifier", "src": "1868:6:21" },
                              "variables": [
                                { "name": "dst", "nodeType": "YulTypedName", "src": "1861:3:21", "type": "" }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "memPtr", "nodeType": "YulIdentifier", "src": "1890:6:21" },
                                  { "name": "_4", "nodeType": "YulIdentifier", "src": "1898:2:21" }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "1883:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1883:18:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "1883:18:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1910:22:21",
                              "value": {
                                "arguments": [
                                  { "name": "memPtr", "nodeType": "YulIdentifier", "src": "1921:6:21" },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "1929:2:21" }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "1917:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1917:15:21"
                              },
                              "variableNames": [{ "name": "dst", "nodeType": "YulIdentifier", "src": "1910:3:21" }]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1941:34:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "_3", "nodeType": "YulIdentifier", "src": "1963:2:21" },
                                      { "name": "_5", "nodeType": "YulIdentifier", "src": "1967:2:21" }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "1959:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1959:11:21"
                                  },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "1972:2:21" }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "1955:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1955:20:21"
                              },
                              "variables": [
                                { "name": "srcEnd", "nodeType": "YulTypedName", "src": "1945:6:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2007:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2016:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2019:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "2009:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2009:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2009:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "srcEnd", "nodeType": "YulIdentifier", "src": "1990:6:21" },
                                  { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "1998:7:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "1987:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "1987:19:21"
                              },
                              "nodeType": "YulIf",
                              "src": "1984:39:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "2032:22:21",
                              "value": {
                                "arguments": [
                                  { "name": "_3", "nodeType": "YulIdentifier", "src": "2047:2:21" },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "2051:2:21" }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "2043:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "2043:11:21"
                              },
                              "variables": [
                                { "name": "src", "nodeType": "YulTypedName", "src": "2036:3:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2119:100:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        { "name": "dst", "nodeType": "YulIdentifier", "src": "2140:3:21" },
                                        {
                                          "arguments": [
                                            { "name": "src", "nodeType": "YulIdentifier", "src": "2172:3:21" }
                                          ],
                                          "functionName": {
                                            "name": "abi_decode_address_payable",
                                            "nodeType": "YulIdentifier",
                                            "src": "2145:26:21"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "2145:31:21"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "2133:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2133:44:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2133:44:21"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "2190:19:21",
                                    "value": {
                                      "arguments": [
                                        { "name": "dst", "nodeType": "YulIdentifier", "src": "2201:3:21" },
                                        { "name": "_1", "nodeType": "YulIdentifier", "src": "2206:2:21" }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "2197:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2197:12:21"
                                    },
                                    "variableNames": [
                                      { "name": "dst", "nodeType": "YulIdentifier", "src": "2190:3:21" }
                                    ]
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "src", "nodeType": "YulIdentifier", "src": "2074:3:21" },
                                  { "name": "srcEnd", "nodeType": "YulIdentifier", "src": "2079:6:21" }
                                ],
                                "functionName": { "name": "lt", "nodeType": "YulIdentifier", "src": "2071:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "2071:15:21"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "2087:23:21",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "2089:19:21",
                                    "value": {
                                      "arguments": [
                                        { "name": "src", "nodeType": "YulIdentifier", "src": "2100:3:21" },
                                        { "name": "_1", "nodeType": "YulIdentifier", "src": "2105:2:21" }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "2096:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2096:12:21"
                                    },
                                    "variableNames": [
                                      { "name": "src", "nodeType": "YulIdentifier", "src": "2089:3:21" }
                                    ]
                                  }
                                ]
                              },
                              "pre": { "nodeType": "YulBlock", "src": "2067:3:21", "statements": [] },
                              "src": "2063:156:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2228:16:21",
                              "value": { "name": "memPtr", "nodeType": "YulIdentifier", "src": "2238:6:21" },
                              "variableNames": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "2228:6:21" }]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_array$_t_address_payable_$dyn_memory_ptr",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "1123:9:21", "type": "" },
                          { "name": "dataEnd", "nodeType": "YulTypedName", "src": "1134:7:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "value0", "nodeType": "YulTypedName", "src": "1146:6:21", "type": "" }
                        ],
                        "src": "1054:1196:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "2384:318:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "2401:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2412:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "2394:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "2394:21:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "2394:21:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "2435:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2446:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "2431:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2431:18:21"
                                  },
                                  { "name": "value1", "nodeType": "YulIdentifier", "src": "2451:6:21" }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "2424:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "2424:34:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "2424:34:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "2484:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2495:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "2480:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2480:18:21"
                                  },
                                  { "name": "value0", "nodeType": "YulIdentifier", "src": "2500:6:21" },
                                  { "name": "value1", "nodeType": "YulIdentifier", "src": "2508:6:21" }
                                ],
                                "functionName": {
                                  "name": "calldatacopy",
                                  "nodeType": "YulIdentifier",
                                  "src": "2467:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2467:48:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "2467:48:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          { "name": "headStart", "nodeType": "YulIdentifier", "src": "2539:9:21" },
                                          { "name": "value1", "nodeType": "YulIdentifier", "src": "2550:6:21" }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "2535:3:21"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2535:22:21"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2559:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "2531:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2531:31:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2564:1:21",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "2524:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "2524:42:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "2524:42:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2575:121:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "2591:9:21" },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              { "name": "value1", "nodeType": "YulIdentifier", "src": "2610:6:21" },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "2618:2:21",
                                                "type": "",
                                                "value": "31"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "2606:3:21"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2606:15:21"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2623:66:21",
                                            "type": "",
                                            "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "2602:3:21"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2602:88:21"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "2587:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2587:104:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2693:2:21",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "2583:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "2583:113:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "2575:4:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "2345:9:21", "type": "" },
                          { "name": "value1", "nodeType": "YulTypedName", "src": "2356:6:21", "type": "" },
                          { "name": "value0", "nodeType": "YulTypedName", "src": "2364:6:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "2375:4:21", "type": "" }
                        ],
                        "src": "2255:447:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "2791:283:21",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2840:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2849:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2852:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "2842:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2842:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2842:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          { "name": "offset", "nodeType": "YulIdentifier", "src": "2819:6:21" },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2827:4:21",
                                            "type": "",
                                            "value": "0x1f"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "2815:3:21"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2815:17:21"
                                      },
                                      { "name": "end", "nodeType": "YulIdentifier", "src": "2834:3:21" }
                                    ],
                                    "functionName": { "name": "slt", "nodeType": "YulIdentifier", "src": "2811:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2811:27:21"
                                  }
                                ],
                                "functionName": { "name": "iszero", "nodeType": "YulIdentifier", "src": "2804:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "2804:35:21"
                              },
                              "nodeType": "YulIf",
                              "src": "2801:55:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2865:30:21",
                              "value": {
                                "arguments": [{ "name": "offset", "nodeType": "YulIdentifier", "src": "2888:6:21" }],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "2875:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2875:20:21"
                              },
                              "variableNames": [{ "name": "length", "nodeType": "YulIdentifier", "src": "2865:6:21" }]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "2938:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2947:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2950:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "2940:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2940:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "2940:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "length", "nodeType": "YulIdentifier", "src": "2910:6:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2918:18:21",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "2907:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "2907:30:21"
                              },
                              "nodeType": "YulIf",
                              "src": "2904:50:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "2963:29:21",
                              "value": {
                                "arguments": [
                                  { "name": "offset", "nodeType": "YulIdentifier", "src": "2979:6:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2987:4:21",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "2975:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "2975:17:21"
                              },
                              "variableNames": [{ "name": "arrayPos", "nodeType": "YulIdentifier", "src": "2963:8:21" }]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "3052:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3061:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3064:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "3054:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3054:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3054:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          { "name": "offset", "nodeType": "YulIdentifier", "src": "3015:6:21" },
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "3027:1:21",
                                                "type": "",
                                                "value": "5"
                                              },
                                              { "name": "length", "nodeType": "YulIdentifier", "src": "3030:6:21" }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "3023:3:21"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "3023:14:21"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "3011:3:21"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "3011:27:21"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3040:4:21",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "3007:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3007:38:21"
                                  },
                                  { "name": "end", "nodeType": "YulIdentifier", "src": "3047:3:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "3004:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "3004:47:21"
                              },
                              "nodeType": "YulIf",
                              "src": "3001:67:21"
                            }
                          ]
                        },
                        "name": "abi_decode_array_address_dyn_calldata",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "offset", "nodeType": "YulTypedName", "src": "2754:6:21", "type": "" },
                          { "name": "end", "nodeType": "YulTypedName", "src": "2762:3:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "arrayPos", "nodeType": "YulTypedName", "src": "2770:8:21", "type": "" },
                          { "name": "length", "nodeType": "YulTypedName", "src": "2780:6:21", "type": "" }
                        ],
                        "src": "2707:367:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "3302:879:21",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "3348:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3357:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3360:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "3350:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3350:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3350:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "3323:7:21" },
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "3332:9:21" }
                                    ],
                                    "functionName": { "name": "sub", "nodeType": "YulIdentifier", "src": "3319:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3319:23:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3344:2:21",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": { "name": "slt", "nodeType": "YulIdentifier", "src": "3315:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "3315:32:21"
                              },
                              "nodeType": "YulIf",
                              "src": "3312:52:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3373:37:21",
                              "value": {
                                "arguments": [{ "name": "headStart", "nodeType": "YulIdentifier", "src": "3400:9:21" }],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "3387:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3387:23:21"
                              },
                              "variables": [
                                { "name": "offset", "nodeType": "YulTypedName", "src": "3377:6:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3419:28:21",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3429:18:21",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              },
                              "variables": [
                                { "name": "_1", "nodeType": "YulTypedName", "src": "3423:2:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "3474:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3483:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3486:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "3476:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3476:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3476:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "offset", "nodeType": "YulIdentifier", "src": "3462:6:21" },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "3470:2:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "3459:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "3459:14:21"
                              },
                              "nodeType": "YulIf",
                              "src": "3456:34:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3499:96:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "3567:9:21" },
                                      { "name": "offset", "nodeType": "YulIdentifier", "src": "3578:6:21" }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "3563:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3563:22:21"
                                  },
                                  { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "3587:7:21" }
                                ],
                                "functionName": {
                                  "name": "abi_decode_array_address_dyn_calldata",
                                  "nodeType": "YulIdentifier",
                                  "src": "3525:37:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3525:70:21"
                              },
                              "variables": [
                                { "name": "value0_1", "nodeType": "YulTypedName", "src": "3503:8:21", "type": "" },
                                { "name": "value1_1", "nodeType": "YulTypedName", "src": "3513:8:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "3604:18:21",
                              "value": { "name": "value0_1", "nodeType": "YulIdentifier", "src": "3614:8:21" },
                              "variableNames": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "3604:6:21" }]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "3631:18:21",
                              "value": { "name": "value1_1", "nodeType": "YulIdentifier", "src": "3641:8:21" },
                              "variableNames": [{ "name": "value1", "nodeType": "YulIdentifier", "src": "3631:6:21" }]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3658:48:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "3691:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3702:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "3687:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3687:18:21"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "3674:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3674:32:21"
                              },
                              "variables": [
                                { "name": "offset_1", "nodeType": "YulTypedName", "src": "3662:8:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "3735:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3744:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3747:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "3737:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3737:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3737:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "offset_1", "nodeType": "YulIdentifier", "src": "3721:8:21" },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "3731:2:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "3718:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "3718:16:21"
                              },
                              "nodeType": "YulIf",
                              "src": "3715:36:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3760:98:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "3828:9:21" },
                                      { "name": "offset_1", "nodeType": "YulIdentifier", "src": "3839:8:21" }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "3824:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3824:24:21"
                                  },
                                  { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "3850:7:21" }
                                ],
                                "functionName": {
                                  "name": "abi_decode_array_address_dyn_calldata",
                                  "nodeType": "YulIdentifier",
                                  "src": "3786:37:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3786:72:21"
                              },
                              "variables": [
                                { "name": "value2_1", "nodeType": "YulTypedName", "src": "3764:8:21", "type": "" },
                                { "name": "value3_1", "nodeType": "YulTypedName", "src": "3774:8:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "3867:18:21",
                              "value": { "name": "value2_1", "nodeType": "YulIdentifier", "src": "3877:8:21" },
                              "variableNames": [{ "name": "value2", "nodeType": "YulIdentifier", "src": "3867:6:21" }]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "3894:18:21",
                              "value": { "name": "value3_1", "nodeType": "YulIdentifier", "src": "3904:8:21" },
                              "variableNames": [{ "name": "value3", "nodeType": "YulIdentifier", "src": "3894:6:21" }]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "3921:48:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "3954:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3965:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "3950:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3950:18:21"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "3937:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3937:32:21"
                              },
                              "variables": [
                                { "name": "offset_2", "nodeType": "YulTypedName", "src": "3925:8:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "3998:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "4007:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "4010:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "4000:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4000:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "4000:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "offset_2", "nodeType": "YulIdentifier", "src": "3984:8:21" },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "3994:2:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "3981:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "3981:16:21"
                              },
                              "nodeType": "YulIf",
                              "src": "3978:36:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4023:98:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "4091:9:21" },
                                      { "name": "offset_2", "nodeType": "YulIdentifier", "src": "4102:8:21" }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "4087:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4087:24:21"
                                  },
                                  { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "4113:7:21" }
                                ],
                                "functionName": {
                                  "name": "abi_decode_array_address_dyn_calldata",
                                  "nodeType": "YulIdentifier",
                                  "src": "4049:37:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4049:72:21"
                              },
                              "variables": [
                                { "name": "value4_1", "nodeType": "YulTypedName", "src": "4027:8:21", "type": "" },
                                { "name": "value5_1", "nodeType": "YulTypedName", "src": "4037:8:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "4130:18:21",
                              "value": { "name": "value4_1", "nodeType": "YulIdentifier", "src": "4140:8:21" },
                              "variableNames": [{ "name": "value4", "nodeType": "YulIdentifier", "src": "4130:6:21" }]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "4157:18:21",
                              "value": { "name": "value5_1", "nodeType": "YulIdentifier", "src": "4167:8:21" },
                              "variableNames": [{ "name": "value5", "nodeType": "YulIdentifier", "src": "4157:6:21" }]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$900_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "3228:9:21", "type": "" },
                          { "name": "dataEnd", "nodeType": "YulTypedName", "src": "3239:7:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "value0", "nodeType": "YulTypedName", "src": "3251:6:21", "type": "" },
                          { "name": "value1", "nodeType": "YulTypedName", "src": "3259:6:21", "type": "" },
                          { "name": "value2", "nodeType": "YulTypedName", "src": "3267:6:21", "type": "" },
                          { "name": "value3", "nodeType": "YulTypedName", "src": "3275:6:21", "type": "" },
                          { "name": "value4", "nodeType": "YulTypedName", "src": "3283:6:21", "type": "" },
                          { "name": "value5", "nodeType": "YulTypedName", "src": "3291:6:21", "type": "" }
                        ],
                        "src": "3079:1102:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "4353:530:21",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4363:12:21",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4373:2:21",
                                "type": "",
                                "value": "32"
                              },
                              "variables": [
                                { "name": "_1", "nodeType": "YulTypedName", "src": "4367:2:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4384:32:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "4402:9:21" },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "4413:2:21" }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "4398:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "4398:18:21"
                              },
                              "variables": [
                                { "name": "tail_1", "nodeType": "YulTypedName", "src": "4388:6:21", "type": "" }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "4432:9:21" },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "4443:2:21" }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "4425:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "4425:21:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4425:21:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4455:17:21",
                              "value": { "name": "tail_1", "nodeType": "YulIdentifier", "src": "4466:6:21" },
                              "variables": [
                                { "name": "pos", "nodeType": "YulTypedName", "src": "4459:3:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4481:27:21",
                              "value": {
                                "arguments": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "4501:6:21" }],
                                "functionName": { "name": "mload", "nodeType": "YulIdentifier", "src": "4495:5:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "4495:13:21"
                              },
                              "variables": [
                                { "name": "length", "nodeType": "YulTypedName", "src": "4485:6:21", "type": "" }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "tail_1", "nodeType": "YulIdentifier", "src": "4524:6:21" },
                                  { "name": "length", "nodeType": "YulIdentifier", "src": "4532:6:21" }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "4517:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "4517:22:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4517:22:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "4548:25:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "4559:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4570:2:21",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "4555:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "4555:18:21"
                              },
                              "variableNames": [{ "name": "pos", "nodeType": "YulIdentifier", "src": "4548:3:21" }]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4582:29:21",
                              "value": {
                                "arguments": [
                                  { "name": "value0", "nodeType": "YulIdentifier", "src": "4600:6:21" },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "4608:2:21" }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "4596:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "4596:15:21"
                              },
                              "variables": [
                                { "name": "srcPtr", "nodeType": "YulTypedName", "src": "4586:6:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4620:10:21",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4629:1:21",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [{ "name": "i", "nodeType": "YulTypedName", "src": "4624:1:21", "type": "" }]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "4688:169:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        { "name": "pos", "nodeType": "YulIdentifier", "src": "4709:3:21" },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                { "name": "srcPtr", "nodeType": "YulIdentifier", "src": "4724:6:21" }
                                              ],
                                              "functionName": {
                                                "name": "mload",
                                                "nodeType": "YulIdentifier",
                                                "src": "4718:5:21"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "4718:13:21"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "4733:42:21",
                                              "type": "",
                                              "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "and",
                                            "nodeType": "YulIdentifier",
                                            "src": "4714:3:21"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "4714:62:21"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "4702:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4702:75:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "4702:75:21"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "4790:19:21",
                                    "value": {
                                      "arguments": [
                                        { "name": "pos", "nodeType": "YulIdentifier", "src": "4801:3:21" },
                                        { "name": "_1", "nodeType": "YulIdentifier", "src": "4806:2:21" }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "4797:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4797:12:21"
                                    },
                                    "variableNames": [
                                      { "name": "pos", "nodeType": "YulIdentifier", "src": "4790:3:21" }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "4822:25:21",
                                    "value": {
                                      "arguments": [
                                        { "name": "srcPtr", "nodeType": "YulIdentifier", "src": "4836:6:21" },
                                        { "name": "_1", "nodeType": "YulIdentifier", "src": "4844:2:21" }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "4832:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4832:15:21"
                                    },
                                    "variableNames": [
                                      { "name": "srcPtr", "nodeType": "YulIdentifier", "src": "4822:6:21" }
                                    ]
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "i", "nodeType": "YulIdentifier", "src": "4650:1:21" },
                                  { "name": "length", "nodeType": "YulIdentifier", "src": "4653:6:21" }
                                ],
                                "functionName": { "name": "lt", "nodeType": "YulIdentifier", "src": "4647:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "4647:13:21"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "4661:18:21",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "4663:14:21",
                                    "value": {
                                      "arguments": [
                                        { "name": "i", "nodeType": "YulIdentifier", "src": "4672:1:21" },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "4675:1:21",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "4668:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4668:9:21"
                                    },
                                    "variableNames": [{ "name": "i", "nodeType": "YulIdentifier", "src": "4663:1:21" }]
                                  }
                                ]
                              },
                              "pre": { "nodeType": "YulBlock", "src": "4643:3:21", "statements": [] },
                              "src": "4639:218:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "4866:11:21",
                              "value": { "name": "pos", "nodeType": "YulIdentifier", "src": "4874:3:21" },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "4866:4:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_array$_t_address_payable_$dyn_memory_ptr__to_t_array$_t_address_payable_$dyn_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "4322:9:21", "type": "" },
                          { "name": "value0", "nodeType": "YulTypedName", "src": "4333:6:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "4344:4:21", "type": "" }
                        ],
                        "src": "4186:697:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "4989:125:21",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "4999:26:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "5011:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5022:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "5007:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "5007:18:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "4999:4:21" }]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "5041:9:21" },
                                  {
                                    "arguments": [
                                      { "name": "value0", "nodeType": "YulIdentifier", "src": "5056:6:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5064:42:21",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": { "name": "and", "nodeType": "YulIdentifier", "src": "5052:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5052:55:21"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "5034:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "5034:74:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "5034:74:21"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "4958:9:21", "type": "" },
                          { "name": "value0", "nodeType": "YulTypedName", "src": "4969:6:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "4980:4:21", "type": "" }
                        ],
                        "src": "4888:226:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "5189:110:21",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "5235:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "5244:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "5247:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "5237:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5237:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "5237:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "5210:7:21" },
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "5219:9:21" }
                                    ],
                                    "functionName": { "name": "sub", "nodeType": "YulIdentifier", "src": "5206:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5206:23:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5231:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "slt", "nodeType": "YulIdentifier", "src": "5202:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "5202:32:21"
                              },
                              "nodeType": "YulIf",
                              "src": "5199:52:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "5260:33:21",
                              "value": {
                                "arguments": [{ "name": "headStart", "nodeType": "YulIdentifier", "src": "5283:9:21" }],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "5270:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5270:23:21"
                              },
                              "variableNames": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "5260:6:21" }]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "5155:9:21", "type": "" },
                          { "name": "dataEnd", "nodeType": "YulTypedName", "src": "5166:7:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "value0", "nodeType": "YulTypedName", "src": "5178:6:21", "type": "" }
                        ],
                        "src": "5119:180:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "5421:125:21",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "5431:26:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "5443:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5454:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "5439:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "5439:18:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "5431:4:21" }]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "5473:9:21" },
                                  {
                                    "arguments": [
                                      { "name": "value0", "nodeType": "YulIdentifier", "src": "5488:6:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5496:42:21",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": { "name": "and", "nodeType": "YulIdentifier", "src": "5484:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5484:55:21"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "5466:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "5466:74:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "5466:74:21"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_address_payable__to_t_address_payable__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "5390:9:21", "type": "" },
                          { "name": "value0", "nodeType": "YulTypedName", "src": "5401:6:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "5412:4:21", "type": "" }
                        ],
                        "src": "5304:242:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "5775:879:21",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "5821:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "5830:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "5833:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "5823:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5823:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "5823:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "5796:7:21" },
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "5805:9:21" }
                                    ],
                                    "functionName": { "name": "sub", "nodeType": "YulIdentifier", "src": "5792:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5792:23:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5817:2:21",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": { "name": "slt", "nodeType": "YulIdentifier", "src": "5788:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "5788:32:21"
                              },
                              "nodeType": "YulIf",
                              "src": "5785:52:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "5846:37:21",
                              "value": {
                                "arguments": [{ "name": "headStart", "nodeType": "YulIdentifier", "src": "5873:9:21" }],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "5860:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5860:23:21"
                              },
                              "variables": [
                                { "name": "offset", "nodeType": "YulTypedName", "src": "5850:6:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "5892:28:21",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5902:18:21",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              },
                              "variables": [
                                { "name": "_1", "nodeType": "YulTypedName", "src": "5896:2:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "5947:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "5956:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "5959:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "5949:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5949:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "5949:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "offset", "nodeType": "YulIdentifier", "src": "5935:6:21" },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "5943:2:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "5932:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "5932:14:21"
                              },
                              "nodeType": "YulIf",
                              "src": "5929:34:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "5972:96:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "6040:9:21" },
                                      { "name": "offset", "nodeType": "YulIdentifier", "src": "6051:6:21" }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "6036:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6036:22:21"
                                  },
                                  { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "6060:7:21" }
                                ],
                                "functionName": {
                                  "name": "abi_decode_array_address_dyn_calldata",
                                  "nodeType": "YulIdentifier",
                                  "src": "5998:37:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5998:70:21"
                              },
                              "variables": [
                                { "name": "value0_1", "nodeType": "YulTypedName", "src": "5976:8:21", "type": "" },
                                { "name": "value1_1", "nodeType": "YulTypedName", "src": "5986:8:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "6077:18:21",
                              "value": { "name": "value0_1", "nodeType": "YulIdentifier", "src": "6087:8:21" },
                              "variableNames": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "6077:6:21" }]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "6104:18:21",
                              "value": { "name": "value1_1", "nodeType": "YulIdentifier", "src": "6114:8:21" },
                              "variableNames": [{ "name": "value1", "nodeType": "YulIdentifier", "src": "6104:6:21" }]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "6131:48:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "6164:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6175:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "6160:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6160:18:21"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "6147:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6147:32:21"
                              },
                              "variables": [
                                { "name": "offset_1", "nodeType": "YulTypedName", "src": "6135:8:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "6208:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "6217:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "6220:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "6210:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "6210:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "6210:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "offset_1", "nodeType": "YulIdentifier", "src": "6194:8:21" },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "6204:2:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "6191:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "6191:16:21"
                              },
                              "nodeType": "YulIf",
                              "src": "6188:36:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "6233:98:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "6301:9:21" },
                                      { "name": "offset_1", "nodeType": "YulIdentifier", "src": "6312:8:21" }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "6297:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6297:24:21"
                                  },
                                  { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "6323:7:21" }
                                ],
                                "functionName": {
                                  "name": "abi_decode_array_address_dyn_calldata",
                                  "nodeType": "YulIdentifier",
                                  "src": "6259:37:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6259:72:21"
                              },
                              "variables": [
                                { "name": "value2_1", "nodeType": "YulTypedName", "src": "6237:8:21", "type": "" },
                                { "name": "value3_1", "nodeType": "YulTypedName", "src": "6247:8:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "6340:18:21",
                              "value": { "name": "value2_1", "nodeType": "YulIdentifier", "src": "6350:8:21" },
                              "variableNames": [{ "name": "value2", "nodeType": "YulIdentifier", "src": "6340:6:21" }]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "6367:18:21",
                              "value": { "name": "value3_1", "nodeType": "YulIdentifier", "src": "6377:8:21" },
                              "variableNames": [{ "name": "value3", "nodeType": "YulIdentifier", "src": "6367:6:21" }]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "6394:48:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "6427:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6438:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "6423:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6423:18:21"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "6410:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6410:32:21"
                              },
                              "variables": [
                                { "name": "offset_2", "nodeType": "YulTypedName", "src": "6398:8:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "6471:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "6480:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "6483:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "6473:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "6473:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "6473:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "offset_2", "nodeType": "YulIdentifier", "src": "6457:8:21" },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "6467:2:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "6454:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "6454:16:21"
                              },
                              "nodeType": "YulIf",
                              "src": "6451:36:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "6496:98:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "6564:9:21" },
                                      { "name": "offset_2", "nodeType": "YulIdentifier", "src": "6575:8:21" }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "6560:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6560:24:21"
                                  },
                                  { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "6586:7:21" }
                                ],
                                "functionName": {
                                  "name": "abi_decode_array_address_dyn_calldata",
                                  "nodeType": "YulIdentifier",
                                  "src": "6522:37:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6522:72:21"
                              },
                              "variables": [
                                { "name": "value4_1", "nodeType": "YulTypedName", "src": "6500:8:21", "type": "" },
                                { "name": "value5_1", "nodeType": "YulTypedName", "src": "6510:8:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "6603:18:21",
                              "value": { "name": "value4_1", "nodeType": "YulIdentifier", "src": "6613:8:21" },
                              "variableNames": [{ "name": "value4", "nodeType": "YulIdentifier", "src": "6603:6:21" }]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "6630:18:21",
                              "value": { "name": "value5_1", "nodeType": "YulIdentifier", "src": "6640:8:21" },
                              "variableNames": [{ "name": "value5", "nodeType": "YulIdentifier", "src": "6630:6:21" }]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$819_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "5701:9:21", "type": "" },
                          { "name": "dataEnd", "nodeType": "YulTypedName", "src": "5712:7:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "value0", "nodeType": "YulTypedName", "src": "5724:6:21", "type": "" },
                          { "name": "value1", "nodeType": "YulTypedName", "src": "5732:6:21", "type": "" },
                          { "name": "value2", "nodeType": "YulTypedName", "src": "5740:6:21", "type": "" },
                          { "name": "value3", "nodeType": "YulTypedName", "src": "5748:6:21", "type": "" },
                          { "name": "value4", "nodeType": "YulTypedName", "src": "5756:6:21", "type": "" },
                          { "name": "value5", "nodeType": "YulTypedName", "src": "5764:6:21", "type": "" }
                        ],
                        "src": "5551:1103:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "6729:185:21",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "6775:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "6784:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "6787:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "6777:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "6777:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "6777:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "6750:7:21" },
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "6759:9:21" }
                                    ],
                                    "functionName": { "name": "sub", "nodeType": "YulIdentifier", "src": "6746:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6746:23:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6771:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "slt", "nodeType": "YulIdentifier", "src": "6742:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "6742:32:21"
                              },
                              "nodeType": "YulIf",
                              "src": "6739:52:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "6800:36:21",
                              "value": {
                                "arguments": [{ "name": "headStart", "nodeType": "YulIdentifier", "src": "6826:9:21" }],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "6813:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6813:23:21"
                              },
                              "variables": [
                                { "name": "value", "nodeType": "YulTypedName", "src": "6804:5:21", "type": "" }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [{ "name": "value", "nodeType": "YulIdentifier", "src": "6878:5:21" }],
                                "functionName": {
                                  "name": "validator_revert_address_payable",
                                  "nodeType": "YulIdentifier",
                                  "src": "6845:32:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6845:39:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "6845:39:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "6893:15:21",
                              "value": { "name": "value", "nodeType": "YulIdentifier", "src": "6903:5:21" },
                              "variableNames": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "6893:6:21" }]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_address",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "6695:9:21", "type": "" },
                          { "name": "dataEnd", "nodeType": "YulTypedName", "src": "6706:7:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "value0", "nodeType": "YulTypedName", "src": "6718:6:21", "type": "" }
                        ],
                        "src": "6659:255:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "7084:616:21",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "7130:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "7139:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "7142:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "7132:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "7132:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "7132:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "7105:7:21" },
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "7114:9:21" }
                                    ],
                                    "functionName": { "name": "sub", "nodeType": "YulIdentifier", "src": "7101:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7101:23:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7126:2:21",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": { "name": "slt", "nodeType": "YulIdentifier", "src": "7097:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "7097:32:21"
                              },
                              "nodeType": "YulIf",
                              "src": "7094:52:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "7155:37:21",
                              "value": {
                                "arguments": [{ "name": "headStart", "nodeType": "YulIdentifier", "src": "7182:9:21" }],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "7169:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7169:23:21"
                              },
                              "variables": [
                                { "name": "offset", "nodeType": "YulTypedName", "src": "7159:6:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "7201:28:21",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7211:18:21",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              },
                              "variables": [
                                { "name": "_1", "nodeType": "YulTypedName", "src": "7205:2:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "7256:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "7265:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "7268:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "7258:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "7258:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "7258:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "offset", "nodeType": "YulIdentifier", "src": "7244:6:21" },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "7252:2:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "7241:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "7241:14:21"
                              },
                              "nodeType": "YulIf",
                              "src": "7238:34:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "7281:96:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "7349:9:21" },
                                      { "name": "offset", "nodeType": "YulIdentifier", "src": "7360:6:21" }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "7345:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7345:22:21"
                                  },
                                  { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "7369:7:21" }
                                ],
                                "functionName": {
                                  "name": "abi_decode_array_address_dyn_calldata",
                                  "nodeType": "YulIdentifier",
                                  "src": "7307:37:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7307:70:21"
                              },
                              "variables": [
                                { "name": "value0_1", "nodeType": "YulTypedName", "src": "7285:8:21", "type": "" },
                                { "name": "value1_1", "nodeType": "YulTypedName", "src": "7295:8:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "7386:18:21",
                              "value": { "name": "value0_1", "nodeType": "YulIdentifier", "src": "7396:8:21" },
                              "variableNames": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "7386:6:21" }]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "7413:18:21",
                              "value": { "name": "value1_1", "nodeType": "YulIdentifier", "src": "7423:8:21" },
                              "variableNames": [{ "name": "value1", "nodeType": "YulIdentifier", "src": "7413:6:21" }]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "7440:48:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "7473:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7484:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "7469:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7469:18:21"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "7456:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7456:32:21"
                              },
                              "variables": [
                                { "name": "offset_1", "nodeType": "YulTypedName", "src": "7444:8:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "7517:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "7526:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "7529:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "7519:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "7519:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "7519:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "offset_1", "nodeType": "YulIdentifier", "src": "7503:8:21" },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "7513:2:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "7500:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "7500:16:21"
                              },
                              "nodeType": "YulIf",
                              "src": "7497:36:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "7542:98:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "7610:9:21" },
                                      { "name": "offset_1", "nodeType": "YulIdentifier", "src": "7621:8:21" }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "7606:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7606:24:21"
                                  },
                                  { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "7632:7:21" }
                                ],
                                "functionName": {
                                  "name": "abi_decode_array_address_dyn_calldata",
                                  "nodeType": "YulIdentifier",
                                  "src": "7568:37:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7568:72:21"
                              },
                              "variables": [
                                { "name": "value2_1", "nodeType": "YulTypedName", "src": "7546:8:21", "type": "" },
                                { "name": "value3_1", "nodeType": "YulTypedName", "src": "7556:8:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "7649:18:21",
                              "value": { "name": "value2_1", "nodeType": "YulIdentifier", "src": "7659:8:21" },
                              "variableNames": [{ "name": "value2", "nodeType": "YulIdentifier", "src": "7649:6:21" }]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "7676:18:21",
                              "value": { "name": "value3_1", "nodeType": "YulIdentifier", "src": "7686:8:21" },
                              "variableNames": [{ "name": "value3", "nodeType": "YulIdentifier", "src": "7676:6:21" }]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "7026:9:21", "type": "" },
                          { "name": "dataEnd", "nodeType": "YulTypedName", "src": "7037:7:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "value0", "nodeType": "YulTypedName", "src": "7049:6:21", "type": "" },
                          { "name": "value1", "nodeType": "YulTypedName", "src": "7057:6:21", "type": "" },
                          { "name": "value2", "nodeType": "YulTypedName", "src": "7065:6:21", "type": "" },
                          { "name": "value3", "nodeType": "YulTypedName", "src": "7073:6:21", "type": "" }
                        ],
                        "src": "6919:781:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "7879:169:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "7896:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7907:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "7889:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "7889:21:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "7889:21:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "7930:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7941:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "7926:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7926:18:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7946:2:21",
                                    "type": "",
                                    "value": "19"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "7919:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "7919:30:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "7919:30:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "7969:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7980:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "7965:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7965:18:21"
                                  },
                                  {
                                    "hexValue": "43616c6c6572206973206e6f74206f776e6572",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "7985:21:21",
                                    "type": "",
                                    "value": "Caller is not owner"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "7958:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "7958:49:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "7958:49:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "8016:26:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "8028:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8039:2:21",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "8024:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "8024:18:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "8016:4:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_2d10247a65709fdb3c0696b0ed760a0c246e12f8c496efb56291dd2fe3b0275d__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "7856:9:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "7870:4:21", "type": "" }
                        ],
                        "src": "7705:343:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "8238:423:21",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "8248:16:21",
                              "value": { "name": "pos", "nodeType": "YulIdentifier", "src": "8261:3:21" },
                              "variables": [
                                { "name": "pos_1", "nodeType": "YulTypedName", "src": "8252:5:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "8273:27:21",
                              "value": {
                                "arguments": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "8293:6:21" }],
                                "functionName": { "name": "mload", "nodeType": "YulIdentifier", "src": "8287:5:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "8287:13:21"
                              },
                              "variables": [
                                { "name": "length", "nodeType": "YulTypedName", "src": "8277:6:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "8309:12:21",
                              "value": { "name": "pos", "nodeType": "YulIdentifier", "src": "8318:3:21" },
                              "variableNames": [{ "name": "pos_1", "nodeType": "YulIdentifier", "src": "8309:5:21" }]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "8330:14:21",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8340:4:21",
                                "type": "",
                                "value": "0x20"
                              },
                              "variables": [
                                { "name": "_1", "nodeType": "YulTypedName", "src": "8334:2:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "8353:29:21",
                              "value": {
                                "arguments": [
                                  { "name": "value0", "nodeType": "YulIdentifier", "src": "8371:6:21" },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "8379:2:21" }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "8367:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "8367:15:21"
                              },
                              "variables": [
                                { "name": "srcPtr", "nodeType": "YulTypedName", "src": "8357:6:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "8391:10:21",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8400:1:21",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [{ "name": "i", "nodeType": "YulTypedName", "src": "8395:1:21", "type": "" }]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "8459:175:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        { "name": "pos_1", "nodeType": "YulIdentifier", "src": "8480:5:21" },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                { "name": "srcPtr", "nodeType": "YulIdentifier", "src": "8497:6:21" }
                                              ],
                                              "functionName": {
                                                "name": "mload",
                                                "nodeType": "YulIdentifier",
                                                "src": "8491:5:21"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "8491:13:21"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "8506:42:21",
                                              "type": "",
                                              "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "and",
                                            "nodeType": "YulIdentifier",
                                            "src": "8487:3:21"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "8487:62:21"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "8473:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8473:77:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "8473:77:21"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "8563:23:21",
                                    "value": {
                                      "arguments": [
                                        { "name": "pos_1", "nodeType": "YulIdentifier", "src": "8576:5:21" },
                                        { "name": "_1", "nodeType": "YulIdentifier", "src": "8583:2:21" }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "8572:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8572:14:21"
                                    },
                                    "variableNames": [
                                      { "name": "pos_1", "nodeType": "YulIdentifier", "src": "8563:5:21" }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "8599:25:21",
                                    "value": {
                                      "arguments": [
                                        { "name": "srcPtr", "nodeType": "YulIdentifier", "src": "8613:6:21" },
                                        { "name": "_1", "nodeType": "YulIdentifier", "src": "8621:2:21" }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "8609:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8609:15:21"
                                    },
                                    "variableNames": [
                                      { "name": "srcPtr", "nodeType": "YulIdentifier", "src": "8599:6:21" }
                                    ]
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "i", "nodeType": "YulIdentifier", "src": "8421:1:21" },
                                  { "name": "length", "nodeType": "YulIdentifier", "src": "8424:6:21" }
                                ],
                                "functionName": { "name": "lt", "nodeType": "YulIdentifier", "src": "8418:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "8418:13:21"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "8432:18:21",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "8434:14:21",
                                    "value": {
                                      "arguments": [
                                        { "name": "i", "nodeType": "YulIdentifier", "src": "8443:1:21" },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "8446:1:21",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "8439:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8439:9:21"
                                    },
                                    "variableNames": [{ "name": "i", "nodeType": "YulIdentifier", "src": "8434:1:21" }]
                                  }
                                ]
                              },
                              "pre": { "nodeType": "YulBlock", "src": "8414:3:21", "statements": [] },
                              "src": "8410:224:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "8643:12:21",
                              "value": { "name": "pos_1", "nodeType": "YulIdentifier", "src": "8650:5:21" },
                              "variableNames": [{ "name": "end", "nodeType": "YulIdentifier", "src": "8643:3:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_array$_t_address_payable_$dyn_memory_ptr__to_t_array$_t_address_payable_$dyn_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "pos", "nodeType": "YulTypedName", "src": "8214:3:21", "type": "" },
                          { "name": "value0", "nodeType": "YulTypedName", "src": "8219:6:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "end", "nodeType": "YulTypedName", "src": "8230:3:21", "type": "" }
                        ],
                        "src": "8053:608:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "8848:449:21",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "8858:16:21",
                              "value": { "name": "pos", "nodeType": "YulIdentifier", "src": "8871:3:21" },
                              "variables": [
                                { "name": "pos_1", "nodeType": "YulTypedName", "src": "8862:5:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "8883:27:21",
                              "value": {
                                "arguments": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "8903:6:21" }],
                                "functionName": { "name": "sload", "nodeType": "YulIdentifier", "src": "8897:5:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "8897:13:21"
                              },
                              "variables": [
                                { "name": "length", "nodeType": "YulTypedName", "src": "8887:6:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "8919:12:21",
                              "value": { "name": "pos", "nodeType": "YulIdentifier", "src": "8928:3:21" },
                              "variableNames": [{ "name": "pos_1", "nodeType": "YulIdentifier", "src": "8919:5:21" }]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8947:1:21",
                                    "type": "",
                                    "value": "0"
                                  },
                                  { "name": "value0", "nodeType": "YulIdentifier", "src": "8950:6:21" }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "8940:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "8940:17:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "8940:17:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "8966:14:21",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8976:4:21",
                                "type": "",
                                "value": "0x20"
                              },
                              "variables": [
                                { "name": "_1", "nodeType": "YulTypedName", "src": "8970:2:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "8989:30:21",
                              "value": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9013:1:21",
                                    "type": "",
                                    "value": "0"
                                  },
                                  { "name": "_1", "nodeType": "YulIdentifier", "src": "9016:2:21" }
                                ],
                                "functionName": {
                                  "name": "keccak256",
                                  "nodeType": "YulIdentifier",
                                  "src": "9003:9:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9003:16:21"
                              },
                              "variables": [
                                { "name": "srcPtr", "nodeType": "YulTypedName", "src": "8993:6:21", "type": "" }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "9028:10:21",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9037:1:21",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [{ "name": "i", "nodeType": "YulTypedName", "src": "9032:1:21", "type": "" }]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "9096:174:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        { "name": "pos_1", "nodeType": "YulIdentifier", "src": "9117:5:21" },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                { "name": "srcPtr", "nodeType": "YulIdentifier", "src": "9134:6:21" }
                                              ],
                                              "functionName": {
                                                "name": "sload",
                                                "nodeType": "YulIdentifier",
                                                "src": "9128:5:21"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "9128:13:21"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "9143:42:21",
                                              "type": "",
                                              "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "and",
                                            "nodeType": "YulIdentifier",
                                            "src": "9124:3:21"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "9124:62:21"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "9110:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "9110:77:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "9110:77:21"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "9200:23:21",
                                    "value": {
                                      "arguments": [
                                        { "name": "pos_1", "nodeType": "YulIdentifier", "src": "9213:5:21" },
                                        { "name": "_1", "nodeType": "YulIdentifier", "src": "9220:2:21" }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "9209:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "9209:14:21"
                                    },
                                    "variableNames": [
                                      { "name": "pos_1", "nodeType": "YulIdentifier", "src": "9200:5:21" }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "9236:24:21",
                                    "value": {
                                      "arguments": [
                                        { "name": "srcPtr", "nodeType": "YulIdentifier", "src": "9250:6:21" },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "9258:1:21",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "9246:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "9246:14:21"
                                    },
                                    "variableNames": [
                                      { "name": "srcPtr", "nodeType": "YulIdentifier", "src": "9236:6:21" }
                                    ]
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "i", "nodeType": "YulIdentifier", "src": "9058:1:21" },
                                  { "name": "length", "nodeType": "YulIdentifier", "src": "9061:6:21" }
                                ],
                                "functionName": { "name": "lt", "nodeType": "YulIdentifier", "src": "9055:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "9055:13:21"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "9069:18:21",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "9071:14:21",
                                    "value": {
                                      "arguments": [
                                        { "name": "i", "nodeType": "YulIdentifier", "src": "9080:1:21" },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "9083:1:21",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "9076:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "9076:9:21"
                                    },
                                    "variableNames": [{ "name": "i", "nodeType": "YulIdentifier", "src": "9071:1:21" }]
                                  }
                                ]
                              },
                              "pre": { "nodeType": "YulBlock", "src": "9051:3:21", "statements": [] },
                              "src": "9047:223:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "9279:12:21",
                              "value": { "name": "pos_1", "nodeType": "YulIdentifier", "src": "9286:5:21" },
                              "variableNames": [{ "name": "end", "nodeType": "YulIdentifier", "src": "9279:3:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_array$_t_address_payable_$dyn_storage__to_t_array$_t_address_payable_$dyn_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "pos", "nodeType": "YulTypedName", "src": "8824:3:21", "type": "" },
                          { "name": "value0", "nodeType": "YulTypedName", "src": "8829:6:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "end", "nodeType": "YulTypedName", "src": "8840:3:21", "type": "" }
                        ],
                        "src": "8666:631:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "9334:152:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9351:1:21",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9354:77:21",
                                    "type": "",
                                    "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "9344:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "9344:88:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9344:88:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9448:1:21",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9451:4:21",
                                    "type": "",
                                    "value": "0x32"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "9441:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "9441:15:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9441:15:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9472:1:21",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9475:4:21",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": { "name": "revert", "nodeType": "YulIdentifier", "src": "9465:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "9465:15:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9465:15:21"
                            }
                          ]
                        },
                        "name": "panic_error_0x32",
                        "nodeType": "YulFunctionDefinition",
                        "src": "9302:184:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "9523:152:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9540:1:21",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9543:77:21",
                                    "type": "",
                                    "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "9533:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "9533:88:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9533:88:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9637:1:21",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9640:4:21",
                                    "type": "",
                                    "value": "0x11"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "9630:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "9630:15:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9630:15:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9661:1:21",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9664:4:21",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": { "name": "revert", "nodeType": "YulIdentifier", "src": "9654:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "9654:15:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "9654:15:21"
                            }
                          ]
                        },
                        "name": "panic_error_0x11",
                        "nodeType": "YulFunctionDefinition",
                        "src": "9491:184:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "9727:148:21",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "9818:22:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nodeType": "YulIdentifier",
                                        "src": "9820:16:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "9820:18:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "9820:18:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "value", "nodeType": "YulIdentifier", "src": "9743:5:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9750:66:21",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": { "name": "eq", "nodeType": "YulIdentifier", "src": "9740:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "9740:77:21"
                              },
                              "nodeType": "YulIf",
                              "src": "9737:103:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "9849:20:21",
                              "value": {
                                "arguments": [
                                  { "name": "value", "nodeType": "YulIdentifier", "src": "9860:5:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9867:1:21",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "9856:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "9856:13:21"
                              },
                              "variableNames": [{ "name": "ret", "nodeType": "YulIdentifier", "src": "9849:3:21" }]
                            }
                          ]
                        },
                        "name": "increment_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [{ "name": "value", "nodeType": "YulTypedName", "src": "9709:5:21", "type": "" }],
                        "returnVariables": [
                          { "name": "ret", "nodeType": "YulTypedName", "src": "9719:3:21", "type": "" }
                        ],
                        "src": "9680:195:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "10054:162:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "10071:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10082:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "10064:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "10064:21:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10064:21:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "10105:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "10116:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "10101:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10101:18:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10121:2:21",
                                    "type": "",
                                    "value": "12"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "10094:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "10094:30:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10094:30:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "10144:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "10155:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "10140:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10140:18:21"
                                  },
                                  {
                                    "hexValue": "4e6f206761732070756d7073",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "10160:14:21",
                                    "type": "",
                                    "value": "No gas pumps"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "10133:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "10133:42:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10133:42:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "10184:26:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "10196:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10207:2:21",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "10192:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "10192:18:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "10184:4:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_c1abf30d4e27019b56298306476010b3f6ef9e55a9cfe90bcb5f6dc16e369b9d__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "10031:9:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "10045:4:21", "type": "" }
                        ],
                        "src": "9880:336:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "10269:77:21",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "10279:16:21",
                              "value": {
                                "arguments": [
                                  { "name": "x", "nodeType": "YulIdentifier", "src": "10290:1:21" },
                                  { "name": "y", "nodeType": "YulIdentifier", "src": "10293:1:21" }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "10286:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "10286:9:21"
                              },
                              "variableNames": [{ "name": "sum", "nodeType": "YulIdentifier", "src": "10279:3:21" }]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "10318:22:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nodeType": "YulIdentifier",
                                        "src": "10320:16:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "10320:18:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "10320:18:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "x", "nodeType": "YulIdentifier", "src": "10310:1:21" },
                                  { "name": "sum", "nodeType": "YulIdentifier", "src": "10313:3:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "10307:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "10307:10:21"
                              },
                              "nodeType": "YulIf",
                              "src": "10304:36:21"
                            }
                          ]
                        },
                        "name": "checked_add_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "x", "nodeType": "YulTypedName", "src": "10252:1:21", "type": "" },
                          { "name": "y", "nodeType": "YulTypedName", "src": "10255:1:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "sum", "nodeType": "YulTypedName", "src": "10261:3:21", "type": "" }
                        ],
                        "src": "10221:125:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "10397:228:21",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "10428:168:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "10449:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "10452:77:21",
                                          "type": "",
                                          "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "10442:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "10442:88:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "10442:88:21"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "10550:1:21",
                                          "type": "",
                                          "value": "4"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "10553:4:21",
                                          "type": "",
                                          "value": "0x12"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "10543:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "10543:15:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "10543:15:21"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "10578:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "10581:4:21",
                                          "type": "",
                                          "value": "0x24"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "10571:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "10571:15:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "10571:15:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [{ "name": "y", "nodeType": "YulIdentifier", "src": "10417:1:21" }],
                                "functionName": { "name": "iszero", "nodeType": "YulIdentifier", "src": "10410:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "10410:9:21"
                              },
                              "nodeType": "YulIf",
                              "src": "10407:189:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "10605:14:21",
                              "value": {
                                "arguments": [
                                  { "name": "x", "nodeType": "YulIdentifier", "src": "10614:1:21" },
                                  { "name": "y", "nodeType": "YulIdentifier", "src": "10617:1:21" }
                                ],
                                "functionName": { "name": "div", "nodeType": "YulIdentifier", "src": "10610:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "10610:9:21"
                              },
                              "variableNames": [{ "name": "r", "nodeType": "YulIdentifier", "src": "10605:1:21" }]
                            }
                          ]
                        },
                        "name": "checked_div_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "x", "nodeType": "YulTypedName", "src": "10382:1:21", "type": "" },
                          { "name": "y", "nodeType": "YulTypedName", "src": "10385:1:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "r", "nodeType": "YulTypedName", "src": "10391:1:21", "type": "" }
                        ],
                        "src": "10351:274:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "10679:79:21",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "10689:17:21",
                              "value": {
                                "arguments": [
                                  { "name": "x", "nodeType": "YulIdentifier", "src": "10701:1:21" },
                                  { "name": "y", "nodeType": "YulIdentifier", "src": "10704:1:21" }
                                ],
                                "functionName": { "name": "sub", "nodeType": "YulIdentifier", "src": "10697:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "10697:9:21"
                              },
                              "variableNames": [{ "name": "diff", "nodeType": "YulIdentifier", "src": "10689:4:21" }]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "10730:22:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nodeType": "YulIdentifier",
                                        "src": "10732:16:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "10732:18:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "10732:18:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "diff", "nodeType": "YulIdentifier", "src": "10721:4:21" },
                                  { "name": "x", "nodeType": "YulIdentifier", "src": "10727:1:21" }
                                ],
                                "functionName": { "name": "gt", "nodeType": "YulIdentifier", "src": "10718:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "10718:11:21"
                              },
                              "nodeType": "YulIf",
                              "src": "10715:37:21"
                            }
                          ]
                        },
                        "name": "checked_sub_t_uint256",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "x", "nodeType": "YulTypedName", "src": "10661:1:21", "type": "" },
                          { "name": "y", "nodeType": "YulTypedName", "src": "10664:1:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "diff", "nodeType": "YulTypedName", "src": "10670:4:21", "type": "" }
                        ],
                        "src": "10630:128:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "10937:179:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "10954:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10965:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "10947:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "10947:21:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10947:21:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "10988:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "10999:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "10984:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10984:18:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11004:2:21",
                                    "type": "",
                                    "value": "29"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "10977:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "10977:30:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "10977:30:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "11027:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11038:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "11023:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11023:18:21"
                                  },
                                  {
                                    "hexValue": "5265636f766572793a20696e636f6e73697374656e7420617272617973",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "11043:31:21",
                                    "type": "",
                                    "value": "Recovery: inconsistent arrays"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "11016:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "11016:59:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11016:59:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "11084:26:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "11096:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11107:2:21",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "11092:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "11092:18:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "11084:4:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_12227dcd596297e685bdc66ab01e81b5228df9a6bdd1fe7960df703f31587551__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "10914:9:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "10928:4:21", "type": "" }
                        ],
                        "src": "10763:353:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "11205:185:21",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "11251:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "11260:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "11263:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "11253:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "11253:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "11253:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "11226:7:21" },
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "11235:9:21" }
                                    ],
                                    "functionName": { "name": "sub", "nodeType": "YulIdentifier", "src": "11222:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11222:23:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11247:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "slt", "nodeType": "YulIdentifier", "src": "11218:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "11218:32:21"
                              },
                              "nodeType": "YulIf",
                              "src": "11215:52:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "11276:36:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "11302:9:21" }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "11289:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11289:23:21"
                              },
                              "variables": [
                                { "name": "value", "nodeType": "YulTypedName", "src": "11280:5:21", "type": "" }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [{ "name": "value", "nodeType": "YulIdentifier", "src": "11354:5:21" }],
                                "functionName": {
                                  "name": "validator_revert_address_payable",
                                  "nodeType": "YulIdentifier",
                                  "src": "11321:32:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11321:39:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11321:39:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "11369:15:21",
                              "value": { "name": "value", "nodeType": "YulIdentifier", "src": "11379:5:21" },
                              "variableNames": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "11369:6:21" }]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_contract$_IERC20_$900",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "11171:9:21", "type": "" },
                          { "name": "dataEnd", "nodeType": "YulTypedName", "src": "11182:7:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "value0", "nodeType": "YulTypedName", "src": "11194:6:21", "type": "" }
                        ],
                        "src": "11121:269:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "11569:235:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "11586:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11597:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "11579:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "11579:21:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11579:21:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "11620:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11631:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "11616:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11616:18:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11636:2:21",
                                    "type": "",
                                    "value": "45"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "11609:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "11609:30:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11609:30:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "11659:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11670:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "11655:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11655:18:21"
                                  },
                                  {
                                    "hexValue": "4e6f7420656e6f7567682066756e647320666f7220616c6c2077616c6c657473",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "11675:34:21",
                                    "type": "",
                                    "value": "Not enough funds for all wallets"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "11648:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "11648:62:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11648:62:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "11730:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11741:2:21",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "11726:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11726:18:21"
                                  },
                                  {
                                    "hexValue": "20746f2062652066696c6c6564",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "11746:15:21",
                                    "type": "",
                                    "value": " to be filled"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "11719:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "11719:43:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "11719:43:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "11771:27:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "11783:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11794:3:21",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "11779:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "11779:19:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "11771:4:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_50f9407a4adcdf6ae12e0d869562d9d87ab7a621231d402d6cee2f0011d7245a__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "11546:9:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "11560:4:21", "type": "" }
                        ],
                        "src": "11395:409:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "11894:185:21",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "11940:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "11949:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "11952:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "11942:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "11942:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "11942:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "11915:7:21" },
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "11924:9:21" }
                                    ],
                                    "functionName": { "name": "sub", "nodeType": "YulIdentifier", "src": "11911:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11911:23:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11936:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "slt", "nodeType": "YulIdentifier", "src": "11907:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "11907:32:21"
                              },
                              "nodeType": "YulIf",
                              "src": "11904:52:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "11965:36:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "11991:9:21" }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "11978:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11978:23:21"
                              },
                              "variables": [
                                { "name": "value", "nodeType": "YulTypedName", "src": "11969:5:21", "type": "" }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [{ "name": "value", "nodeType": "YulIdentifier", "src": "12043:5:21" }],
                                "functionName": {
                                  "name": "validator_revert_address_payable",
                                  "nodeType": "YulIdentifier",
                                  "src": "12010:32:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12010:39:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12010:39:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "12058:15:21",
                              "value": { "name": "value", "nodeType": "YulIdentifier", "src": "12068:5:21" },
                              "variableNames": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "12058:6:21" }]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_contract$_IERC721_$819",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "11860:9:21", "type": "" },
                          { "name": "dataEnd", "nodeType": "YulTypedName", "src": "11871:7:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "value0", "nodeType": "YulTypedName", "src": "11883:6:21", "type": "" }
                        ],
                        "src": "11809:270:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "12241:241:21",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "12251:26:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "12263:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12274:2:21",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "12259:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "12259:18:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "12251:4:21" }]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "12286:52:21",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12296:42:21",
                                "type": "",
                                "value": "0xffffffffffffffffffffffffffffffffffffffff"
                              },
                              "variables": [
                                { "name": "_1", "nodeType": "YulTypedName", "src": "12290:2:21", "type": "" }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "12354:9:21" },
                                  {
                                    "arguments": [
                                      { "name": "value0", "nodeType": "YulIdentifier", "src": "12369:6:21" },
                                      { "name": "_1", "nodeType": "YulIdentifier", "src": "12377:2:21" }
                                    ],
                                    "functionName": { "name": "and", "nodeType": "YulIdentifier", "src": "12365:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12365:15:21"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "12347:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "12347:34:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12347:34:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "12401:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12412:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "12397:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12397:18:21"
                                  },
                                  {
                                    "arguments": [
                                      { "name": "value1", "nodeType": "YulIdentifier", "src": "12421:6:21" },
                                      { "name": "_1", "nodeType": "YulIdentifier", "src": "12429:2:21" }
                                    ],
                                    "functionName": { "name": "and", "nodeType": "YulIdentifier", "src": "12417:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12417:15:21"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "12390:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "12390:43:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12390:43:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "12453:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12464:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "12449:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12449:18:21"
                                  },
                                  { "name": "value2", "nodeType": "YulIdentifier", "src": "12469:6:21" }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "12442:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "12442:34:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12442:34:21"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "12194:9:21", "type": "" },
                          { "name": "value2", "nodeType": "YulTypedName", "src": "12205:6:21", "type": "" },
                          { "name": "value1", "nodeType": "YulTypedName", "src": "12213:6:21", "type": "" },
                          { "name": "value0", "nodeType": "YulTypedName", "src": "12221:6:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "12232:4:21", "type": "" }
                        ],
                        "src": "12084:398:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "12565:185:21",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "12611:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "12620:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "12623:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "12613:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "12613:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "12613:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "12586:7:21" },
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "12595:9:21" }
                                    ],
                                    "functionName": { "name": "sub", "nodeType": "YulIdentifier", "src": "12582:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12582:23:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12607:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "slt", "nodeType": "YulIdentifier", "src": "12578:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "12578:32:21"
                              },
                              "nodeType": "YulIf",
                              "src": "12575:52:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "12636:36:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "12662:9:21" }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "12649:12:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12649:23:21"
                              },
                              "variables": [
                                { "name": "value", "nodeType": "YulTypedName", "src": "12640:5:21", "type": "" }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [{ "name": "value", "nodeType": "YulIdentifier", "src": "12714:5:21" }],
                                "functionName": {
                                  "name": "validator_revert_address_payable",
                                  "nodeType": "YulIdentifier",
                                  "src": "12681:32:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12681:39:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12681:39:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "12729:15:21",
                              "value": { "name": "value", "nodeType": "YulIdentifier", "src": "12739:5:21" },
                              "variableNames": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "12729:6:21" }]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_address_payable",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "12531:9:21", "type": "" },
                          { "name": "dataEnd", "nodeType": "YulTypedName", "src": "12542:7:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "value0", "nodeType": "YulTypedName", "src": "12554:6:21", "type": "" }
                        ],
                        "src": "12487:263:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "12929:181:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "12946:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12957:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "12939:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "12939:21:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12939:21:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "12980:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12991:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "12976:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12976:18:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12996:2:21",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "12969:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "12969:30:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "12969:30:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "13019:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "13030:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "13015:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13015:18:21"
                                  },
                                  {
                                    "hexValue": "496e74657266616365446574656374696f6e3a2077726f6e672076616c7565",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "13035:33:21",
                                    "type": "",
                                    "value": "InterfaceDetection: wrong value"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "13008:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "13008:61:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "13008:61:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "13078:26:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "13090:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13101:2:21",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "13086:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "13086:18:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "13078:4:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "12906:9:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "12920:4:21", "type": "" }
                        ],
                        "src": "12755:355:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "13289:226:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "13306:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13317:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "13299:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "13299:21:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "13299:21:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "13340:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "13351:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "13336:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13336:18:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13356:2:21",
                                    "type": "",
                                    "value": "36"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "13329:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "13329:30:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "13329:30:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "13379:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "13390:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "13375:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13375:18:21"
                                  },
                                  {
                                    "hexValue": "41646472657373206e6f742070617274206f6620746865204761732053746174",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "13395:34:21",
                                    "type": "",
                                    "value": "Address not part of the Gas Stat"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "13368:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "13368:62:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "13368:62:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "13450:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "13461:2:21",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "13446:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13446:18:21"
                                  },
                                  {
                                    "hexValue": "696f6e20",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "13466:6:21",
                                    "type": "",
                                    "value": "ion "
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "13439:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "13439:34:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "13439:34:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "13482:27:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "13494:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13505:3:21",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "13490:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "13490:19:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "13482:4:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_7e652ff6a488637940a02d29f8449254de8a14c7dab61e902488aa9b3477438f__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "13266:9:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "13280:4:21", "type": "" }
                        ],
                        "src": "13115:400:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "13694:174:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "13711:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13722:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "13704:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "13704:21:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "13704:21:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "13745:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "13756:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "13741:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13741:18:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13761:2:21",
                                    "type": "",
                                    "value": "24"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "13734:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "13734:30:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "13734:30:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "13784:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "13795:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "13780:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13780:18:21"
                                  },
                                  {
                                    "hexValue": "4f776e6572736869703a206e6f7420746865206f776e6572",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "13800:26:21",
                                    "type": "",
                                    "value": "Ownership: not the owner"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "13773:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "13773:54:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "13773:54:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "13836:26:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "13848:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13859:2:21",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "13844:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "13844:18:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "13836:4:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "13671:9:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "13685:4:21", "type": "" }
                        ],
                        "src": "13520:348:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "14002:168:21",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "14012:26:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "14024:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14035:2:21",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "14020:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "14020:18:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "14012:4:21" }]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "14054:9:21" },
                                  {
                                    "arguments": [
                                      { "name": "value0", "nodeType": "YulIdentifier", "src": "14069:6:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "14077:42:21",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": { "name": "and", "nodeType": "YulIdentifier", "src": "14065:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14065:55:21"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "14047:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "14047:74:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "14047:74:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "14141:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "14152:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "14137:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14137:18:21"
                                  },
                                  { "name": "value1", "nodeType": "YulIdentifier", "src": "14157:6:21" }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "14130:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "14130:34:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "14130:34:21"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "13963:9:21", "type": "" },
                          { "name": "value1", "nodeType": "YulTypedName", "src": "13974:6:21", "type": "" },
                          { "name": "value0", "nodeType": "YulTypedName", "src": "13982:6:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "13993:4:21", "type": "" }
                        ],
                        "src": "13873:297:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "14349:179:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "14366:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14377:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "14359:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "14359:21:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "14359:21:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "14400:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "14411:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "14396:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14396:18:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14416:2:21",
                                    "type": "",
                                    "value": "29"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "14389:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "14389:30:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "14389:30:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "14439:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "14450:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "14435:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14435:18:21"
                                  },
                                  {
                                    "hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "14455:31:21",
                                    "type": "",
                                    "value": "Address: insufficient balance"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "14428:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "14428:59:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "14428:59:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "14496:26:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "14508:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14519:2:21",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "14504:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "14504:18:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "14496:4:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "14326:9:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "14340:4:21", "type": "" }
                        ],
                        "src": "14175:353:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "14724:14:21",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "14726:10:21",
                              "value": { "name": "pos", "nodeType": "YulIdentifier", "src": "14733:3:21" },
                              "variableNames": [{ "name": "end", "nodeType": "YulIdentifier", "src": "14726:3:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [{ "name": "pos", "nodeType": "YulTypedName", "src": "14708:3:21", "type": "" }],
                        "returnVariables": [
                          { "name": "end", "nodeType": "YulTypedName", "src": "14716:3:21", "type": "" }
                        ],
                        "src": "14533:205:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "14917:248:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "14934:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14945:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "14927:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "14927:21:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "14927:21:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "14968:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "14979:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "14964:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14964:18:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14984:2:21",
                                    "type": "",
                                    "value": "58"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "14957:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "14957:30:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "14957:30:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "15007:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "15018:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "15003:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "15003:18:21"
                                  },
                                  {
                                    "hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c2072",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "15023:34:21",
                                    "type": "",
                                    "value": "Address: unable to send value, r"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "14996:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "14996:62:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "14996:62:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "15078:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "15089:2:21",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "15074:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "15074:18:21"
                                  },
                                  {
                                    "hexValue": "6563697069656e74206d61792068617665207265766572746564",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "15094:28:21",
                                    "type": "",
                                    "value": "ecipient may have reverted"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "15067:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "15067:56:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "15067:56:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "15132:27:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "15144:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15155:3:21",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "15140:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "15140:19:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "15132:4:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "14894:9:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "14908:4:21", "type": "" }
                        ],
                        "src": "14743:422:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "15248:199:21",
                          "statements": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "15294:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "15303:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "15306:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "15296:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "15296:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "15296:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "dataEnd", "nodeType": "YulIdentifier", "src": "15269:7:21" },
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "15278:9:21" }
                                    ],
                                    "functionName": { "name": "sub", "nodeType": "YulIdentifier", "src": "15265:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "15265:23:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15290:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "slt", "nodeType": "YulIdentifier", "src": "15261:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "15261:32:21"
                              },
                              "nodeType": "YulIf",
                              "src": "15258:52:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "15319:29:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "15338:9:21" }
                                ],
                                "functionName": { "name": "mload", "nodeType": "YulIdentifier", "src": "15332:5:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "15332:16:21"
                              },
                              "variables": [
                                { "name": "value", "nodeType": "YulTypedName", "src": "15323:5:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "15401:16:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "15410:1:21",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "15413:1:21",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nodeType": "YulIdentifier",
                                        "src": "15403:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "15403:12:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "15403:12:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "value", "nodeType": "YulIdentifier", "src": "15370:5:21" },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              { "name": "value", "nodeType": "YulIdentifier", "src": "15391:5:21" }
                                            ],
                                            "functionName": {
                                              "name": "iszero",
                                              "nodeType": "YulIdentifier",
                                              "src": "15384:6:21"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "15384:13:21"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "15377:6:21"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "15377:21:21"
                                      }
                                    ],
                                    "functionName": { "name": "eq", "nodeType": "YulIdentifier", "src": "15367:2:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "15367:32:21"
                                  }
                                ],
                                "functionName": { "name": "iszero", "nodeType": "YulIdentifier", "src": "15360:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "15360:40:21"
                              },
                              "nodeType": "YulIf",
                              "src": "15357:60:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "15426:15:21",
                              "value": { "name": "value", "nodeType": "YulIdentifier", "src": "15436:5:21" },
                              "variableNames": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "15426:6:21" }]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_bool_fromMemory",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "15214:9:21", "type": "" },
                          { "name": "dataEnd", "nodeType": "YulTypedName", "src": "15225:7:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "value0", "nodeType": "YulTypedName", "src": "15237:6:21", "type": "" }
                        ],
                        "src": "15170:277:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "15626:232:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "15643:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15654:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "15636:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "15636:21:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "15636:21:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "15677:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "15688:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "15673:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "15673:18:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15693:2:21",
                                    "type": "",
                                    "value": "42"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "15666:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "15666:30:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "15666:30:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "15716:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "15727:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "15712:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "15712:18:21"
                                  },
                                  {
                                    "hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "15732:34:21",
                                    "type": "",
                                    "value": "SafeERC20: ERC20 operation did n"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "15705:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "15705:62:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "15705:62:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "15787:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "15798:2:21",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "15783:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "15783:18:21"
                                  },
                                  {
                                    "hexValue": "6f742073756363656564",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "15803:12:21",
                                    "type": "",
                                    "value": "ot succeed"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "15776:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "15776:40:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "15776:40:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "15825:27:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "15837:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15848:3:21",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "15833:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "15833:19:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "15825:4:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "15603:9:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "15617:4:21", "type": "" }
                        ],
                        "src": "15452:406:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "16037:228:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "16054:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16065:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "16047:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "16047:21:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "16047:21:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "16088:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "16099:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "16084:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "16084:18:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16104:2:21",
                                    "type": "",
                                    "value": "38"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "16077:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "16077:30:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "16077:30:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "16127:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "16138:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "16123:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "16123:18:21"
                                  },
                                  {
                                    "hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "16143:34:21",
                                    "type": "",
                                    "value": "Address: insufficient balance fo"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "16116:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "16116:62:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "16116:62:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "16198:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "16209:2:21",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "16194:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "16194:18:21"
                                  },
                                  {
                                    "hexValue": "722063616c6c",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "16214:8:21",
                                    "type": "",
                                    "value": "r call"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "16187:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "16187:36:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "16187:36:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "16232:27:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "16244:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16255:3:21",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "16240:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "16240:19:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "16232:4:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "16014:9:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "16028:4:21", "type": "" }
                        ],
                        "src": "15863:402:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "16336:184:21",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "16346:10:21",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16355:1:21",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                { "name": "i", "nodeType": "YulTypedName", "src": "16350:1:21", "type": "" }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "16415:63:21",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            { "name": "dst", "nodeType": "YulIdentifier", "src": "16440:3:21" },
                                            { "name": "i", "nodeType": "YulIdentifier", "src": "16445:1:21" }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "16436:3:21"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "16436:11:21"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                { "name": "src", "nodeType": "YulIdentifier", "src": "16459:3:21" },
                                                { "name": "i", "nodeType": "YulIdentifier", "src": "16464:1:21" }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nodeType": "YulIdentifier",
                                                "src": "16455:3:21"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "16455:11:21"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mload",
                                            "nodeType": "YulIdentifier",
                                            "src": "16449:5:21"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "16449:18:21"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "16429:6:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "16429:39:21"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "16429:39:21"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  { "name": "i", "nodeType": "YulIdentifier", "src": "16376:1:21" },
                                  { "name": "length", "nodeType": "YulIdentifier", "src": "16379:6:21" }
                                ],
                                "functionName": { "name": "lt", "nodeType": "YulIdentifier", "src": "16373:2:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "16373:13:21"
                              },
                              "nodeType": "YulForLoop",
                              "post": {
                                "nodeType": "YulBlock",
                                "src": "16387:19:21",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "16389:15:21",
                                    "value": {
                                      "arguments": [
                                        { "name": "i", "nodeType": "YulIdentifier", "src": "16398:1:21" },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "16401:2:21",
                                          "type": "",
                                          "value": "32"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "16394:3:21"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "16394:10:21"
                                    },
                                    "variableNames": [{ "name": "i", "nodeType": "YulIdentifier", "src": "16389:1:21" }]
                                  }
                                ]
                              },
                              "pre": { "nodeType": "YulBlock", "src": "16369:3:21", "statements": [] },
                              "src": "16365:113:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "dst", "nodeType": "YulIdentifier", "src": "16498:3:21" },
                                      { "name": "length", "nodeType": "YulIdentifier", "src": "16503:6:21" }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "16494:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "16494:16:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16512:1:21",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "16487:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "16487:27:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "16487:27:21"
                            }
                          ]
                        },
                        "name": "copy_memory_to_memory_with_cleanup",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "src", "nodeType": "YulTypedName", "src": "16314:3:21", "type": "" },
                          { "name": "dst", "nodeType": "YulTypedName", "src": "16319:3:21", "type": "" },
                          { "name": "length", "nodeType": "YulTypedName", "src": "16324:6:21", "type": "" }
                        ],
                        "src": "16270:250:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "16662:150:21",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "16672:27:21",
                              "value": {
                                "arguments": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "16692:6:21" }],
                                "functionName": { "name": "mload", "nodeType": "YulIdentifier", "src": "16686:5:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "16686:13:21"
                              },
                              "variables": [
                                { "name": "length", "nodeType": "YulTypedName", "src": "16676:6:21", "type": "" }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "value0", "nodeType": "YulIdentifier", "src": "16747:6:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "16755:4:21",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "16743:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "16743:17:21"
                                  },
                                  { "name": "pos", "nodeType": "YulIdentifier", "src": "16762:3:21" },
                                  { "name": "length", "nodeType": "YulIdentifier", "src": "16767:6:21" }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nodeType": "YulIdentifier",
                                  "src": "16708:34:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16708:66:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "16708:66:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "16783:23:21",
                              "value": {
                                "arguments": [
                                  { "name": "pos", "nodeType": "YulIdentifier", "src": "16794:3:21" },
                                  { "name": "length", "nodeType": "YulIdentifier", "src": "16799:6:21" }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "16790:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "16790:16:21"
                              },
                              "variableNames": [{ "name": "end", "nodeType": "YulIdentifier", "src": "16783:3:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "pos", "nodeType": "YulTypedName", "src": "16638:3:21", "type": "" },
                          { "name": "value0", "nodeType": "YulTypedName", "src": "16643:6:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "end", "nodeType": "YulTypedName", "src": "16654:3:21", "type": "" }
                        ],
                        "src": "16525:287:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "16991:179:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "17008:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17019:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "17001:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "17001:21:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "17001:21:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "17042:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "17053:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "17038:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "17038:18:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17058:2:21",
                                    "type": "",
                                    "value": "29"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "17031:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "17031:30:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "17031:30:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "17081:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "17092:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "17077:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "17077:18:21"
                                  },
                                  {
                                    "hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
                                    "kind": "string",
                                    "nodeType": "YulLiteral",
                                    "src": "17097:31:21",
                                    "type": "",
                                    "value": "Address: call to non-contract"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "17070:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "17070:59:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "17070:59:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "17138:26:21",
                              "value": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "17150:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17161:2:21",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "17146:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "17146:18:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "17138:4:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "16968:9:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "16982:4:21", "type": "" }
                        ],
                        "src": "16817:353:21"
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "17296:334:21",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  { "name": "headStart", "nodeType": "YulIdentifier", "src": "17313:9:21" },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17324:2:21",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "17306:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "17306:21:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "17306:21:21"
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "17336:27:21",
                              "value": {
                                "arguments": [{ "name": "value0", "nodeType": "YulIdentifier", "src": "17356:6:21" }],
                                "functionName": { "name": "mload", "nodeType": "YulIdentifier", "src": "17350:5:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "17350:13:21"
                              },
                              "variables": [
                                { "name": "length", "nodeType": "YulTypedName", "src": "17340:6:21", "type": "" }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "17383:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "17394:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "17379:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "17379:18:21"
                                  },
                                  { "name": "length", "nodeType": "YulIdentifier", "src": "17399:6:21" }
                                ],
                                "functionName": { "name": "mstore", "nodeType": "YulIdentifier", "src": "17372:6:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "17372:34:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "17372:34:21"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "value0", "nodeType": "YulIdentifier", "src": "17454:6:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "17462:2:21",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "17450:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "17450:15:21"
                                  },
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "17471:9:21" },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "17482:2:21",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "17467:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "17467:18:21"
                                  },
                                  { "name": "length", "nodeType": "YulIdentifier", "src": "17487:6:21" }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nodeType": "YulIdentifier",
                                  "src": "17415:34:21"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17415:79:21"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "17415:79:21"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "17503:121:21",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      { "name": "headStart", "nodeType": "YulIdentifier", "src": "17519:9:21" },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              { "name": "length", "nodeType": "YulIdentifier", "src": "17538:6:21" },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "17546:2:21",
                                                "type": "",
                                                "value": "31"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "17534:3:21"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "17534:15:21"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "17551:66:21",
                                            "type": "",
                                            "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "17530:3:21"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "17530:88:21"
                                      }
                                    ],
                                    "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "17515:3:21" },
                                    "nodeType": "YulFunctionCall",
                                    "src": "17515:104:21"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17621:2:21",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": { "name": "add", "nodeType": "YulIdentifier", "src": "17511:3:21" },
                                "nodeType": "YulFunctionCall",
                                "src": "17511:113:21"
                              },
                              "variableNames": [{ "name": "tail", "nodeType": "YulIdentifier", "src": "17503:4:21" }]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          { "name": "headStart", "nodeType": "YulTypedName", "src": "17265:9:21", "type": "" },
                          { "name": "value0", "nodeType": "YulTypedName", "src": "17276:6:21", "type": "" }
                        ],
                        "returnVariables": [
                          { "name": "tail", "nodeType": "YulTypedName", "src": "17287:4:21", "type": "" }
                        ],
                        "src": "17175:455:21"
                      }
                    ]
                  },
                  "contents": "{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function validator_revert_address_payable(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_address_payable(offset) -> value\n    {\n        value := calldataload(offset)\n        validator_revert_address_payable(value)\n    }\n    function abi_decode_tuple_t_array$_t_address_payable_$dyn_memory_ptr(headStart, dataEnd) -> value0\n    {\n        let _1 := 32\n        if slt(sub(dataEnd, headStart), _1) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _2 := 0xffffffffffffffff\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := calldataload(_3)\n        if gt(_4, _2) { panic_error_0x41() }\n        let _5 := shl(5, _4)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(_5, 63), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        let dst := memPtr\n        mstore(memPtr, _4)\n        dst := add(memPtr, _1)\n        let srcEnd := add(add(_3, _5), _1)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_3, _1)\n        for { } lt(src, srcEnd) { src := add(src, _1) }\n        {\n            mstore(dst, abi_decode_address_payable(src))\n            dst := add(dst, _1)\n        }\n        value0 := memPtr\n    }\n    function abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), value1)\n        calldatacopy(add(headStart, 64), value0, value1)\n        mstore(add(add(headStart, value1), 64), 0)\n        tail := add(add(headStart, and(add(value1, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 64)\n    }\n    function abi_decode_array_address_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$900_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_encode_tuple_t_array$_t_address_payable_$dyn_memory_ptr__to_t_array$_t_address_payable_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, and(mload(srcPtr), 0xffffffffffffffffffffffffffffffffffffffff))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address_payable__to_t_address_payable__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$819_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address_payable(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_encode_tuple_t_stringliteral_2d10247a65709fdb3c0696b0ed760a0c246e12f8c496efb56291dd2fe3b0275d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 19)\n        mstore(add(headStart, 64), \"Caller is not owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_array$_t_address_payable_$dyn_memory_ptr__to_t_array$_t_address_payable_$dyn_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let pos_1 := pos\n        let length := mload(value0)\n        pos_1 := pos\n        let _1 := 0x20\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos_1, and(mload(srcPtr), 0xffffffffffffffffffffffffffffffffffffffff))\n            pos_1 := add(pos_1, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        end := pos_1\n    }\n    function abi_encode_tuple_packed_t_array$_t_address_payable_$dyn_storage__to_t_array$_t_address_payable_$dyn_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let pos_1 := pos\n        let length := sload(value0)\n        pos_1 := pos\n        mstore(0, value0)\n        let _1 := 0x20\n        let srcPtr := keccak256(0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos_1, and(sload(srcPtr), 0xffffffffffffffffffffffffffffffffffffffff))\n            pos_1 := add(pos_1, _1)\n            srcPtr := add(srcPtr, 1)\n        }\n        end := pos_1\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_c1abf30d4e27019b56298306476010b3f6ef9e55a9cfe90bcb5f6dc16e369b9d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 12)\n        mstore(add(headStart, 64), \"No gas pumps\")\n        tail := add(headStart, 96)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_12227dcd596297e685bdc66ab01e81b5228df9a6bdd1fe7960df703f31587551__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Recovery: inconsistent arrays\")\n        tail := add(headStart, 96)\n    }\n    function abi_decode_tuple_t_contract$_IERC20_$900(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address_payable(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_50f9407a4adcdf6ae12e0d869562d9d87ab7a621231d402d6cee2f0011d7245a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 45)\n        mstore(add(headStart, 64), \"Not enough funds for all wallets\")\n        mstore(add(headStart, 96), \" to be filled\")\n        tail := add(headStart, 128)\n    }\n    function abi_decode_tuple_t_contract$_IERC721_$819(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address_payable(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_decode_tuple_t_address_payable(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address_payable(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"InterfaceDetection: wrong value\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_7e652ff6a488637940a02d29f8449254de8a14c7dab61e902488aa9b3477438f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"Address not part of the Gas Stat\")\n        mstore(add(headStart, 96), \"ion \")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"Ownership: not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: insufficient balance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 58)\n        mstore(add(headStart, 64), \"Address: unable to send value, r\")\n        mstore(add(headStart, 96), \"ecipient may have reverted\")\n        tail := add(headStart, 128)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 64)\n    }\n}",
                  "id": 21,
                  "language": "Yul",
                  "name": "#utility.yul"
                }
              ],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600436106100c75760003560e01c806389cd7a7b11610074578063c3666c361161004e578063c3666c36146101f8578063f2fde38b14610218578063f7ba94bd1461023857600080fd5b806389cd7a7b1461017c5780638da5cb5b1461019e578063adddc767146101d857600080fd5b806355161913116100a5578063551619131461014157806373c8a9581461014957806377d17db21461016957600080fd5b806301ffc9a7146100cc57806327bd8ff11461010157806331e66e1e14610123575b600080fd5b3480156100d857600080fd5b506100ec6100e73660046116db565b610258565b60405190151581526020015b60405180910390f35b34801561010d57600080fd5b5061012161011c366004611785565b610272565b005b34801561012f57600080fd5b506000366040516100f8929190611868565b610121610452565b34801561015557600080fd5b50610121610164366004611901565b610566565b610121610177366004611785565b610691565b34801561018857600080fd5b5061019161081a565b6040516100f8919061199b565b3480156101aa57600080fd5b506101b3610889565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100f8565b3480156101e457600080fd5b506101b36101f33660046119f5565b6108b5565b34801561020457600080fd5b50610121610213366004611901565b6108ec565b34801561022457600080fd5b50610121610233366004611a0e565b610a8f565b34801561024457600080fd5b50610121610253366004611a2b565b610aa6565b600061026c82610266610c7d565b90610db7565b92915050565b61027a610889565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610313576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f43616c6c6572206973206e6f74206f776e65720000000000000000000000000060448201526064015b60405180910390fd5b806040516103219190611a97565b604051809103902060006040516103389190611ae3565b604051908190038120907f6d86fa282077cbb7e8dfb1e46d681667447b404489db833611f44ac272a3d64e90600090a3805161037b90600090602084019061163c565b5060005b60005481101561044e576000818154811061039c5761039c611b2a565b6000918252602082200154815473ffffffffffffffffffffffffffffffffffffffff909116916001918190859081106103d7576103d7611b2a565b60009182526020808320919091015473ffffffffffffffffffffffffffffffffffffffff9081168452908301939093526040909101902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016929091169190911790558061044681611b88565b91505061037f565b5050565b6000546104bb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f206761732070756d70730000000000000000000000000000000000000000604482015260640161030a565b34600260008282546104cd9190611bc0565b9091555050600080546104e09034611bd3565b905061271081116104f057600080fd5b60005b60005481101561044e57816002600082825461050f9190611c0e565b925050819055506105546000828154811061052c5761052c611b2a565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1683610e91565b8061055e81611b88565b9150506104f3565b610579335b610573610b92565b90610f8a565b84838114801561058857508082145b6105ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5265636f766572793a20696e636f6e73697374656e7420617272617973000000604482015260640161030a565b60005b8181146106875761067f88888381811061060d5761060d611b2a565b90506020020160208101906106229190611a0e565b85858481811061063457610634611b2a565b9050602002013588888581811061064d5761064d611b2a565b90506020020160208101906106629190611a0e565b73ffffffffffffffffffffffffffffffffffffffff16919061100d565b6001016105f1565b5050505050505050565b6000546106fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f206761732070756d70730000000000000000000000000000000000000000604482015260640161030a565b346002600082825461070c9190611bc0565b9091555050805160025460009161072291611bd3565b905067016345785d8a000081116107bb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f4e6f7420656e6f7567682066756e647320666f7220616c6c2077616c6c65747360448201527f20746f2062652066696c6c656400000000000000000000000000000000000000606482015260840161030a565b60005b82518110156108155781600260008282546107d99190611c0e565b925050819055506108038382815181106107f5576107f5611b2a565b602002602001015183610e91565b8061080d81611b88565b9150506107be565b505050565b6060600080548060200260200160405190810160405280929190818152602001828054801561087f57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610854575b5050505050905090565b60006108b0610896610b92565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b600081815481106108c557600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b6108f53361056b565b84838114801561090457508082145b61096a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5265636f766572793a20696e636f6e73697374656e7420617272617973000000604482015260640161030a565b60005b8181146106875785858281811061098657610986611b2a565b905060200201602081019061099b9190611a0e565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd308a8a858181106109c9576109c9611b2a565b90506020020160208101906109de9190611a0e565b8787868181106109f0576109f0611b2a565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b158015610a6c57600080fd5b505af1158015610a80573d6000803e3d6000fd5b5050505080600101905061096d565b610aa33382610a9c610b92565b919061109a565b50565b610aaf3361056b565b82818114610b19576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5265636f766572793a20696e636f6e73697374656e7420617272617973000000604482015260640161030a565b60005b818114610b8a57610b82848483818110610b3857610b38611b2a565b90506020020135878784818110610b5157610b51611b2a565b9050602002016020810190610b669190611a0e565b73ffffffffffffffffffffffffffffffffffffffff16906111c7565b600101610b1c565b505050505050565b60008061026c60017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd611c0e565b73ffffffffffffffffffffffffffffffffffffffff811615610c485781547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff821690811783556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b61044e7f7f5828d0000000000000000000000000000000000000000000000000000000006001610c76610c7d565b9190610cab565b60008061026c60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e611c0e565b7c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610d53576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f496e74657266616365446574656374696f6e3a2077726f6e672076616c756500604482015260640161030a565b7fffffffff00000000000000000000000000000000000000000000000000000000919091166000908152602092909252604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610e075750600061026c565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610e585750600161026c565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b73ffffffffffffffffffffffffffffffffffffffff80831660008181526001602052604090205490911614610f47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f41646472657373206e6f742070617274206f662074686520476173205374617460448201527f696f6e2000000000000000000000000000000000000000000000000000000000606482015260840161030a565b60405173ffffffffffffffffffffffffffffffffffffffff83169082156108fc029083906000818181858888f19350505050158015610815573d6000803e3d6000fd5b815473ffffffffffffffffffffffffffffffffffffffff82811691161461044e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f776e6572736869703a206e6f7420746865206f776e65720000000000000000604482015260640161030a565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610815908490611321565b825473ffffffffffffffffffffffffffffffffffffffff908116908316811461111f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f776e6572736869703a206e6f7420746865206f776e65720000000000000000604482015260640161030a565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146111c15783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35b50505050565b80471015611231576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161030a565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d806000811461128b576040519150601f19603f3d011682016040523d82523d6000602084013e611290565b606091505b5050905080610815576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161030a565b6000611383826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661142d9092919063ffffffff16565b80519091501561081557808060200190518101906113a19190611c21565b610815576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161030a565b606061143c8484600085611444565b949350505050565b6060824710156114d6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161030a565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516114ff9190611c67565b60006040518083038185875af1925050503d806000811461153c576040519150601f19603f3d011682016040523d82523d6000602084013e611541565b606091505b50915091506115528783838761155d565b979650505050505050565b606083156115f35782516000036115ec5773ffffffffffffffffffffffffffffffffffffffff85163b6115ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161030a565b508161143c565b61143c83838151156116085781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030a9190611c83565b8280548282559060005260206000209081019282156116b6579160200282015b828111156116b657825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90911617825560209092019160019091019061165c565b506116c29291506116c6565b5090565b5b808211156116c257600081556001016116c7565b6000602082840312156116ed57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461171d57600080fd5b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610aa357600080fd5b803561178081611753565b919050565b6000602080838503121561179857600080fd5b823567ffffffffffffffff808211156117b057600080fd5b818501915085601f8301126117c457600080fd5b8135818111156117d6576117d6611724565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8301168101818110858211171561181957611819611724565b60405291825284820192508381018501918883111561183757600080fd5b938501935b8285101561185c5761184d85611775565b8452938501939285019261183c565b98975050505050505050565b60208152816020820152818360408301376000818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b60008083601f8401126118c757600080fd5b50813567ffffffffffffffff8111156118df57600080fd5b6020830191508360208260051b85010111156118fa57600080fd5b9250929050565b6000806000806000806060878903121561191a57600080fd5b863567ffffffffffffffff8082111561193257600080fd5b61193e8a838b016118b5565b9098509650602089013591508082111561195757600080fd5b6119638a838b016118b5565b9096509450604089013591508082111561197c57600080fd5b5061198989828a016118b5565b979a9699509497509295939492505050565b6020808252825182820181905260009190848201906040850190845b818110156119e957835173ffffffffffffffffffffffffffffffffffffffff16835292840192918401916001016119b7565b50909695505050505050565b600060208284031215611a0757600080fd5b5035919050565b600060208284031215611a2057600080fd5b813561171d81611753565b60008060008060408587031215611a4157600080fd5b843567ffffffffffffffff80821115611a5957600080fd5b611a65888389016118b5565b90965094506020870135915080821115611a7e57600080fd5b50611a8b878288016118b5565b95989497509550505050565b815160009082906020808601845b83811015611ad757815173ffffffffffffffffffffffffffffffffffffffff1685529382019390820190600101611aa5565b50929695505050505050565b60008183548391508460005260208060002060005b83811015611ad757815473ffffffffffffffffffffffffffffffffffffffff1685529382019360019182019101611af8565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611bb957611bb9611b59565b5060010190565b8082018082111561026c5761026c611b59565b600082611c09577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b8181038181111561026c5761026c611b59565b600060208284031215611c3357600080fd5b8151801515811461171d57600080fd5b60005b83811015611c5e578181015183820152602001611c46565b50506000910152565b60008251611c79818460208701611c43565b9190910192915050565b6020815260008251806020840152611ca2816040850160208701611c43565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea2646970667358221220368585375e0be594f51f637abbaee959972e633217936b6b24d9a9f90d7b1d5a64736f6c63430008110033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC7 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x89CD7A7B GT PUSH2 0x74 JUMPI DUP1 PUSH4 0xC3666C36 GT PUSH2 0x4E JUMPI DUP1 PUSH4 0xC3666C36 EQ PUSH2 0x1F8 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x218 JUMPI DUP1 PUSH4 0xF7BA94BD EQ PUSH2 0x238 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x89CD7A7B EQ PUSH2 0x17C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x19E JUMPI DUP1 PUSH4 0xADDDC767 EQ PUSH2 0x1D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x55161913 GT PUSH2 0xA5 JUMPI DUP1 PUSH4 0x55161913 EQ PUSH2 0x141 JUMPI DUP1 PUSH4 0x73C8A958 EQ PUSH2 0x149 JUMPI DUP1 PUSH4 0x77D17DB2 EQ PUSH2 0x169 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x27BD8FF1 EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x31E66E1E EQ PUSH2 0x123 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEC PUSH2 0xE7 CALLDATASIZE PUSH1 0x4 PUSH2 0x16DB JUMP JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x121 PUSH2 0x11C CALLDATASIZE PUSH1 0x4 PUSH2 0x1785 JUMP JUMPDEST PUSH2 0x272 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 CALLDATASIZE PUSH1 0x40 MLOAD PUSH2 0xF8 SWAP3 SWAP2 SWAP1 PUSH2 0x1868 JUMP JUMPDEST PUSH2 0x121 PUSH2 0x452 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x155 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x121 PUSH2 0x164 CALLDATASIZE PUSH1 0x4 PUSH2 0x1901 JUMP JUMPDEST PUSH2 0x566 JUMP JUMPDEST PUSH2 0x121 PUSH2 0x177 CALLDATASIZE PUSH1 0x4 PUSH2 0x1785 JUMP JUMPDEST PUSH2 0x691 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x188 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x191 PUSH2 0x81A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF8 SWAP2 SWAP1 PUSH2 0x199B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B3 PUSH2 0x889 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B3 PUSH2 0x1F3 CALLDATASIZE PUSH1 0x4 PUSH2 0x19F5 JUMP JUMPDEST PUSH2 0x8B5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x204 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x121 PUSH2 0x213 CALLDATASIZE PUSH1 0x4 PUSH2 0x1901 JUMP JUMPDEST PUSH2 0x8EC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x224 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x121 PUSH2 0x233 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A0E JUMP JUMPDEST PUSH2 0xA8F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x244 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x121 PUSH2 0x253 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A2B JUMP JUMPDEST PUSH2 0xAA6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26C DUP3 PUSH2 0x266 PUSH2 0xC7D JUMP JUMPDEST SWAP1 PUSH2 0xDB7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x27A PUSH2 0x889 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x313 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616C6C6572206973206E6F74206F776E657200000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH2 0x321 SWAP2 SWAP1 PUSH2 0x1A97 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 PUSH1 0x0 PUSH1 0x40 MLOAD PUSH2 0x338 SWAP2 SWAP1 PUSH2 0x1AE3 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 SWAP1 SUB DUP2 KECCAK256 SWAP1 PUSH32 0x6D86FA282077CBB7E8DFB1E46D681667447B404489DB833611F44AC272A3D64E SWAP1 PUSH1 0x0 SWAP1 LOG3 DUP1 MLOAD PUSH2 0x37B SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x163C JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST PUSH1 0x0 SLOAD DUP2 LT ISZERO PUSH2 0x44E JUMPI PUSH1 0x0 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x39C JUMPI PUSH2 0x39C PUSH2 0x1B2A JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 KECCAK256 ADD SLOAD DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP2 PUSH1 0x1 SWAP2 DUP2 SWAP1 DUP6 SWAP1 DUP2 LT PUSH2 0x3D7 JUMPI PUSH2 0x3D7 PUSH2 0x1B2A JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP2 SWAP1 SWAP2 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND DUP5 MSTORE SWAP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP3 SWAP1 SWAP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 PUSH2 0x446 DUP2 PUSH2 0x1B88 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x37F JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x4BB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F206761732070756D70730000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x30A JUMP JUMPDEST CALLVALUE PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x4CD SWAP2 SWAP1 PUSH2 0x1BC0 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP1 SLOAD PUSH2 0x4E0 SWAP1 CALLVALUE PUSH2 0x1BD3 JUMP JUMPDEST SWAP1 POP PUSH2 0x2710 DUP2 GT PUSH2 0x4F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x0 SLOAD DUP2 LT ISZERO PUSH2 0x44E JUMPI DUP2 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x50F SWAP2 SWAP1 PUSH2 0x1C0E JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x554 PUSH1 0x0 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x52C JUMPI PUSH2 0x52C PUSH2 0x1B2A JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH2 0xE91 JUMP JUMPDEST DUP1 PUSH2 0x55E DUP2 PUSH2 0x1B88 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x4F3 JUMP JUMPDEST PUSH2 0x579 CALLER JUMPDEST PUSH2 0x573 PUSH2 0xB92 JUMP JUMPDEST SWAP1 PUSH2 0xF8A JUMP JUMPDEST DUP5 DUP4 DUP2 EQ DUP1 ISZERO PUSH2 0x588 JUMPI POP DUP1 DUP3 EQ JUMPDEST PUSH2 0x5EE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265636F766572793A20696E636F6E73697374656E7420617272617973000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x30A JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x687 JUMPI PUSH2 0x67F DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x60D JUMPI PUSH2 0x60D PUSH2 0x1B2A JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x622 SWAP2 SWAP1 PUSH2 0x1A0E JUMP JUMPDEST DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x634 JUMPI PUSH2 0x634 PUSH2 0x1B2A JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x64D JUMPI PUSH2 0x64D PUSH2 0x1B2A JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x662 SWAP2 SWAP1 PUSH2 0x1A0E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 SWAP1 PUSH2 0x100D JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x5F1 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x6FA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F206761732070756D70730000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x30A JUMP JUMPDEST CALLVALUE PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x70C SWAP2 SWAP1 PUSH2 0x1BC0 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP DUP1 MLOAD PUSH1 0x2 SLOAD PUSH1 0x0 SWAP2 PUSH2 0x722 SWAP2 PUSH2 0x1BD3 JUMP JUMPDEST SWAP1 POP PUSH8 0x16345785D8A0000 DUP2 GT PUSH2 0x7BB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F7420656E6F7567682066756E647320666F7220616C6C2077616C6C657473 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x20746F2062652066696C6C656400000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x30A JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x815 JUMPI DUP2 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x7D9 SWAP2 SWAP1 PUSH2 0x1C0E JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x803 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x7F5 JUMPI PUSH2 0x7F5 PUSH2 0x1B2A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 PUSH2 0xE91 JUMP JUMPDEST DUP1 PUSH2 0x80D DUP2 PUSH2 0x1B88 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x7BE JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x87F JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x854 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8B0 PUSH2 0x896 PUSH2 0xB92 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x8C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH2 0x8F5 CALLER PUSH2 0x56B JUMP JUMPDEST DUP5 DUP4 DUP2 EQ DUP1 ISZERO PUSH2 0x904 JUMPI POP DUP1 DUP3 EQ JUMPDEST PUSH2 0x96A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265636F766572793A20696E636F6E73697374656E7420617272617973000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x30A JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x687 JUMPI DUP6 DUP6 DUP3 DUP2 DUP2 LT PUSH2 0x986 JUMPI PUSH2 0x986 PUSH2 0x1B2A JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x99B SWAP2 SWAP1 PUSH2 0x1A0E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD ADDRESS DUP11 DUP11 DUP6 DUP2 DUP2 LT PUSH2 0x9C9 JUMPI PUSH2 0x9C9 PUSH2 0x1B2A JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x9DE SWAP2 SWAP1 PUSH2 0x1A0E JUMP JUMPDEST DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0x9F0 JUMPI PUSH2 0x9F0 PUSH2 0x1B2A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP9 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP4 AND PUSH1 0x24 DUP6 ADD MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA80 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x96D JUMP JUMPDEST PUSH2 0xAA3 CALLER DUP3 PUSH2 0xA9C PUSH2 0xB92 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x109A JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xAAF CALLER PUSH2 0x56B JUMP JUMPDEST DUP3 DUP2 DUP2 EQ PUSH2 0xB19 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265636F766572793A20696E636F6E73697374656E7420617272617973000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x30A JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0xB8A JUMPI PUSH2 0xB82 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0xB38 JUMPI PUSH2 0xB38 PUSH2 0x1B2A JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0xB51 JUMPI PUSH2 0xB51 PUSH2 0x1B2A JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xB66 SWAP2 SWAP1 PUSH2 0x1A0E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x11C7 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xB1C JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x26C PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x1C0E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0xC48 JUMPI DUP2 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH2 0x44E PUSH32 0x7F5828D000000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH2 0xC76 PUSH2 0xC7D JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xCAB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x26C PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x1C0E JUMP JUMPDEST PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xD53 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E74657266616365446574656374696F6E3A2077726F6E672076616C756500 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x30A JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xE07 JUMPI POP PUSH1 0x0 PUSH2 0x26C JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xE58 JUMPI POP PUSH1 0x1 PUSH2 0x26C JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 AND EQ PUSH2 0xF47 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x41646472657373206E6F742070617274206F6620746865204761732053746174 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x696F6E2000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x30A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 DUP3 ISZERO PUSH2 0x8FC MUL SWAP1 DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x815 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x44E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E6572736869703A206E6F7420746865206F776E65720000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x30A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x815 SWAP1 DUP5 SWAP1 PUSH2 0x1321 JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x111F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E6572736869703A206E6F7420746865206F776E65720000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x30A JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x11C1 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0x1231 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x30A JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x128B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1290 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x815 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20756E61626C6520746F2073656E642076616C75652C2072 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6563697069656E74206D61792068617665207265766572746564000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x30A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1383 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x142D SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x815 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x13A1 SWAP2 SWAP1 PUSH2 0x1C21 JUMP JUMPDEST PUSH2 0x815 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x30A JUMP JUMPDEST PUSH1 0x60 PUSH2 0x143C DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x1444 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x14D6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x30A JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x14FF SWAP2 SWAP1 PUSH2 0x1C67 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x153C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1541 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1552 DUP8 DUP4 DUP4 DUP8 PUSH2 0x155D JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x15F3 JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x15EC JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND EXTCODESIZE PUSH2 0x15EC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x30A JUMP JUMPDEST POP DUP2 PUSH2 0x143C JUMP JUMPDEST PUSH2 0x143C DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x1608 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x30A SWAP2 SWAP1 PUSH2 0x1C83 JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x16B6 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x16B6 JUMPI DUP3 MLOAD DUP3 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND OR DUP3 SSTORE PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x165C JUMP JUMPDEST POP PUSH2 0x16C2 SWAP3 SWAP2 POP PUSH2 0x16C6 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x16C2 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x16C7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x171D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xAA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x1780 DUP2 PUSH2 0x1753 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1798 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x17B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x17C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x17D6 JUMPI PUSH2 0x17D6 PUSH2 0x1724 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0x1819 JUMPI PUSH2 0x1819 PUSH2 0x1724 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP9 DUP4 GT ISZERO PUSH2 0x1837 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x185C JUMPI PUSH2 0x184D DUP6 PUSH2 0x1775 JUMP JUMPDEST DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP6 ADD SWAP3 PUSH2 0x183C JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x40 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x18C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x18DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x18FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x191A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1932 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x193E DUP11 DUP4 DUP12 ADD PUSH2 0x18B5 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1957 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1963 DUP11 DUP4 DUP12 ADD PUSH2 0x18B5 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x197C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1989 DUP10 DUP3 DUP11 ADD PUSH2 0x18B5 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x19E9 JUMPI DUP4 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x19B7 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x171D DUP2 PUSH2 0x1753 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1A41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1A59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1A65 DUP9 DUP4 DUP10 ADD PUSH2 0x18B5 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1A7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A8B DUP8 DUP3 DUP9 ADD PUSH2 0x18B5 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x0 SWAP1 DUP3 SWAP1 PUSH1 0x20 DUP1 DUP7 ADD DUP5 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1AD7 JUMPI DUP2 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 MSTORE SWAP4 DUP3 ADD SWAP4 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1AA5 JUMP JUMPDEST POP SWAP3 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 SLOAD DUP4 SWAP2 POP DUP5 PUSH1 0x0 MSTORE PUSH1 0x20 DUP1 PUSH1 0x0 KECCAK256 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1AD7 JUMPI DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 MSTORE SWAP4 DUP3 ADD SWAP4 PUSH1 0x1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x1AF8 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x1BB9 JUMPI PUSH2 0x1BB9 PUSH2 0x1B59 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x26C JUMPI PUSH2 0x26C PUSH2 0x1B59 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1C09 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x26C JUMPI PUSH2 0x26C PUSH2 0x1B59 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x171D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1C5E JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1C46 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1C79 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1C43 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1CA2 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1C43 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATASIZE DUP6 DUP6 CALLDATACOPY 0x5E SIGNEXTEND 0xE5 SWAP5 CREATE2 0x1F PUSH4 0x7ABBAEE9 MSIZE SWAP8 0x2E PUSH4 0x3217936B PUSH12 0x24D9A9F90D7B1D5A64736F6C PUSH4 0x43000811 STOP CALLER ",
              "sourceMap": "287:234:20:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;541:174:4;;;;;;;;;;-1:-1:-1;541:174:4;;;;;:::i;:::-;;:::i;:::-;;;516:14:21;;509:22;491:41;;479:2;464:18;541:174:4;;;;;;;;1958:256:19;;;;;;;;;;-1:-1:-1;1958:256:19;;;;;:::i;:::-;;:::i;:::-;;425:94:20;;;;;;;;;;-1:-1:-1;469:14:20;;425:94;;;;;;;:::i;2333:340:19:-;;;:::i;2975:512:10:-;;;;;;;;;;-1:-1:-1;2975:512:10;;;;;:::i;:::-;;:::i;2679:431:19:-;;;;;;:::i;:::-;;:::i;2225:101::-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;709:129:1:-;;;;;;;;;;;;;:::i;:::-;;;5064:42:21;5052:55;;;5034:74;;5022:2;5007:18;709:129:1;4888:226:21;718:30:19;;;;;;;;;;-1:-1:-1;718:30:19;;;;;:::i;:::-;;:::i;4209:541:10:-;;;;;;;;;;-1:-1:-1;4209:541:10;;;;;:::i;:::-;;:::i;872:161:1:-;;;;;;;;;;-1:-1:-1;872:161:1;;;;;:::i;:::-;;:::i;1812:450:10:-;;;;;;;;;;-1:-1:-1;1812:450:10;;;;;:::i;:::-;;:::i;541:174:4:-;620:4;643:65;696:11;643:34;:32;:34::i;:::-;:52;;:65::i;:::-;636:72;541:174;-1:-1:-1;;541:174:4:o;1958:256:19:-;1150:7;:5;:7::i;:::-;1136:21;;:10;:21;;;1128:53;;;;;;;7907:2:21;1128:53:19;;;7889:21:21;7946:2;7926:18;;;7919:30;7985:21;7965:18;;;7958:49;8024:18;;1128:53:19;;;;;;;;;2066:11:::1;2047:31;;;;;;:::i;:::-;;;;;;;;2059:5;2047:31;;;;;;:::i;:::-;;::::0;;;;::::1;::::0;;;::::1;::::0;;;::::1;2088:19:::0;;::::1;::::0;:5:::1;::::0;:19:::1;::::0;::::1;::::0;::::1;:::i;:::-;;2123:6;2118:90;2137:5;:12:::0;2133:16;::::1;2118:90;;;2189:5;2195:1;2189:8;;;;;;;;:::i;:::-;;::::0;;;::::1;::::0;;::::1;::::0;2177;;2189::::1;::::0;;::::1;::::0;;;;;2183:1;;2177:8;::::1;;;;;:::i;:::-;;::::0;;;::::1;::::0;;;;;;::::1;::::0;::::1;::::0;;::::1;2170:16:::0;;;;::::1;::::0;;;;;;;;;;:27;;;::::1;::::0;;;::::1;::::0;;;::::1;::::0;;2151:3;::::1;::::0;::::1;:::i;:::-;;;;2118:90;;;;1958:256:::0;:::o;2333:340::-;1309:1;1294:12;1286:41;;;;;;;10082:2:21;1286:41:19;;;10064:21:21;10121:2;10101:18;;;10094:30;10160:14;10140:18;;;10133:42;10192:18;;1286:41:19;9880:336:21;1286:41:19;2403:9:::1;2388:11;;:24;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;2422:20:19::1;2457:12:::0;;2445:24:::1;::::0;:9:::1;:24;:::i;:::-;2422:47;;2502:5;2487:12;:20;2479:29;;;::::0;::::1;;2523:6;2518:149;2537:5;:12:::0;2533:16;::::1;2518:149;;;2585:12;2570:11;;:27;;;;;;;:::i;:::-;;;;;;;;2624:32;2633:5;2639:1;2633:8;;;;;;;;:::i;:::-;;::::0;;;::::1;::::0;;;::::1;::::0;::::1;;2643:12:::0;2624:8:::1;:32::i;:::-;2551:3:::0;::::1;::::0;::::1;:::i;:::-;;;;2518:149;;2975:512:10::0;3108:70;719:10:17;3165:12:10;3108:33;:31;:33::i;:::-;:56;;:70::i;:::-;3205:8;3238:23;;;:51;;;;-1:-1:-1;3265:24:10;;;3238:51;3230:93;;;;;;;10965:2:21;3230:93:10;;;10947:21:21;11004:2;10984:18;;;10977:30;11043:31;11023:18;;;11016:59;11092:18;;3230:93:10;10763:353:21;3230:93:10;3362:9;3357:114;3378:6;3373:1;:11;3357:114;;3409:47;3432:8;;3441:1;3432:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;3445:7;;3453:1;3445:10;;;;;;;:::i;:::-;;;;;;;3409:6;;3416:1;3409:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:22;;;:47;:22;:47::i;:::-;3386:3;;3357:114;;;;3098:389;2975:512;;;;;;:::o;2679:431:19:-;1309:1;1294:12;1286:41;;;;;;;10082:2:21;1286:41:19;;;10064:21:21;10121:2;10101:18;;;10094:30;10160:14;10140:18;;;10133:42;10192:18;;1286:41:19;9880:336:21;1286:41:19;2779:9:::1;2764:11;;:24;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;2835:12:19;;2821:11:::1;::::0;2798:20:::1;::::0;2821:26:::1;::::0;::::1;:::i;:::-;2798:49;;2889:18;2874:12;:33;2866:91;;;::::0;::::1;::::0;;11597:2:21;2866:91:19::1;::::0;::::1;11579:21:21::0;11636:2;11616:18;;;11609:30;11675:34;11655:18;;;11648:62;11746:15;11726:18;;;11719:43;11779:19;;2866:91:19::1;11395:409:21::0;2866:91:19::1;2973:6;2968:136;2987:5;:12;2983:1;:16;2968:136;;;3035:12;3020:11;;:27;;;;;;;:::i;:::-;;;;;;;;3061:32;3070:5;3076:1;3070:8;;;;;;;;:::i;:::-;;;;;;;3080:12;3061:8;:32::i;:::-;3001:3:::0;::::1;::::0;::::1;:::i;:::-;;;;2968:136;;;;2754:356;2679:431:::0;:::o;2225:101::-;2271:24;2314:5;2307:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2225:101;:::o;709:129:1:-;764:7;790:41;:33;:31;:33::i;:::-;3352:15:3;;;;3256:118;790:41:1;783:48;;709:129;:::o;718:30:19:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;718:30:19;:::o;4209:541:10:-;4348:70;719:10:17;4405:12:10;640:96:17;4348:70:10;4445:8;4478:26;;;:55;;;;-1:-1:-1;4508:25:10;;;4478:55;4470:97;;;;;;;10965:2:21;4470:97:10;;;10947:21:21;11004:2;10984:18;;;10977:30;11043:31;11023:18;;;11016:59;11092:18;;4470:97:10;10763:353:21;4470:97:10;4606:9;4601:133;4622:6;4617:1;:11;4601:133;;4653:9;;4663:1;4653:12;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:25;;;4687:4;4694:8;;4703:1;4694:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;4707:8;;4716:1;4707:11;;;;;;;:::i;:::-;4653:66;;;;;;;;;;12296:42:21;12365:15;;;4653:66:10;;;12347:34:21;12417:15;;;;12397:18;;;12390:43;-1:-1:-1;4707:11:10;;;;;;12449:18:21;;;12442:34;12259:18;;4653:66:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4630:3;;;;;4601:133;;872:161:1;951:75;719:10:17;1017:8:1;951:33;:31;:33::i;:::-;:51;:75;:51;:75::i;:::-;872:161;:::o;1812:450:10:-;1924:70;719:10:17;1981:12:10;640:96:17;1924:70:10;2021:8;2054:24;;;2046:66;;;;;;;10965:2:21;2046:66:10;;;10947:21:21;11004:2;10984:18;;;10977:30;11043:31;11023:18;;;11016:59;11092:18;;2046:66:10;10763:353:21;2046:66:10;2151:9;2146:100;2167:6;2162:1;:11;2146:100;;2198:33;2220:7;;2228:1;2220:10;;;;;;;:::i;:::-;;;;;;;2198:8;;2207:1;2198:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:21;;;;:33::i;:::-;2175:3;;2146:100;;;;1914:348;1812:450;;;;:::o;3707:174:3:-;3748:16;;601:71;671:1;609:58;601:71;:::i;1332:341::-;1420:26;;;;1416:152;;1462:30;;;;;;;;;;;;1511:46;;-1:-1:-1;;1511:46:3;;-1:-1:-1;;1511:46:3;1416:152;1577:89;1634:25;1661:4;1577:34;:32;:34::i;:::-;:56;:89;:56;:89::i;1613:174:6:-;1654:16;;287:79;365:1;295:66;287:79;:::i;670:246::-;782:35;797:20;782:35;;;774:79;;;;;;;12957:2:21;774:79:6;;;12939:21:21;12996:2;12976:18;;;12969:30;13035:33;13015:18;;;13008:61;13086:18;;774:79:6;12755:355:21;774:79:6;863:34;;;;;:21;:34;;;;;;;;;;;;:46;;;;;;;;;;;;;670:246::o;1267:340::-;1355:14;1385:35;1400:20;1385:35;;;1381:78;;-1:-1:-1;1443:5:6;1436:12;;1381:78;1472:40;;;;;1468:82;;-1:-1:-1;1535:4:6;1528:11;;1468:82;-1:-1:-1;1566:34:6;;:21;:34;;;;;;;;;;;;;;;1267:340::o;3120:222:19:-;3213:36;;;;:20;;;;:6;:20;;;;;;;;;:36;3205:85;;;;;;;13317:2:21;3205:85:19;;;13299:21:21;13356:2;13336:18;;;13329:30;13395:34;13375:18;;;13368:62;13466:6;13446:18;;;13439:34;13490:19;;3205:85:19;13115:400:21;3205:85:19;3300:35;;:21;;;;:35;;;;;3322:12;;3300:35;;;;3322:12;3300:21;:35;;;;;;;;;;;;;;;;;;;3540:161:3;3650:15;;;3639:26;;;3650:15;;3639:26;3631:63;;;;;;;13722:2:21;3631:63:3;;;13704:21:21;13761:2;13741:18;;;13734:30;13800:26;13780:18;;;13773:54;13844:18;;3631:63:3;13520:348:21;763:205:15;902:58;;;14077:42:21;14065:55;;902:58:15;;;14047:74:21;14137:18;;;;14130:34;;;902:58:15;;;;;;;;;;14020:18:21;;;;902:58:15;;;;;;;;;;925:23;902:58;;;875:86;;895:5;;875:19;:86::i;2760:369:3:-;2882:15;;;;;;;2915:23;;;;2907:60;;;;;;;13722:2:21;2907:60:3;;;13704:21:21;13761:2;13741:18;;;13734:30;13800:26;13780:18;;;13773:54;13844:18;;2907:60:3;13520:348:21;2907:60:3;2998:8;2981:25;;:13;:25;;;2977:146;;3022:26;;;;;;;;;;;;;3067:45;;;;;;;;-1:-1:-1;;3067:45:3;2977:146;2848:281;2760:369;;;:::o;2412:312:16:-;2526:6;2501:21;:31;;2493:73;;;;;;;14377:2:21;2493:73:16;;;14359:21:21;14416:2;14396:18;;;14389:30;14455:31;14435:18;;;14428:59;14504:18;;2493:73:16;14175:353:21;2493:73:16;2578:12;2596:9;:14;;2618:6;2596:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2577:52;;;2647:7;2639:78;;;;;;;14945:2:21;2639:78:16;;;14927:21:21;14984:2;14964:18;;;14957:30;15023:34;15003:18;;;14996:62;15094:28;15074:18;;;15067:56;15140:19;;2639:78:16;14743:422:21;3747:706:15;4166:23;4192:69;4220:4;4192:69;;;;;;;;;;;;;;;;;4200:5;4192:27;;;;:69;;;;;:::i;:::-;4275:17;;4166:95;;-1:-1:-1;4275:21:15;4271:176;;4370:10;4359:30;;;;;;;;;;;;:::i;:::-;4351:85;;;;;;;15654:2:21;4351:85:15;;;15636:21:21;15693:2;15673:18;;;15666:30;15732:34;15712:18;;;15705:62;15803:12;15783:18;;;15776:40;15833:19;;4351:85:15;15452:406:21;3873:223:16;4006:12;4037:52;4059:6;4067:4;4073:1;4076:12;4037:21;:52::i;:::-;4030:59;3873:223;-1:-1:-1;;;;3873:223:16:o;4960:446::-;5125:12;5182:5;5157:21;:30;;5149:81;;;;;;;16065:2:21;5149:81:16;;;16047:21:21;16104:2;16084:18;;;16077:30;16143:34;16123:18;;;16116:62;16214:8;16194:18;;;16187:36;16240:19;;5149:81:16;15863:402:21;5149:81:16;5241:12;5255:23;5282:6;:11;;5301:5;5308:4;5282:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5240:73;;;;5330:69;5357:6;5365:7;5374:10;5386:12;5330:26;:69::i;:::-;5323:76;4960:446;-1:-1:-1;;;;;;;4960:446:16:o;7466:628::-;7646:12;7674:7;7670:418;;;7701:10;:17;7722:1;7701:22;7697:286;;1465:19;;;;7908:60;;;;;;;17019:2:21;7908:60:16;;;17001:21:21;17058:2;17038:18;;;17031:30;17097:31;17077:18;;;17070:59;17146:18;;7908:60:16;16817:353:21;7908:60:16;-1:-1:-1;8003:10:16;7996:17;;7670:418;8044:33;8052:10;8064:12;8775:17;;:21;8771:379;;9003:10;8997:17;9059:15;9046:10;9042:2;9038:19;9031:44;8771:379;9126:12;9119:20;;;;;;;;;;;:::i;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:332:21;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;199:117;335:5;14:332;-1:-1:-1;;;14:332:21:o;543:184::-;595:77;592:1;585:88;692:4;689:1;682:15;716:4;713:1;706:15;732:162;826:42;819:5;815:54;808:5;805:65;795:93;;884:1;881;874:12;899:150;975:20;;1004:39;975:20;1004:39;:::i;:::-;899:150;;;:::o;1054:1196::-;1146:6;1177:2;1220;1208:9;1199:7;1195:23;1191:32;1188:52;;;1236:1;1233;1226:12;1188:52;1276:9;1263:23;1305:18;1346:2;1338:6;1335:14;1332:34;;;1362:1;1359;1352:12;1332:34;1400:6;1389:9;1385:22;1375:32;;1445:7;1438:4;1434:2;1430:13;1426:27;1416:55;;1467:1;1464;1457:12;1416:55;1503:2;1490:16;1525:2;1521;1518:10;1515:36;;;1531:18;;:::i;:::-;1577:2;1574:1;1570:10;1609:2;1603:9;1668:66;1663:2;1659;1655:11;1651:84;1643:6;1639:97;1786:6;1774:10;1771:22;1766:2;1754:10;1751:18;1748:46;1745:72;;;1797:18;;:::i;:::-;1833:2;1826:22;1883:18;;;1917:15;;;;-1:-1:-1;1959:11:21;;;1955:20;;;1987:19;;;1984:39;;;2019:1;2016;2009:12;1984:39;2043:11;;;;2063:156;2079:6;2074:3;2071:15;2063:156;;;2145:31;2172:3;2145:31;:::i;:::-;2133:44;;2096:12;;;;2197;;;;2063:156;;;2238:6;1054:1196;-1:-1:-1;;;;;;;;1054:1196:21:o;2255:447::-;2412:2;2401:9;2394:21;2451:6;2446:2;2435:9;2431:18;2424:34;2508:6;2500;2495:2;2484:9;2480:18;2467:48;2564:1;2535:22;;;2559:2;2531:31;;;2524:42;;;;2618:2;2606:15;;;2623:66;2602:88;2587:104;2583:113;;2255:447;-1:-1:-1;2255:447:21:o;2707:367::-;2770:8;2780:6;2834:3;2827:4;2819:6;2815:17;2811:27;2801:55;;2852:1;2849;2842:12;2801:55;-1:-1:-1;2875:20:21;;2918:18;2907:30;;2904:50;;;2950:1;2947;2940:12;2904:50;2987:4;2979:6;2975:17;2963:29;;3047:3;3040:4;3030:6;3027:1;3023:14;3015:6;3011:27;3007:38;3004:47;3001:67;;;3064:1;3061;3054:12;3001:67;2707:367;;;;;:::o;3079:1102::-;3251:6;3259;3267;3275;3283;3291;3344:2;3332:9;3323:7;3319:23;3315:32;3312:52;;;3360:1;3357;3350:12;3312:52;3400:9;3387:23;3429:18;3470:2;3462:6;3459:14;3456:34;;;3486:1;3483;3476:12;3456:34;3525:70;3587:7;3578:6;3567:9;3563:22;3525:70;:::i;:::-;3614:8;;-1:-1:-1;3499:96:21;-1:-1:-1;3702:2:21;3687:18;;3674:32;;-1:-1:-1;3718:16:21;;;3715:36;;;3747:1;3744;3737:12;3715:36;3786:72;3850:7;3839:8;3828:9;3824:24;3786:72;:::i;:::-;3877:8;;-1:-1:-1;3760:98:21;-1:-1:-1;3965:2:21;3950:18;;3937:32;;-1:-1:-1;3981:16:21;;;3978:36;;;4010:1;4007;4000:12;3978:36;;4049:72;4113:7;4102:8;4091:9;4087:24;4049:72;:::i;:::-;3079:1102;;;;-1:-1:-1;3079:1102:21;;-1:-1:-1;3079:1102:21;;4140:8;;3079:1102;-1:-1:-1;;;3079:1102:21:o;4186:697::-;4373:2;4425:21;;;4495:13;;4398:18;;;4517:22;;;4344:4;;4373:2;4596:15;;;;4570:2;4555:18;;;4344:4;4639:218;4653:6;4650:1;4647:13;4639:218;;;4718:13;;4733:42;4714:62;4702:75;;4832:15;;;;4797:12;;;;4675:1;4668:9;4639:218;;;-1:-1:-1;4874:3:21;;4186:697;-1:-1:-1;;;;;;4186:697:21:o;5119:180::-;5178:6;5231:2;5219:9;5210:7;5206:23;5202:32;5199:52;;;5247:1;5244;5237:12;5199:52;-1:-1:-1;5270:23:21;;5119:180;-1:-1:-1;5119:180:21:o;6659:255::-;6718:6;6771:2;6759:9;6750:7;6746:23;6742:32;6739:52;;;6787:1;6784;6777:12;6739:52;6826:9;6813:23;6845:39;6878:5;6845:39;:::i;6919:781::-;7049:6;7057;7065;7073;7126:2;7114:9;7105:7;7101:23;7097:32;7094:52;;;7142:1;7139;7132:12;7094:52;7182:9;7169:23;7211:18;7252:2;7244:6;7241:14;7238:34;;;7268:1;7265;7258:12;7238:34;7307:70;7369:7;7360:6;7349:9;7345:22;7307:70;:::i;:::-;7396:8;;-1:-1:-1;7281:96:21;-1:-1:-1;7484:2:21;7469:18;;7456:32;;-1:-1:-1;7500:16:21;;;7497:36;;;7529:1;7526;7519:12;7497:36;;7568:72;7632:7;7621:8;7610:9;7606:24;7568:72;:::i;:::-;6919:781;;;;-1:-1:-1;7659:8:21;-1:-1:-1;;;;6919:781:21:o;8053:608::-;8287:13;;8230:3;;8261;;8340:4;8367:15;;;8230:3;8410:224;8424:6;8421:1;8418:13;8410:224;;;8491:13;;8506:42;8487:62;8473:77;;8572:14;;;;8609:15;;;;8446:1;8439:9;8410:224;;;-1:-1:-1;8650:5:21;;8053:608;-1:-1:-1;;;;;;8053:608:21:o;8666:631::-;8840:3;8871;8903:6;8897:13;8928:3;8919:12;;8950:6;8947:1;8940:17;8976:4;9016:2;9013:1;9003:16;9037:1;9047:223;9061:6;9058:1;9055:13;9047:223;;;9128:13;;9143:42;9124:62;9110:77;;9209:14;;;;9258:1;9246:14;;;;9076:9;9047:223;;9302:184;9354:77;9351:1;9344:88;9451:4;9448:1;9441:15;9475:4;9472:1;9465:15;9491:184;9543:77;9540:1;9533:88;9640:4;9637:1;9630:15;9664:4;9661:1;9654:15;9680:195;9719:3;9750:66;9743:5;9740:77;9737:103;;9820:18;;:::i;:::-;-1:-1:-1;9867:1:21;9856:13;;9680:195::o;10221:125::-;10286:9;;;10307:10;;;10304:36;;;10320:18;;:::i;10351:274::-;10391:1;10417;10407:189;;10452:77;10449:1;10442:88;10553:4;10550:1;10543:15;10581:4;10578:1;10571:15;10407:189;-1:-1:-1;10610:9:21;;10351:274::o;10630:128::-;10697:9;;;10718:11;;;10715:37;;;10732:18;;:::i;15170:277::-;15237:6;15290:2;15278:9;15269:7;15265:23;15261:32;15258:52;;;15306:1;15303;15296:12;15258:52;15338:9;15332:16;15391:5;15384:13;15377:21;15370:5;15367:32;15357:60;;15413:1;15410;15403:12;16270:250;16355:1;16365:113;16379:6;16376:1;16373:13;16365:113;;;16455:11;;;16449:18;16436:11;;;16429:39;16401:2;16394:10;16365:113;;;-1:-1:-1;;16512:1:21;16494:16;;16487:27;16270:250::o;16525:287::-;16654:3;16692:6;16686:13;16708:66;16767:6;16762:3;16755:4;16747:6;16743:17;16708:66;:::i;:::-;16790:16;;;;;16525:287;-1:-1:-1;;16525:287:21:o;17175:455::-;17324:2;17313:9;17306:21;17287:4;17356:6;17350:13;17399:6;17394:2;17383:9;17379:18;17372:34;17415:79;17487:6;17482:2;17471:9;17467:18;17462:2;17454:6;17450:15;17415:79;:::i;:::-;17546:2;17534:15;17551:66;17530:88;17515:104;;;;17621:2;17511:113;;17175:455;-1:-1:-1;;17175:455:21:o"
            },
            "gasEstimates": {
              "creation": { "codeDepositCost": "1486800", "executionCost": "infinite", "totalCost": "infinite" },
              "external": {
                "__msgData()": "infinite",
                "charge()": "infinite",
                "charge(address[])": "infinite",
                "getGasPumps()": "infinite",
                "owner()": "infinite",
                "pumps(uint256)": "4657",
                "recoverERC20s(address[],address[],uint256[])": "infinite",
                "recoverERC721s(address[],address[],uint256[])": "infinite",
                "recoverETH(address[],uint256[])": "infinite",
                "setGasPumps(address[])": "infinite",
                "supportsInterface(bytes4)": "infinite",
                "transferOwnership(address)": "infinite"
              }
            },
            "methodIdentifiers": {
              "__msgData()": "31e66e1e",
              "charge()": "55161913",
              "charge(address[])": "77d17db2",
              "getGasPumps()": "89cd7a7b",
              "owner()": "8da5cb5b",
              "pumps(uint256)": "adddc767",
              "recoverERC20s(address[],address[],uint256[])": "73c8a958",
              "recoverERC721s(address[],address[],uint256[])": "c3666c36",
              "recoverETH(address[],uint256[])": "f7ba94bd",
              "setGasPumps(address[])": "27bd8ff1",
              "supportsInterface(bytes4)": "01ffc9a7",
              "transferOwnership(address)": "f2fde38b"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"gasPumps\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address payable[]\",\"name\":\"oldGasPumps\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"address payable[]\",\"name\":\"newGasPumps\",\"type\":\"address[]\"}],\"name\":\"GasPumpsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"__msgData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"charge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGasPumps\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pumps\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC721[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"newGasPumps\",\"type\":\"address[]\"}],\"name\":\"setGasPumps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"recoverERC20s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\",\"tokens\":\"the list of ERC20 token addresses.\"}},\"recoverERC721s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"contracts\":\"the list of ERC721 contract addresses.\",\"tokenIds\":\"the list of token ids to transfer.\"}},\"recoverETH(address[],uint256[])\":{\"details\":\"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts if the sender is not the contract owner.Reverts if `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"recoverERC20s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverERC721s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverETH(address[],uint256[])\":{\"notice\":\"Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OpenCampusGasStationMock.sol\":\"OpenCampusGasStationMock\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x7c8f90c1f72ccdd900c212f4d0067907c906e4a64856f1b67fee7f7ec13e1f74\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is Context, IERC173 {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual override returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual override {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xd408d65cc5a0377e5310695c67400dfbd397d6537398d384a70f09b3bfdf8262\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8c069442d3de596ee13824f700ef4d640e1429aeaa6b82bfd919f177c656fb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xef423b77e65093f86e7f7ffc35e41f7008304976a7334bb3f9049db69d43eae9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xe3487e6d79da78bc0ea5b4649ca9cc7a0376800280e3e389a5e70fc7ced74d00\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {TokenRecoveryBase} from \\\"./base/TokenRecoveryBase.sol\\\";\\nimport {ContractOwnership} from \\\"./../access/ContractOwnership.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract TokenRecovery is TokenRecoveryBase, ContractOwnership {\\n\\n}\\n\",\"keccak256\":\"0x573429048b4d0f019904aec1f120b8c9b5e64a028ede705eff43942ad0aec46d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\ncontract TokenRecoveryBase is Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        require(length == amounts.length, \\\"Recovery: inconsistent arrays\\\");\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                accounts[i].sendValue(amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        require(length == tokens.length && length == amounts.length, \\\"Recovery: inconsistent arrays\\\");\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                tokens[i].safeTransfer(accounts[i], amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Reverts if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        require(length == contracts.length && length == tokenIds.length, \\\"Recovery: inconsistent arrays\\\");\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                contracts[i].transferFrom(address(this), accounts[i], tokenIds[i]);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd26d7268e7cdfc11150ec6ffb1f3552b541f65972012e2ecacaa9a58c4bf4152\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0x1b9d3522fab7ad81b4757fa0ce919f4320f08249546b3e3bd79da7cf12d55cee\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/GasStation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\n// [\\\"0x9551CaF0Ef97CA91a3FAc1fB8c7D83041cFf8EC5\\\",\\\"0x31d2CbD0fee68a2Ec6454f064f7c16bA1e1B7BBa\\\",\\\"0x964A2Bc59E73a2C793c3FEAC51Bba1Ea6A1B3C99\\\"]\\n// [\\\"0x78731D3Ca6b7E34aC0F824c42a7cC18A495cabaB\\\",\\\"0xdD870fA1b7C4700F2BD7f44238821C26f7392148\\\", \\\"0x583031D1113aD414F02576BD6afaBfb302140225\\\", \\\"0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2\\\",\\\"0x4B20993Bc481177ec7E8f571ceCaE8A9e22C02db\\\"]\\n\\n\\nimport {TokenRecovery} from \\\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\\\";\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\n\\n\\ncontract OpenCampusGasStation  is TokenRecovery {\\n    \\n    //address private owner;\\n    address payable[] public pumps;\\n    mapping(address => address payable) isPump;\\n    uint total_value;\\n    \\n    \\n    // event for EVM logging\\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\\n    event GasPumpsSet(address payable[] indexed oldGasPumps, address payable[] indexed newGasPumps);\\n    \\n    \\n    // modifier to check if the caller is owner\\n    \\n    modifier isOwner() {\\n        require(msg.sender == owner(), \\\"Caller is not owner\\\");\\n        _;\\n    }\\n\\n    // modifier to check if there are gas pumps\\n    modifier hasGasPumps() {\\n        require(pumps.length > 0, \\\"No gas pumps\\\");\\n        _;\\n    }\\n    \\n    constructor(address payable[] memory gasPumps) ContractOwnership(msg.sender) payable {\\n        //owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\\n        //emit OwnerSet(address(0), owner);\\n        setGasPumps(gasPumps);\\n\\n        total_value = msg.value;  // msg.value is the ethers of the transaction\\n    }\\n    /*\\n    function setOwner(address newOwner) public isOwner {\\n        emit OwnerSet(owner, newOwner);\\n        owner = newOwner; \\n    }\\n    \\n    function getOwner() external view returns (address) {\\n        return owner;\\n    }\\n    */\\n\\n    \\n    function setGasPumps(address payable[] memory newGasPumps) public isOwner {\\n        emit GasPumpsSet(pumps, newGasPumps);\\n        pumps = newGasPumps; \\n        for (uint i=0; i < pumps.length; i++) {\\n            isPump[pumps[i]] = pumps[i];\\n        }\\n    }\\n    \\n\\n    function getGasPumps() external view returns (address payable[] memory) {\\n        return pumps;\\n    }\\n\\n\\n    function charge() payable public hasGasPumps {\\n        total_value += msg.value;\\n        uint256 pricePerPump = msg.value / pumps.length;\\n        require(pricePerPump > 10000);\\n        for (uint i=0; i < pumps.length; i++) {\\n            total_value -= pricePerPump;\\n            \\n            withdraw(pumps[i], pricePerPump);\\n        }\\n    }\\n\\n    function charge(address payable[] memory addrs) payable public hasGasPumps {\\n        total_value += msg.value;\\n        uint256 pricePerPump = total_value / addrs.length;\\n        \\n        require(pricePerPump > 100000000000000000, \\\"Not enough funds for all wallets to be filled\\\");\\n\\n        for (uint i=0; i < addrs.length; i++) {\\n            total_value -= pricePerPump;\\n            withdraw(addrs[i], pricePerPump);\\n        }\\n    }\\n    \\n    function withdraw(address payable receiverAddr, uint receiverAmnt) private {\\n        require(isPump[receiverAddr] == receiverAddr, \\\"Address not part of the Gas Station \\\");\\n        receiverAddr.transfer(receiverAmnt);\\n    }\\n    \\n}\",\"keccak256\":\"0x43341e6975d075bb5c4dbd04b1da8b2286c5ee5f4594cbb5a777c98996bae3b8\",\"license\":\"MIT\"},\"contracts/OpenCampusGasStationMock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {OpenCampusGasStation} from \\\"./GasStation.sol\\\";\\n\\ncontract OpenCampusGasStationMock is OpenCampusGasStation {\\n    constructor(\\n        address payable[] memory gasPumps\\n    ) OpenCampusGasStation(gasPumps) {}\\n\\n    function __msgData() external view returns (bytes calldata) {\\n        return _msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x8813e991aa54da36153a56ffb518f01139c86dbf9ab761d147012b6d92adb53e\",\"license\":\"MIT\"}},\"version\":1}",
          "storageLayout": {
            "storage": [
              {
                "astId": 1640,
                "contract": "contracts/OpenCampusGasStationMock.sol:OpenCampusGasStationMock",
                "label": "pumps",
                "offset": 0,
                "slot": "0",
                "type": "t_array(t_address_payable)dyn_storage"
              },
              {
                "astId": 1644,
                "contract": "contracts/OpenCampusGasStationMock.sol:OpenCampusGasStationMock",
                "label": "isPump",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_address,t_address_payable)"
              },
              {
                "astId": 1646,
                "contract": "contracts/OpenCampusGasStationMock.sol:OpenCampusGasStationMock",
                "label": "total_value",
                "offset": 0,
                "slot": "2",
                "type": "t_uint256"
              }
            ],
            "types": {
              "t_address": { "encoding": "inplace", "label": "address", "numberOfBytes": "20" },
              "t_address_payable": { "encoding": "inplace", "label": "address payable", "numberOfBytes": "20" },
              "t_array(t_address_payable)dyn_storage": {
                "base": "t_address_payable",
                "encoding": "dynamic_array",
                "label": "address payable[]",
                "numberOfBytes": "32"
              },
              "t_mapping(t_address,t_address_payable)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => address payable)",
                "numberOfBytes": "32",
                "value": "t_address_payable"
              },
              "t_uint256": { "encoding": "inplace", "label": "uint256", "numberOfBytes": "32" }
            }
          },
          "userdoc": {
            "events": {
              "OwnershipTransferred(address,address)": { "notice": "Emitted when the contract ownership changes." }
            },
            "kind": "user",
            "methods": {
              "owner()": { "notice": "Gets the address of the contract owner." },
              "recoverERC20s(address[],address[],uint256[])": {
                "notice": "Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts."
              },
              "recoverERC721s(address[],address[],uint256[])": {
                "notice": "Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts."
              },
              "recoverETH(address[],uint256[])": {
                "notice": "Extract ETH tokens which were accidentally sent to the contract to a list of accounts."
              },
              "supportsInterface(bytes4)": { "notice": "Returns whether this contract implements a given interface." },
              "transferOwnership(address)": { "notice": "Sets the address of the new contract owner." }
            },
            "version": 1
          }
        }
      }
    }
  }
}

